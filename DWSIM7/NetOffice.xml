<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetOffice</name>
    </assembly>
    <members>
        <member name="T:NetOffice.Attributes.AttributeExtensions">
            <summary>
            Spend generic attribute reflection extensions
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.AttributeExtensions.GetCustomAttribute``1(System.Type,System.Boolean)">
            <summary>
            Returns first found attribute or null
            </summary>
            <typeparam name="T">target attribute</typeparam>
            <param name="value">value to reflect</param>
            <param name="inherit">search also base types</param>
            <returns>target or null</returns>
        </member>
        <member name="T:NetOffice.Attributes.BaseResultAttribute">
            <summary>
            Indicates the property or method return type is a base type.
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.BaseTypeAttribute">
            <summary>
            Well known base type. That means other types inherit from.
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.BaseTypeAttribute.#ctor">
            <summary>
            Creates an instance of the attribute
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.ComEventInterfaceAttribute">
            <summary>
            Gives information about supported events
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.ComEventInterfaceAttribute.#ctor(System.Type[])">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="sinks">COM event interfaces</param>
        </member>
        <member name="F:NetOffice.Attributes.ComEventInterfaceAttribute.Sinks">
            <summary>
            COM event interfaces
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.ComRegExportCallAttribute">
            <summary>
            Indicates a static method is to call from RegAddin while create a register file(.reg)
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.ComRegisterCallAttribute">
            <summary>
            Indicates a static method is to call from RegAddin while register addin
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.ComUnregisterCallAttribute">
            <summary>
            Indicates a static method is to call from RegAddin while unregister addin
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.CoreOverriddenAttribute">
            <summary>
            Indicates a method or property is overriden from NetOffice Core
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.CustomIndexerAttribute">
            <summary>
            This indexer is a custom overload from NetOffice
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.DuplicateAttribute">
            <summary>
            Known duplicate in MS-Office Automation Model
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.DuplicateAttribute.To">
            <summary>
            Duplicate Type Name (comma separated, if more than 1 duplicate)
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.DuplicateAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="to">duplicate type name</param>
        </member>
        <member name="T:NetOffice.Attributes.InternalEntityKind">
            <summary>
            Determine the kind of internal entity
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.InternalEntityKind.SinkHelper">
            <summary>
            Sink helper to bridge com event interface to CoClass wrapper
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.InternalEntityKind.ComEventInterface">
            <summary>
            COM Interop Event interface
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.InternalEntityAttribute">
            <summary>
            Indicates the entity is not intended to use by client caller directly
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.InternalEntityAttribute.Value">
            <summary>
            Entity Kind
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.InternalEntityAttribute.#ctor(NetOffice.Attributes.InternalEntityKind)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="value">entity kind</param>
        </member>
        <member name="T:NetOffice.Attributes.KnownIssueAttribute">
            <summary>
            Method or property has known issues
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.ModuleBaseTypeAttribute">
            <summary>
            Indicates a entity is a static helper module
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.ModuleBaseTypeAttribute.Value">
            <summary>
            Module Base Type
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.ModuleBaseTypeAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="value">module base type</param>
        </member>
        <member name="T:NetOffice.Attributes.ModuleProviderAttribute">
            <summary>
            Indicates the entity provides its underlying object to a static helper module
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.ModuleProviderAttribute.Value">
            <summary>
            Module Type
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.ModuleProviderAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="value">module type</param>
        </member>
        <member name="T:NetOffice.Attributes.NativeCallerAttribute">
            <summary>
            Instance use early bind calls for underlying object
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.NativeCallerAttribute.Native">
            <summary>
            Native Interface Type
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.NativeCallerAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="native">native interface type</param>
        </member>
        <member name="T:NetOffice.Attributes.NativeResultAttribute">
            <summary>
            Method or property returns a native COM proxy
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.ProxyResultAttribute">
            <summary>
            Indicates object typed result is a always a COM reference or null(Nothing in Visual Basic)
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.SinkArgumentType">
            <summary>
            Determine type of sink interface method argument
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.SinkArgumentType.Int16">
            <summary>
            System.Int16
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.SinkArgumentType.Int32">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.SinkArgumentType.Single">
            <summary>
            System.Single
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.SinkArgumentType.Double">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.SinkArgumentType.String">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.SinkArgumentType.Bool">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.SinkArgumentType.Enum">
            <summary>
            System.Enum
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.SinkArgumentType.KnownProxy">
            <summary>
            Known Proxy Type
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.SinkArgumentType.UnknownProxy">
            <summary>
            Unknown Proxy Type
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.SinkArgumentAttribute">
            <summary>
            Sink Interface Argument Information
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.SinkArgumentAttribute.Name">
            <summary>
            Argument Name
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.SinkArgumentAttribute.Type">
            <summary>
            Argument Type
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.SinkArgumentAttribute.Convert">
            <summary>
            Target Type - if its
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.SinkArgumentAttribute.#ctor(System.String,NetOffice.Attributes.SinkArgumentType)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="name">argument name</param>
            <param name="type">argument type</param>
        </member>
        <member name="M:NetOffice.Attributes.SinkArgumentAttribute.#ctor(System.String,System.Type)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="name">argument name</param>
            <param name="convert">argument convert to</param>
        </member>
        <member name="M:NetOffice.Attributes.SinkArgumentAttribute.#ctor(System.String,NetOffice.Attributes.SinkArgumentType,System.Type)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="name">argument name</param>
            <param name="type">argument type</param>
            <param name="convert">argument convert to</param>
        </member>
        <member name="T:NetOffice.Attributes.EnumeratorInvoke">
            <summary>
            Indicates how an enumerator want invoke internally
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.EnumeratorInvoke.Property">
            <summary>
            Invoke as property
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.EnumeratorInvoke.Method">
            <summary>
            Invoke as method
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.EnumeratorInvoke.Custom">
            <summary>
            Underlying instance doesn't have an enumerator. Enumerator is created by NetOffice instead by using this+Count.
            Using a custom enumerator may cause performance/memory dropdown when heavy amount of data is returned
            or fetching result cause remote calls - for example to get thousands of Outlook mail items 
            from an Exchange Server through NetOffice custom enumerator isn't a good idea. 
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.Enumerator">
            <summary>
            Enumerator Result Kind
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.Enumerator.Variant">
            <summary>
            Unknown/may mixed
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.Enumerator.Reference">
            <summary>
            Returns reference types
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.Enumerator.Value">
            <summary>
            Returns scalar/value types like bool or int(Boolean or Integer in Visual Basic) and also System.String
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.EnumeratorAttribute">
            <summary>
            Enumerator Implementation Details
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.EnumeratorAttribute.Result">
            <summary>
            Return Kind
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.EnumeratorAttribute.Invoke">
            <summary>
            Internal Invoke Kind
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.EnumeratorAttribute.#ctor(NetOffice.Attributes.Enumerator,NetOffice.Attributes.EnumeratorInvoke)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="result">return kind</param>
            <param name="invoke">internal invoke call</param>
        </member>
        <member name="T:NetOffice.Attributes.EventSinkAttribute">
            <summary>
            Gives information about connection sink implementations to support events
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.EventSinkAttribute.#ctor(System.Type[])">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="sinks">sinks based on NetOffice.SinkHelper</param>
        </member>
        <member name="F:NetOffice.Attributes.EventSinkAttribute.Sinks">
            <summary>
            Sinks based on NetOffice.SinkHelper
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.IndexInvoke">
            <summary>
            Indicates how an default property want invoke internally
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.IndexInvoke.Property">
            <summary>
            Invoke as property
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.IndexInvoke.Method">
            <summary>
            Invoke as method
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.HasIndexPropertyAttribute">
            <summary>
            Default Property Implementation Details
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.HasIndexPropertyAttribute.Invoke">
            <summary>
            Internal Invoke Kind
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.HasIndexPropertyAttribute.InvokeName">
            <summary>
            Internal Invoke Name
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.HasIndexPropertyAttribute.#ctor(NetOffice.Attributes.IndexInvoke,System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="invoke">internal Invoke Kind</param>
            <param name="invokeName">internal Invoke Name</param>
        </member>
        <member name="T:NetOffice.Attributes.IndexPropertyAttribute">
            <summary>
            Flags an default property
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.Invoke">
            <summary>
            Indicates how an entity want invoke internally
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.Invoke.Property">
            <summary>
            Invoke as property
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.Invoke.Method">
            <summary>
            Invoke as method
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.InvokeAsAttribute">
            <summary>
            Invoke Internal usage
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.InvokeAsAttribute.#ctor(NetOffice.Attributes.Invoke)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="invoke">invoke kind</param>
        </member>
        <member name="F:NetOffice.Attributes.InvokeAsAttribute.Invoke">
            <summary>
            Invoke Kind
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.InternalNameAttribute">
            <summary>
            Internal invoke member name, regardless of its wrapper name
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.InternalNameAttribute.InternalName">
            <summary>
            The internal member name
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.InternalNameAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="internalName">internal member name</param>
        </member>
        <member name="T:NetOffice.Attributes.ComProgIdAttribute">
            <summary>
            ProgId to create an instance from
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.ComProgIdAttribute.Value">
            <summary>
            Registered ProgId if installed
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.ComProgIdAttribute.#ctor(System.String)">
            <summary>
            Creates an instance
            </summary>
            <param name="value">registered progId if installed</param>
        </member>
        <member name="T:NetOffice.Attributes.RedirectAttribute">
            <summary>
            Indicates the member is an alias and want call another instance member
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.RedirectAttribute.Value">
            <summary>
            Instance member to call
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.RedirectAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="name">instance member to call</param>
        </member>
        <member name="T:NetOffice.Attributes.SyntaxBypassAttribute">
            <summary>
            Indicates a class or interface is a base class/interface to bypass COM/C# syntax incompatibilities
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.CustomEnumeratorAttribute">
            <summary>
            This enumerator is not supported from the com proxy instance, its a custom service from NetOffice
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.CustomMethodAttribute">
            <summary>
            This method is a custom overload from NetOffice
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.NetOfficeAssemblyAttribute">
            <summary>
            Indicates assembly is a NetOffice api assembly
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.NetOfficeAssemblyAttribute.FullName">
            <summary>
            Full qualified type name
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.NetOfficeAssemblyAttribute.SupportedApiVersion">
            <summary>
            Multiple version string
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.NetOfficeAssemblyAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="supportedApiVersion">multiple version string</param>
        </member>
        <member name="M:NetOffice.Attributes.NetOfficeAssemblyAttribute.ContainsAttribute(System.Reflection.Assembly)">
            <summary>
            Returns information an assembly is marked with NetOfficeAssemblyAttribute
            </summary>
            <param name="assembly">given assembly as any</param>
            <returns>true if attribute exists, otherwise false</returns>
        </member>
        <member name="M:NetOffice.Attributes.NetOfficeAssemblyAttribute.GetSupportedApiVersion(System.Reflection.Assembly)">
            <summary>
            Returns supported api version trough NetOfficeAssemblyAttribute or null if not exists
            </summary>
            <param name="assembly">given assembly as any</param>
            <returns>supported api version or null</returns>
        </member>
        <member name="T:NetOffice.Attributes.EntityType">
            <summary>
            Indicates original type of entity
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.EntityType.IsCoClass">
            <summary>
            Entity is class
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.EntityType.IsDispatchInterface">
            <summary>
            Entity is dispatch interface
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.EntityType.IsInterface">
            <summary>
            Entity is interface
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.EntityType.IsModule">
            <summary>
            Entity is module
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.EntityType.IsEnum">
            <summary>
            Entity is enum
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.EntityType.IsStruct">
            <summary>
            Entity is struct
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.EntityType.IsConstants">
            <summary>
            Entity is const module
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.EntityType.IsNativeInterface">
            <summary>
            Entity is native COMImport interface
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.EntityType.IsNativeInterfaceCaller">
            <summary>
            Entity is wrapper around a native COMImport interface
            That means the instance performs early-bind calls
            </summary>
        </member>
        <member name="T:NetOffice.Attributes.EntityTypeAttribute">
            <summary>
            Indicates original type of entity in COM Type Library
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.EntityTypeAttribute.Type">
            <summary>
            returns type of entity
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.EntityTypeAttribute.#ctor(NetOffice.Attributes.EntityType)">
            <summary>
            creates instance
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:NetOffice.Attributes.SupportByVersionAttribute">
            <summary>
            Indicates which COM Type Library Version supports the entity
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.SupportByVersionAttribute.Name">
            <summary>
            Name of the Library
            </summary>
        </member>
        <member name="F:NetOffice.Attributes.SupportByVersionAttribute.Versions">
            <summary>
            All supported library versions from the entity
            </summary>
        </member>
        <member name="M:NetOffice.Attributes.SupportByVersionAttribute.#ctor(System.String,System.Double[])">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="name">name of the library</param>
            <param name="versions">version of the library</param>
        </member>
        <member name="T:NetOffice.CollectionsGeneric.IEnumerableProvider`1">
            <summary>
            Provides enumerable sequence services
            </summary>
            <typeparam name="T">T as any</typeparam>
        </member>
        <member name="M:NetOffice.CollectionsGeneric.IEnumerableProvider`1.GetComObjectEnumerator(NetOffice.ICOMObject)">
            <summary>
            Creates a managed enumerator
            </summary>
            <param name="parent">parent instance or null in com proxy management</param>
            <returns>managed enumerator</returns>
            <exception cref="T:System.ArgumentNullException">argument is null</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">unexpected error</exception>
        </member>
        <member name="M:NetOffice.CollectionsGeneric.IEnumerableProvider`1.FetchVariantComObjectEnumerator(NetOffice.ICOMObject,NetOffice.ICOMObject)">
            <summary>
            Fetch managed enumerator
            </summary>
            <param name="parent">parent instance or null in com proxy management</param>
            <param name="enumerator">enumerator to fetch</param>
            <returns>IEnumerator instance</returns>
            <exception cref="T:System.ArgumentNullException">argument is null</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">unexpected error</exception>
        </member>
        <member name="T:NetOffice.CollectionsGeneric.IDisposableCOMObjectSequence`1">
            <summary>
            Represents an IEnumerable:T with the service of disposing all items
            </summary>
        </member>
        <member name="P:NetOffice.CollectionsGeneric.IDisposableCOMObjectSequence`1.Item(System.Int32)">
            <summary>
            Returns an index based item
            </summary>
            <param name="index">target index</param>
            <returns>item instance from index</returns>
        </member>
        <member name="P:NetOffice.CollectionsGeneric.IDisposableCOMObjectSequence`1.Count">
            <summary>
            Items count of the enumeration
            </summary>
        </member>
        <member name="M:NetOffice.CollectionsGeneric.IDisposableCOMObjectSequence`1.Dispose(`0)">
            <summary>
            Dispose the instance
            </summary>
            <param name="keepAliveItem">don't dispose this item</param>
        </member>
        <member name="T:NetOffice.CollectionsGeneric.IDisposableSequence`1">
            <summary>
            Represents an IEnumerable:T with the service of disposing all items
            </summary>
        </member>
        <member name="P:NetOffice.CollectionsGeneric.IDisposableSequence`1.Item(System.Int32)">
            <summary>
            Returns an index based item
            </summary>
            <param name="index">target index</param>
            <returns>item instance from index</returns>
        </member>
        <member name="P:NetOffice.CollectionsGeneric.IDisposableSequence`1.Count">
            <summary>
            Items count of the enumeration
            </summary>
        </member>
        <member name="M:NetOffice.CollectionsGeneric.IDisposableSequence`1.Dispose(`0)">
            <summary>
            Dispose the instance
            </summary>
            <param name="keepAliveItem">don't dispose this item</param>
        </member>
        <member name="T:NetOffice.CollectionsGeneric.IDisposableSequence">
            <summary>
            Represents an IEnumerable:T with the service of disposing all items.
            IDisposableEnumeration want dispose items there implement IDispose and
            call Marshal.ReleaseComObject if item is a Com Proxy.
            </summary>
        </member>
        <member name="P:NetOffice.CollectionsGeneric.IDisposableSequence.Item(System.Int32)">
            <summary>
            Returns an index based item
            </summary>
            <param name="index">target index</param>
            <returns>item instance from index</returns>
        </member>
        <member name="P:NetOffice.CollectionsGeneric.IDisposableSequence.Count">
            <summary>
            Items count of the enumeration
            </summary>
        </member>
        <member name="M:NetOffice.CollectionsGeneric.IDisposableSequence.Dispose(System.Object)">
            <summary>
            Dispose the instance
            </summary>
            <param name="keepAliveItem">don't dispose or release this item</param>
        </member>
        <member name="M:NetOffice.ComTypes.ITypeInfoExtensions.GetTypeGuid(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
            <summary>
            Returns id of an interface
            </summary>
            <param name="typeInfo">com type information</param>
            <returns>interface id(iid)</returns>
        </member>
        <member name="T:NetOffice.ComTypes.TypeDescriptor">
            <summary>
            TypeDescriptor Services
            </summary>
        </member>
        <member name="M:NetOffice.ComTypes.TypeDescriptor.GetClassName(System.Object)">
            <summary>
            Returns the name of the class for the specified component using the default type descriptor.
            </summary>
            <param name="component">The System.Object for which you want the class name</param>
            <returns>A System.String containing the name of the class for the specified component.</returns>
        </member>
        <member name="M:NetOffice.ComTypes.TypeDescriptor.GetComponentName(System.Object)">
            <summary>
            Returns the name of the component for the specified component using the default type descriptor.
            </summary>
            <param name="component">The System.Object for which you want the component name</param>
            <returns>A System.String containing the name of the component for the specified component.</returns>
        </member>
        <member name="M:NetOffice.ComTypes.TypeDescriptor.GetFullComponentName(System.Object)">
            <summary>
            Returns the name of the component for the specified component using the default type descriptor.
            </summary>
            <param name="component">The System.Object for which you want the component name</param>
            <returns>A System.String containing the name of the component for the specified component.</returns>
        </member>
        <member name="M:NetOffice.ComTypes.TypeDescriptor.GetFullComponentClassName(System.Object)">
            <summary>
            Combines GetFullComponentName/GetClassName
            </summary>
            <param name="component">The System.Object for which you want the component+class name</param>
            <returns>A System.String containing the name of the component for the specified component.</returns>
        </member>
        <member name="T:NetOffice.Contribution.CollectionsGeneric.DisposableGenericList`1">
            <summary>
            IDisposableEnumeration'1 Default Implementation
            </summary>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.DisposableGenericList`1.#ctor(`0[])">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="items">items to manage</param>
        </member>
        <member name="P:NetOffice.Contribution.CollectionsGeneric.DisposableGenericList`1.Count">
            <summary>
            Items count of the enumeration
            </summary>
        </member>
        <member name="P:NetOffice.Contribution.CollectionsGeneric.DisposableGenericList`1.Item(System.Int32)">
            <summary>
            Returns an index based item
            </summary>
            <param name="index">target index</param>
            <returns>item instance from index</returns>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.DisposableGenericList`1.GetEnumerator">
            <summary>
            Returns an enumerator
            </summary>
            <returns>enumerator</returns>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.DisposableGenericList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator
            </summary>
            <returns>enumerator</returns>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.DisposableGenericList`1.Dispose(`0)">
            <summary>
            Dispose the instance
            </summary>
            <param name="keepAliveItem">don't dispose this item</param>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.DisposableGenericList`1.Dispose">
            <summary>
            Dispose the instance
            </summary>
        </member>
        <member name="T:NetOffice.Contribution.CollectionsGeneric.DisposableObjectList">
            <summary>
            IDisposableEnumeration Default Implementation
            </summary>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.DisposableObjectList.#ctor(System.Object[])">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="items">items to manage</param>
        </member>
        <member name="P:NetOffice.Contribution.CollectionsGeneric.DisposableObjectList.Count">
            <summary>
            Items count of the enumeration
            </summary>
        </member>
        <member name="P:NetOffice.Contribution.CollectionsGeneric.DisposableObjectList.Item(System.Int32)">
            <summary>
            Returns an index based item
            </summary>
            <param name="index">target index</param>
            <returns>item instance from index</returns>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.DisposableObjectList.GetEnumerator">
            <summary>
            Returns an enumerator
            </summary>
            <returns>enumerator</returns>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.DisposableObjectList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator
            </summary>
            <returns>enumerator</returns>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.DisposableObjectList.Dispose(System.Object)">
            <summary>
            Dispose the instance
            </summary>
            <param name="keepAliveItem">don't dispose or release this item</param>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.DisposableObjectList.Dispose">
            <summary>
            Dispose the instance
            </summary>
        </member>
        <member name="T:NetOffice.Contribution.CollectionsGeneric.DisposableComObjectList`1">
            <summary>
            Default implementation for <see cref="T:NetOffice.CollectionsGeneric.IDisposableCOMObjectSequence`1"/> interface.
            </summary>
            <typeparam name="T"><see cref="T:NetOffice.ICOMObject"/> as any</typeparam>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.DisposableComObjectList`1.#ctor(`0[])">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="items">items to manage</param>
        </member>
        <member name="P:NetOffice.Contribution.CollectionsGeneric.DisposableComObjectList`1.Item(System.Int32)">
            <summary>
            Returns an index based item
            </summary>
            <param name="index">target index</param>
            <returns>item instance from index</returns>
        </member>
        <member name="P:NetOffice.Contribution.CollectionsGeneric.DisposableComObjectList`1.Count">
            <summary>
            Items count of the enumeration
            </summary>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.DisposableComObjectList`1.GetEnumerator">
            <summary>
            Returns an enumerator
            </summary>
            <returns>enumerator</returns>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.DisposableComObjectList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator
            </summary>
            <returns>enumerator</returns>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.DisposableComObjectList`1.Dispose">
            <summary>
            Dispose the instance
            </summary>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.DisposableComObjectList`1.Dispose(`0)">
            <summary>
            Dispose the instance
            </summary>
            <param name="keepAliveItem">don't dispose this item</param>
        </member>
        <member name="T:NetOffice.Contribution.CollectionsGeneric.SortableBindingList`1">
            <summary>
            Typed BindingList with generic sort
            </summary>
            <typeparam name="T">generic argument</typeparam>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.SortableBindingList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetOffice.Contribution.CollectionsGeneric.SortableBindingList`1"/> class.
            </summary>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.SortableBindingList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NetOffice.Contribution.CollectionsGeneric.SortableBindingList`1"/> class.
            </summary>
            <param name="list">An <see cref="T:System.Collections.Generic.IList`1" /> of items to be contained in the <see cref="T:System.ComponentModel.BindingList`1" />.</param>
        </member>
        <member name="P:NetOffice.Contribution.CollectionsGeneric.SortableBindingList`1.SupportsSortingCore">
            <summary>
            Gets a value indicating whether the list supports sorting.
            </summary>
        </member>
        <member name="P:NetOffice.Contribution.CollectionsGeneric.SortableBindingList`1.IsSortedCore">
            <summary>
            Gets a value indicating whether the list is sorted.
            </summary>
        </member>
        <member name="P:NetOffice.Contribution.CollectionsGeneric.SortableBindingList`1.SortDirectionCore">
            <summary>
            Gets the direction the list is sorted.
            </summary>
        </member>
        <member name="P:NetOffice.Contribution.CollectionsGeneric.SortableBindingList`1.SortPropertyCore">
            <summary>
            Gets the property descriptor that is used for sorting the list if sorting is implemented in a derived class; otherwise, returns null
            </summary>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.SortableBindingList`1.RemoveSortCore">
            <summary>
            Removes any sort applied with ApplySortCore if sorting is implemented
            </summary>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.SortableBindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the items if overridden in a derived class
            </summary>
            <param name="prop"></param>
            <param name="direction"></param>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.SortableBindingList`1.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns always String.Empty
            </summary>
            <param name="listAccessors">An array of System.ComponentModel.PropertyDescriptor objects, for which the list name is returned. This can be null.</param>
            <returns>The name of the list</returns>
        </member>
        <member name="M:NetOffice.Contribution.CollectionsGeneric.SortableBindingList`1.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the System.ComponentModel.PropertyDescriptorCollection that represents
            the properties on each item used to bind data.
            </summary>
            <param name="listAccessors">An array of System.ComponentModel.PropertyDescriptor objects, for which the list name is returned. This can be null.</param>
            <returns>PropertyDescriptorCollection that represents the properties</returns>
        </member>
        <member name="T:NetOffice.Contribution.Controls.InstanceMonitor">
            <summary>
            Realtime Instance Observer
            </summary>
            <summary>
            Realtime Instance Observer
            </summary>
        </member>
        <member name="M:NetOffice.Contribution.Controls.InstanceMonitor.#ctor">
            <summary>
            Creates an instance of the class
            </summary>
        </member>
        <member name="E:NetOffice.Contribution.Controls.InstanceMonitor.SelectedInstanceChanged">
            <summary>
            Occurs after SelectedInstance have been changed
            </summary>
        </member>
        <member name="E:NetOffice.Contribution.Controls.InstanceMonitor.FactoryChanged">
            <summary>
            Occurs after Factory have been changed
            </summary>
        </member>
        <member name="P:NetOffice.Contribution.Controls.InstanceMonitor.Factory">
            <summary>
            The associated factory core
            </summary>
        </member>
        <member name="P:NetOffice.Contribution.Controls.InstanceMonitor.HighlightNewProxies">
            <summary>
            Highlight new proxies for a second
            </summary>
        </member>
        <member name="P:NetOffice.Contribution.Controls.InstanceMonitor.SelectedInstance">
            <summary>
            SelectedInstance
            </summary>
        </member>
        <member name="P:NetOffice.Contribution.Controls.InstanceMonitor.AutoExpandNodes">
            <summary>
            Automatically expand all nodes
            </summary>
        </member>
        <member name="M:NetOffice.Contribution.Controls.InstanceMonitor.OnFactoryChanged">
            <summary>
            Raise the FactoryChanged event
            </summary>
        </member>
        <member name="M:NetOffice.Contribution.Controls.InstanceMonitor.OnSelectedInstanceChanged">
            <summary>
            Raise the SelectedInstance event
            </summary>
        </member>
        <member name="F:NetOffice.Contribution.Controls.InstanceMonitor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NetOffice.Contribution.Controls.InstanceMonitor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NetOffice.Contribution.Controls.InstanceMonitor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NetOffice.Converter.ExpandableSettingsConverter">
            <summary>
            NetOffice Settings Converter (for future use)
            </summary>
        </member>
        <member name="T:NetOffice.Converter.COMDynamicObjectExpandableObjectConverter">
            <summary>
            COMObject COMDynamicObjectExpandableObjectConverter (for future use)
            </summary>
        </member>
        <member name="T:NetOffice.Converter.COMObjectExpandableObjectConverter">
            <summary>
            COMObject ExpandableObjectConverter (for future use)
            </summary>
        </member>
        <member name="T:NetOffice.Core">
            <summary>
            Nested Core Declarations
            </summary>
            <summary>
            Creation Factory for ICOMObject and derived types
            </summary>
        </member>
        <member name="T:NetOffice.Core.ProxyInformations">
            <summary>
            Provides detailed information about a com proxy
            </summary>
        </member>
        <member name="M:NetOffice.Core.ProxyInformations.#ctor(System.String,System.String,System.Guid)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="name"></param>
            <param name="fullComponentName"></param>
            <param name="typeID"></param>
        </member>
        <member name="P:NetOffice.Core.ProxyInformations.Name">
            <summary>
            Class Name
            </summary>
        </member>
        <member name="P:NetOffice.Core.ProxyInformations.FullComponentName">
            <summary>
            Component Name
            </summary>
        </member>
        <member name="P:NetOffice.Core.ProxyInformations.TypeID">
            <summary>
            Type/Class ID
            </summary>
        </member>
        <member name="M:NetOffice.Core.ProxyInformations.Create(System.Object)">
            <summary>
            Creates new instance of the class
            </summary>
            <param name="comProxy">target proxy</param>
            <returns><see cref="T:NetOffice.Core.ProxyInformations"/> instance</returns>
        </member>
        <member name="T:NetOffice.Core.OnCreateCOMDynamicEventArgs">
            <summary>
            Arguments in CreateCOMDynamicEvent event
            </summary>
        </member>
        <member name="M:NetOffice.Core.OnCreateCOMDynamicEventArgs.#ctor(NetOffice.ICOMObject,System.Object)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="requestedFrom">calling wrapper instance</param>
            <param name="comProxy">target proxy</param>
        </member>
        <member name="P:NetOffice.Core.OnCreateCOMDynamicEventArgs.RequestedFrom">
            <summary>
            Calling wrapper instance
            </summary>
        </member>
        <member name="P:NetOffice.Core.OnCreateCOMDynamicEventArgs.ComProxy">
            <summary>
            Target Proxy
            </summary>
        </member>
        <member name="P:NetOffice.Core.OnCreateCOMDynamicEventArgs.Result">
            <summary>
            COMDynamicObject instance to set or null for default
            </summary>
        </member>
        <member name="T:NetOffice.Core.OnCreateProxyShareEventArgs">
            <summary>
            Arguments in CreateProxyShare event
            </summary>
        </member>
        <member name="M:NetOffice.Core.OnCreateProxyShareEventArgs.#ctor(NetOffice.ICOMObject,System.Boolean)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="requestedFrom">calling wrapper instance</param>
            <param name="isEnumerator">indicates rcw is an enumerator</param>
        </member>
        <member name="P:NetOffice.Core.OnCreateProxyShareEventArgs.RequestedFrom">
            <summary>
            Calling wrapper instance
            </summary>
        </member>
        <member name="P:NetOffice.Core.OnCreateProxyShareEventArgs.IsEnumerator">
            <summary>
            Indicates rcw is an enumerator
            </summary>
        </member>
        <member name="P:NetOffice.Core.OnCreateProxyShareEventArgs.Result">
            <summary>
            COMProxyShare instance to set or null for default
            </summary>
        </member>
        <member name="T:NetOffice.Core.OnCreateInstanceEventArgs">
            <summary>
            Arguments in CreateInstance event
            </summary>
        </member>
        <member name="M:NetOffice.Core.OnCreateInstanceEventArgs.#ctor(NetOffice.ICOMObject)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="instance">original instance</param>
        </member>
        <member name="P:NetOffice.Core.OnCreateInstanceEventArgs.Instance">
            <summary>
            The instance candidate to replace.
            DisposeChildInstances is called for the instance after event trigger
            </summary>
        </member>
        <member name="P:NetOffice.Core.OnCreateInstanceEventArgs.Replace">
            <summary>
            Type must inherit from original instance class type and make COMObject public constructors available
            </summary>
        </member>
        <member name="T:NetOffice.Core.ResolveEventArgs">
            <summary>
            Arguments in Resolve Event
            </summary>
        </member>
        <member name="M:NetOffice.Core.ResolveEventArgs.#ctor(NetOffice.ICOMObject,System.String,System.Type)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="caller">calling instance</param>
            <param name="fullClassName">target NetOffice class</param>
            <param name="comProxy">native proxy type</param>
        </member>
        <member name="P:NetOffice.Core.ResolveEventArgs.Caller">
            <summary>
            Calling instance or null(Nothing in Visual Basic)
            </summary>
        </member>
        <member name="P:NetOffice.Core.ResolveEventArgs.FullClassName">
            <summary>
            Target NetOffice class as full qualified name
            </summary>
        </member>
        <member name="P:NetOffice.Core.ResolveEventArgs.ComProxy">
            <summary>
            Native Proxy Type
            </summary>
        </member>
        <member name="P:NetOffice.Core.ResolveEventArgs.Result">
            <summary>
            Wrapper class to create an instance from 
            </summary>
        </member>
        <member name="T:NetOffice.Core.ResolveEventHandler">
            <summary>
            Resolve event handler
            </summary>
            <param name="sender">Core sender instance</param>
            <param name="args">args as provided</param>
        </member>
        <member name="T:NetOffice.Core.OnCreateCOMDynamicEventHandler">
            <summary>
            OnCreateCOMDynamic event handler
            </summary>
            <param name="sender">Core sender instance</param>
            <param name="args">args as provided</param>
        </member>
        <member name="T:NetOffice.Core.OnCreateProxyShareEventHandler">
            <summary>
            OnCreateProxy event handler
            </summary>
            <param name="sender">Core sender instance</param>
            <param name="args">args as provided</param>
        </member>
        <member name="T:NetOffice.Core.OnCreateInstanceEventHandler">
            <summary>
            OnCreateInstance event handler
            </summary>
            <param name="sender">Core sender instance</param>
            <param name="args">args as provided</param>
        </member>
        <member name="T:NetOffice.Core.ProxyCountChangedHandler">
            <summary>
            ProxyCountChanged delegate
            </summary>
            <param name="proxyCount">current count of com proxies</param>
        </member>
        <member name="T:NetOffice.Core.IsInitializedChangedHandler">
            <summary>
            IsInitializedChanged delegate
            </summary>
            <param name="isInitialized"></param>
        </member>
        <member name="T:NetOffice.Core.ProxyAddedHandler">
            <summary>
            Proxy added delegate
            </summary>
            <param name="sender">sender instance</param>
            <param name="ownerPath">comObject relation path</param>
            <param name="comObject">added object</param>
        </member>
        <member name="T:NetOffice.Core.ProxyRemovedHandler">
            <summary>
            Proxy remove delegate
            </summary>
            <param name="sender">sender instance</param>
            <param name="ownerPath">former comObject relation path</param>
            <param name="comObject">removed object</param>
        </member>
        <member name="T:NetOffice.Core.ProxyClearHandler">
            <summary>
            Proxy clear delegate
            </summary>
            <param name="sender">sender instance</param>
        </member>
        <member name="F:NetOffice.Core.IID_IUnknown">
            <summary>
            the well know IUnknown Interface ID
            </summary>
        </member>
        <member name="M:NetOffice.Core.#ctor">
            <summary>
            Creates an instance of the class
            </summary>
        </member>
        <member name="M:NetOffice.Core.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="isDefault">mark this instance as default instance</param>
        </member>
        <member name="E:NetOffice.Core.Resolve">
            <summary>
            Occurs when its failed to resolve a wrapper type for a given com proxy
            </summary>
        </member>
        <member name="M:NetOffice.Core.RaiseResolve(NetOffice.ICOMObject,System.String,System.Type)">
            <summary>
            Raise Resolve event
            </summary>
            <param name="caller">calling instance</param>
            <param name="fullClassName">target NetOffice class</param>
            <param name="comProxy">native proxy type</param>
            <returns>type to use or null</returns>
        </member>
        <member name="E:NetOffice.Core.CreateCOMDynamic">
            <summary>
            Occurs when a new COMDynamicObject instance should be created
            </summary>
        </member>
        <member name="M:NetOffice.Core.RaiseCreateCOMDynamic(NetOffice.ICOMObject,System.Object)">
            <summary>
            Raise the CreateCOMDynamic event
            </summary>
            <param name="instance">requested instance</param>
            <param name="comProxy">target proxy</param>
            <returns>COMDynamicObject instance or null</returns>
        </member>
        <member name="E:NetOffice.Core.CreateProxyShare">
            <summary>
            Occurs when a new COMProxyShare instance should be created
            </summary>
        </member>
        <member name="M:NetOffice.Core.RaiseCreateProxyShare(NetOffice.ICOMObject,System.Boolean)">
            <summary>
            Raise the CreateProxyShare event
            </summary>
            <param name="instance">requested instance</param>
            <param name="isEnumerator">indicates rcw is an enumerator</param>
            <returns>CreateProxyShare instance or null</returns>
        </member>
        <member name="E:NetOffice.Core.CreateInstance">
            <summary>
            Occurs when a new COMObject instance has been created
            </summary>
        </member>
        <member name="M:NetOffice.Core.RaiseCreateInstance(NetOffice.ICOMObject,System.Type@)">
            <summary>
            Raise CreateInstance event
            </summary>
            <param name="instance">origin instance</param>
            <param name="replace">type to replace the instance</param>
        </member>
        <member name="E:NetOffice.Core.IsInitializedChanged">
            <summary>
            Occurs when the initialize state has been changed
            </summary>
        </member>
        <member name="M:NetOffice.Core.RaiseIsInitializedChanged">
            <summary>
            Raise the IsInitializedChanged event
            </summary>
        </member>
        <member name="E:NetOffice.Core.ProxyCountChanged">
            <summary>
            Notify info the count of proxies there open are changed
            in case of notify comes from event trigger created proxy the call comes from other thread
            </summary>
        </member>
        <member name="M:NetOffice.Core.RaiseProxyCountChanged(System.Int32)">
            <summary>
            Raise the ProxyCountChanged event (and optional, send channel message to console)
            </summary>
            <param name="proxyCount">current count of open com proxies</param>
        </member>
        <member name="E:NetOffice.Core.ProxyAdded">
            <summary>
            Occurs when a proxy has been added
            </summary>
        </member>
        <member name="P:NetOffice.Core.HasProxyAddedRecipients">
            <summary>
            ProxyAdded event has currently recipients
            </summary>
        </member>
        <member name="E:NetOffice.Core.ProxyRemoved">
            <summary>
             Occurs when a proxy has been removed
            </summary>
        </member>
        <member name="P:NetOffice.Core.HasProxyRemovedRecipients">
            <summary>
            ProxyRemoved event has currently recipients
            </summary>
        </member>
        <member name="E:NetOffice.Core.ProxyCleared">
            <summary>
            Occurs when all proxies has been removed
            </summary>
        </member>
        <member name="P:NetOffice.Core.IsInitialized">
            <summary>
            Returns info about intialized state
            </summary>
        </member>
        <member name="P:NetOffice.Core.Default">
            <summary>
            Shared Default Core
            </summary>
        </member>
        <member name="P:NetOffice.Core.Settings">
            <summary>
            Core Settings
            </summary>
        </member>
        <member name="P:NetOffice.Core.Console">
            <summary>
            Core Console
            </summary>
        </member>
        <member name="P:NetOffice.Core.Invoker">
            <summary>
            Core Invoker
            </summary>
        </member>
        <member name="P:NetOffice.Core.IsDefault">
            <summary>
            Returns information about the instance is the shared default core
            </summary>
        </member>
        <member name="P:NetOffice.Core.Assemblies">
            <summary>
            Returns a sequence of currently loaded NetOffice API assemblies
            </summary>
        </member>
        <member name="P:NetOffice.Core.ProxyCount">
            <summary>
            Returns current count of open proxies
            </summary>
        </member>
        <member name="P:NetOffice.Core.InitializedTime">
            <summary>
            Time that the initialize process has been used to pass
            </summary>
        </member>
        <member name="P:NetOffice.Core.ThisType">
            <summary>
            Cached instance type
            </summary>
        </member>
        <member name="P:NetOffice.Core.KnownNetOfficeKeyTokens">
            <summary>
            Contains a list of all known key tokens of NetOffice assemblies.
            </summary>
        </member>
        <member name="P:NetOffice.Core.ThisAssembly">
            <summary>
            Current NetOffice Core Assembly
            </summary>
        </member>
        <member name="P:NetOffice.Core.CoreDomain">
            <summary>
            Assembly Loader
            </summary>
        </member>
        <member name="P:NetOffice.Core.EntitiesListCache">
            <summary>
            <see cref="T:NetOffice.ICOMObjectAvailability"/> Cache
            </summary>
        </member>
        <member name="P:NetOffice.Core.HostCache">
            <summary>
            Cache as Type ID => ParentLibrary ID
            </summary>
        </member>
        <member name="P:NetOffice.Core.DuckingCache">
            <summary>
            Duck Type Cache
            T1 is interface
            T2 is its implementation
            </summary>
        </member>
        <member name="P:NetOffice.Core.DependentAssemblies">
            <summary>
            Dependent assemblies analyzed by LoadAPIFactories
            </summary>
        </member>
        <member name="M:NetOffice.Core.Initialize">
            <summary>
            Receive factory information from all loaded NetOffice assemblies in current application domain.
            </summary>
        </member>
        <member name="M:NetOffice.Core.Initialize(NetOffice.CacheOptions)">
            <summary>
            Must be called from client assembly for <see cref="T:NetOffice.ICOMObject"/> support.
            Receive factory information from all loaded NetOffice assemblies in current application domain.
            <param name="cacheOptions">NetOffice cache options</param>
            </summary>
        </member>
        <member name="M:NetOffice.Core.CheckInitialize">
            <summary>
            Check for initialize state and call Initialize if its necessary
            </summary>
            <returns>initialize state</returns>
        </member>
        <member name="M:NetOffice.Core.ClearCaches(System.Boolean)">
            <summary>
            Clears all Core caches
            </summary>
            <param name="forceClear">method want do nothing if cache option is KeepExistingCacheAlive. You can force clear caches anyway by giving true</param>
        </member>
        <member name="M:NetOffice.Core.GetInstanceFactoryInfo(NetOffice.ICOMObject,System.Object,System.Boolean)">
            <summary>
            Get wrapper class factory info as non duck
            </summary>
            <param name="caller">calling instance</param>
            <param name="comProxy">new created proxy</param>
            <param name="throwException">throw exception if no info found or return null</param>
            <returns>factory info from corresponding assembly</returns>
        </member>
        <member name="M:NetOffice.Core.GetDuckFactoryInfo(NetOffice.ICOMObject,System.Object,System.Boolean)">
            <summary>
             Get wrapper class factory info as duck
            </summary>
            <param name="caller">calling instance</param>
            <param name="comProxy">new created proxy</param>
            <param name="throwException">throw exception if no info found or return null</param>
            <returns>factory info from corresponding assembly</returns>
        </member>
        <member name="M:NetOffice.Core.LoadAPIFactories">
            <summary>
            Analyze assemblies in current appdomain and connect all NetOffice API factories to the core runtime.
            </summary>
        </member>
        <member name="M:NetOffice.Core.LoadDependentAPIFactories">
            <summary>
            Analyze dependent assemblies and connect there NetOffice API factories to the core runtime
            </summary>
        </member>
        <member name="M:NetOffice.Core.ReceiveAssemblyFactory(System.String,System.Reflection.Assembly)">
            <summary>
            Receive factory instance from assembly and add them to factory cache
            </summary>
            <param name="name">name of the assembly</param>
            <param name="assembly">assembly to receive</param>
            <returns>array of dependent assemblies</returns>
        </member>
        <member name="M:NetOffice.Core.CreateNewProxyShare(NetOffice.ICOMObject,System.Object,System.Boolean)">
            <summary>
            Creates a new COMProxyShare instance
            </summary>
            <param name="sender">requested instance</param>
            <param name="comProxy">inner proxy rcw</param>
             <param name="isEnumerator">indicates rcw is an enumerator</param>
            <returns>new instance</returns>
            <exception cref="T:NetOffice.Exceptions.CreateCOMProxyShareException">throws when its failed to create instance</exception>
        </member>
        <member name="M:NetOffice.Core.CreateNewProxyShare(NetOffice.ICOMObject,System.Object)">
            <summary>
            Creates a new COMProxyShare instance
            </summary>
            <param name="sender">requested instance</param>
            <param name="comProxy">inner proxy rcw</param>
            <returns>new instance</returns>
            <exception cref="T:NetOffice.Exceptions.CreateCOMProxyShareException">throws when its failed to create instance</exception>
        </member>
        <member name="M:NetOffice.Core.CreateDuckObject``1">
            <summary>
            Creates a new duck typing instance by given generic type argument
            </summary>    
            <typeparam name="T">interface result type</typeparam>
            <returns>new instance</returns>
            <exception cref="T:System.ArgumentException">throws when ComProgIdAttribute is missing</exception>
            <exception cref="T:NetOffice.Exceptions.DuckException">throws when its failed to compile an implementation</exception>
            <exception cref="T:NetOffice.Exceptions.CreateInstanceException">throws when its failed to create new instance</exception> 
            <exception cref="T:System.Runtime.InteropServices.COMException">throws when its failed to receive progID Type</exception> 
        </member>
        <member name="M:NetOffice.Core.CreateDuckObject``1(System.String)">
            <summary>
            Creates a new duck typing instance by given generic type argument
            </summary>
            <typeparam name="T">interface result type</typeparam>
            <param name="progId">progId to create</param>
            <returns>new instance</returns>
            <exception cref="T:System.ArgumentNullException">throws when progId is null or empty</exception>
            <exception cref="T:NetOffice.Exceptions.DuckException">throws when its failed to compile an implementation</exception>
            <exception cref="T:NetOffice.Exceptions.CreateInstanceException">throws when its failed to create new instance</exception> 
            <exception cref="T:System.Runtime.InteropServices.COMException">throws when its failed to receive progID Type</exception> 
        </member>
        <member name="M:NetOffice.Core.CreateDuckObjectFromComProxy``1(NetOffice.ICOMObject,System.Object)">
            <summary>
            Creates a new duck typing instance by given generic type argument
            </summary>
            <typeparam name="T">interface result type</typeparam>
            <param name="caller"></param>
            <param name="comProxy">new created proxy</param>
            <returns>new instance</returns>
            <exception cref="T:System.ArgumentNullException">throws when comProxy is null</exception>
            <exception cref="T:NetOffice.Exceptions.DuckException">throws when its failed to compile an implementation</exception>
            <exception cref="T:NetOffice.Exceptions.CreateInstanceException">throws when its failed to create new instance</exception> 
        </member>
        <member name="M:NetOffice.Core.CreateDuckObjectFromComProxy``1(System.Object)">
            <summary>
            Creates a new duck typing instance by given generic type argument
            </summary>
            <typeparam name="T">interface result type</typeparam>
            <param name="comProxy">new created proxy</param>
            <returns>new instance</returns>
            <exception cref="T:System.ArgumentNullException">throws when comProxy is null</exception>
            <exception cref="T:NetOffice.Exceptions.DuckException">throws when its failed to compile an implementation</exception>
            <exception cref="T:NetOffice.Exceptions.CreateInstanceException">throws when its failed to create new instance</exception> 
        </member>
        <member name="M:NetOffice.Core.CreateDuckObjectFromComProxy(NetOffice.ICOMObject,System.Object)">
            <summary>
            Creates a new duck typing instance
            </summary>
            <param name="caller">parent there have created comProxy</param>
            <param name="comProxy">new created proxy</param>
            <returns>new instance</returns>
            <exception cref="T:System.ArgumentNullException">throws when comProxy is null</exception>
            <exception cref="T:NetOffice.Exceptions.DuckException">throws when its failed to compile an implementation</exception>
            <exception cref="T:NetOffice.Exceptions.CreateInstanceException">throws when its failed to create new instance</exception> 
            <exception cref="T:NetOffice.Exceptions.FactoryException">throws when its failed to receive factory info</exception> 
        </member>
        <member name="M:NetOffice.Core.CreateDuckObjectFromComProxy(NetOffice.ICOMObject,System.Object,System.Type)">
            <summary>
            Creates a new duck typing instance which implement the given interfaces.
            </summary>
            <param name="caller">parent there have created comProxy</param>
            <param name="comProxy">new created proxy</param>
            <param name="wrapperInterfaceType">interface which is implemented by the returning instance. the interface must inherit from <see cref="T:NetOffice.ICOMObject"/></param>
            <returns>new instance</returns>
            <exception cref="T:System.ArgumentNullException">throws when comProxy, wrapperInterfaceType is null</exception>
            <exception cref="T:NetOffice.Exceptions.DuckException">throws when its failed to compile an implementation</exception>
            <exception cref="T:NetOffice.Exceptions.CreateInstanceException">throws when its failed to create new instance</exception>
        </member>
        <member name="M:NetOffice.Core.CreateKnownObjectFromComProxy``1(NetOffice.ICOMObject,System.Object,System.Type)">
            <summary>
            Creates a new <see cref="T:NetOffice.ICOMObject"/> based on wrapperClassType
            </summary>
            <typeparam name="T">result type</typeparam>
            <param name="caller">parent there have created comProxy</param>
            <param name="comProxy">new created proxy</param>
            <param name="wrapperClassType">type info from wrapper class</param>
            <returns>corresponding wrapper class instance or plain <see cref="T:NetOffice.COMObject"/></returns>
            <exception cref="T:NetOffice.Exceptions.CreateInstanceException">throws when its failed to create new instance</exception>
        </member>
        <member name="M:NetOffice.Core.CreateKnownObjectFromComProxy(NetOffice.ICOMObject,System.Object,System.Type)">
            <summary>
            Creates a new <see cref="T:NetOffice.ICOMObject"/> based on wrapperClassType
            </summary>
            <param name="caller">parent there have created comProxy</param>
            <param name="comProxy">new created proxy</param>
            <param name="wrapperClassType">type info from wrapper class</param>
            <returns>corresponding wrapper class instance or plain <see cref="T:NetOffice.COMObject"/></returns>
            <exception cref="T:NetOffice.Exceptions.CreateInstanceException">throws when its failed to create new instance</exception>
        </member>
        <member name="M:NetOffice.Core.CreateKnownObjectArrayFromComProxy(NetOffice.ICOMObject,System.Object[],System.Type)">
            <summary>
            Creates a new <see cref="T:NetOffice.ICOMObject"/> array based on wrapperClassType
            </summary>
            <param name="caller">parent there have created comProxy</param>
            <param name="comProxyArray">new created proxies</param>
            <param name="wrapperClassType">type info from wrapper class</param>
            <returns>corresponding wrapper class instances or plain <see cref="T:NetOffice.COMObject"/></returns>
            <exception cref="T:NetOffice.Exceptions.CreateInstanceException">throws when its failed to create new instance</exception>
        </member>
        <member name="M:NetOffice.Core.CreateEventArgumentObjectFromComProxy(NetOffice.ICOMObject,System.Object)">
            <summary>
            Creates a new <see cref="T:NetOffice.ICOMObject"/> based on classType of comProxy. The method uses <see cref="P:NetOffice.Settings.EnableDynamicEventArguments"/> to reflect dynamics
            </summary>
            <param name="caller">parent there have created comProxy</param>
            <param name="comProxy">new created proxy</param>
            <returns>corresponding wrapper class instance or plain <see cref="T:NetOffice.COMObject"/></returns>
            <exception cref="T:NetOffice.Exceptions.CreateInstanceException">throws when its failed to create new instance</exception>
        </member>
        <member name="M:NetOffice.Core.CreateObjectFromComProxy(NetOffice.ICOMObject,System.Object,System.Boolean)">
            <summary>
            Creates a new <see cref="T:NetOffice.ICOMObject"/> based on classType of comProxy 
            </summary>
            <param name="caller">parent there have created comProxy</param>
            <param name="comProxy">new created proxy</param>
            <param name="allowDynamicObject">allow to create a <see cref="T:NetOffice.COMDynamicObject"/> instance if its failed to resolve the wrapper type</param>
            <returns>corresponding wrapper class instance or plain <see cref="T:NetOffice.COMObject"/></returns>
            <exception cref="T:NetOffice.Exceptions.CreateInstanceException">throws when its failed to create new instance</exception>
        </member>
        <member name="M:NetOffice.Core.CreateObjectFromComProxy(NetOffice.ICOMObject,System.Object,System.Type,System.Boolean)">
            <summary>
            Creates a new <see cref="T:NetOffice.ICOMObject"/> based on classType of comProxy 
            </summary>
            <param name="caller">parent there have created comProxy</param>
            <param name="comProxy">new created proxy</param>
            <param name="comProxyType">Type of comProxy</param>
            <param name="allowDynamicObject">allow to create a <see cref="T:NetOffice.COMDynamicObject"/> instance if its failed to resolve the wrapper type</param>
            <returns>corresponding Wrapper class Instance or plain <see cref="T:NetOffice.COMObject"/></returns>
            <exception cref="T:NetOffice.Exceptions.CreateInstanceException">throws when its failed to create new instance</exception>
        </member>
        <member name="M:NetOffice.Core.CreateObjectFromComProxy(NetOffice.IFactoryInfo,NetOffice.ICOMObject,System.Object,System.Type,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:NetOffice.ICOMObject"/> from factoryInfo
            </summary>
            <param name="factoryInfo">Factory Info from Wrapper Assemblies</param>
            <param name="caller">parent there have created comProxy</param>
            <param name="comProxy">new created proxy</param>
            <param name="comProxyType">Type of comProxy</param>
            <param name="className">name of COMServer proxy class</param>
            <param name="fullClassName">full namespace and name of COMServer proxy class</param>
            <param name="allowDynamicObject">allow to create a <see cref="T:NetOffice.COMDynamicObject"/> instance if its failed to resolve the wrapper type</param>
            <returns>corresponding Wrapper class Instance or plain <see cref="T:NetOffice.COMObject"/></returns>
            <exception cref="T:NetOffice.Exceptions.CreateInstanceException">throws when its failed to create new instance</exception>
            <exception cref="T:NetOffice.Exceptions.FactoryException">throws when its failed find corresponding wrapper class type</exception>
        </member>
        <member name="M:NetOffice.Core.CreateObjectArrayFromComProxy(NetOffice.ICOMObject,System.Object[],System.Boolean)">
            <summary>
            Creates a new <see cref="T:NetOffice.ICOMObject"/> array
            </summary>
            <param name="caller">parent there have created comProxy</param>
            <param name="comProxyArray">new created proxy array</param>
            <param name="allowDynamicObject">allow to create a <see cref="T:NetOffice.COMDynamicObject"/> instance if its failed to resolve the wrapper type</param>
            <returns>corresponding Wrapper class Instance array or plain <see cref="T:NetOffice.COMObject"/> array</returns>
            <exception cref="T:NetOffice.Exceptions.CreateInstanceException">throws when its failed to create new instance</exception>
            <exception cref="T:NetOffice.Exceptions.FactoryException">throws when its failed find factory info</exception>
        </member>
        <member name="M:NetOffice.Core.TryReplaceInstance(NetOffice.ICOMObject,NetOffice.ICOMObject,System.Type)">
            <summary>
            Try to replace new created instance on CreateInstance event
            </summary>
            <param name="caller">parent instance</param>
            <param name="instance">origin instance</param>
            <param name="comProxyType">type of native com proxy</param>
            <returns>replace instance or origin instance</returns>
        </member>
        <member name="M:NetOffice.Core.DisposeAllCOMProxies">
            <summary>
            Dispose all open objects
            </summary>
        </member>
        <member name="M:NetOffice.Core.AddObjectToList(NetOffice.ICOMObject)">
            <summary>
            Add object to global list
            </summary>
            <param name="proxy">com wrapper instance</param>
        </member>
        <member name="M:NetOffice.Core.RemoveObjectFromList(NetOffice.ICOMObject,System.Collections.Generic.IEnumerable{NetOffice.ICOMObject})">
            <summary>
            Remove object from global list
            </summary>
            <param name="proxy">com wrapper instance</param>
            <param name="ownerPath">optional owner path</param>
        </member>
        <member name="M:NetOffice.Core.GetOwnerPath(NetOffice.ICOMObject)">
            <summary>
            Returns an array with full parent(s) path
            </summary>
            <param name="comObject">target com object</param>
            <returns>top down path sequence</returns>
        </member>
        <member name="M:NetOffice.Core.GetRootInstances">
            <summary>
            Returns all root instances in COM proxy management
            </summary>
            <returns>Enumerable sequence of root instances</returns>
        </member>
        <member name="M:NetOffice.Core.WrapObject(System.Object,System.Boolean)">
            <summary>
            Analyze an object and create wrapper around if necessary
            </summary>
            <param name="value">value as any</param>
            <param name="allowDynamicObject">allow to create a COMDynamicObject instance if its failed to resolve the wrapper type</param>
            <returns>value or wrapped value</returns>
        </member>
        <member name="M:NetOffice.Core.GetObjectType(System.Object)">
            <summary>
            Returns the Type for comProxy or null if param not set
            </summary>
            <param name="comProxy">new created proxy</param>
            <returns>type info or null if unknown</returns>
        </member>
        <member name="M:NetOffice.Core.EqualsOnServer(System.Object,System.Object)">
            <summary>
            Determine 2 proxies represents the same object on COM remote server
            </summary>
            <param name="obj1">object 1 to compare</param>
            <param name="obj2">object 2 to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:NetOffice.Core.EqualsOnServer(NetOffice.ICOMObject,NetOffice.ICOMObject)">
            <summary>
            Determine 2 proxies represents the same object on COM remote server
            </summary>
            <param name="obj1">object 1 to compare</param>
            <param name="obj2">object 2 to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="F:NetOffice.CoreFactoryExtensions._duplicateTypes">
            <summary>
            See Attributes\DuplicateAttribute.cs for further information
            </summary>
        </member>
        <member name="M:NetOffice.CoreFactoryExtensions.GetFactoryInfo(NetOffice.Core,System.Collections.Generic.Dictionary{System.Guid,System.Guid},NetOffice.ICOMObject,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Get wrapper class factory info
            </summary>
            <param name="value">core to use</param>
            <param name="hostCache">core host cache</param>
            <param name="caller">calling instance</param>
            <param name="comProxy">new created proxy</param>
            <param name="wantTheDuck">want duck implementation</param>
            <param name="throwException">throw exception if no info found or return null</param>
            <returns>factory info from corresponding assembly</returns>
        </member>
        <member name="M:NetOffice.CoreFactoryExtensions.GetParentLibraryGuid(NetOffice.Core,System.Object,System.Guid)">
            <summary>
            Returns parent library id
            </summary>
            <param name="value">core to use</param>
            <param name="comProxy">new created proxy</param>
            <param name="typeGuid">type id from comProxy</param>
            <returns>parent library/component id</returns>
        </member>
        <member name="M:NetOffice.CoreFactoryExtensions.GetParentLibraryGuid(NetOffice.Core,System.Object)">
            <summary>
            Returns parent library id
            </summary>
            <param name="value">core to use</param>
            <param name="comProxy">new created proxy</param>
            <returns>parent library/component id</returns>
        </member>
        <member name="M:NetOffice.CoreFactoryExtensions.TypeGuid(System.Object)">
            <summary>
            Get type id from IDispatch GetTypeInfo
            </summary>
            <param name="comProxy">target proxy</param>
            <returns>type id</returns>
        </member>
        <member name="M:NetOffice.CoreFactoryExtensions.IsDuplicateType(System.Guid)">
            <summary>
            Returns information the type is a known external duplicate
            </summary>
            <param name="value">type id</param>
            <returns>true if duplicate, otherwise false</returns>
        </member>
        <member name="M:NetOffice.CoreFactoryExtensions.GetTypeInfo(NetOffice.IDispatch)">
            <summary>
            Performs GetTypeInfo on IDispatch object.
            Handles the strange cast behavior - see remarks.
            </summary>
            <remarks>
            It seems the cast to IDispatch never fails
            even when the instance behind COM proxy doesn't implement the interface.
            If it fails to cast, an InvalidCastException occurs
            on first use of the interface.
            This method will catch InvalidCastException here and it will throw IDispatchNotImplementedException
            to signalize the missing IDispatch support.
            </remarks>
            <param name="dispatcher">given IDispatch as any </param>
            <returns>type information or null if dispatcher argument is null</returns>
        </member>
        <member name="T:NetOffice.CoreMethodExtensions">
            <summary>
            Provides top-off Core/Invoker method services to shrink caller code in Api assemblies and give more refactoring possibilities
            </summary> 
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteMethod(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a method without return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteMethod(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a method without return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteMethod(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a method without return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteMethod(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method without return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteMethod(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method without return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteMethod(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method without return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteMethod(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method without return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteMethod(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method without return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteMethod(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method without return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
            <param name="argument8">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteMethod(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a method without return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteObjectMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a method with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteObjectMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a method with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteObjectMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a method with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteObjectMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteObjectMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteObjectMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argumen1 as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteObjectMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argumen1 as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteObjectMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argumen1 as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteObjectMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argumen1 as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
            <param name="argument8">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteObjectMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a method with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt16MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a method with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt16MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a method with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt16MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a method with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt16MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt16MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt16MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt16MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt16MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt16MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
            <param name="argument8">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt16MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a method with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt32MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a method with Int32 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt32MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a method with Int32 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt32MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a method with Int32 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt32MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with Int32 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt32MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with Int32 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt32MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with Int32 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt32MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with Int32 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt32MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with Int32 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt32MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with Int32 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
            <param name="argument8">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteInt32MethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a method with Int32 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDoubleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a method with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDoubleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a method with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDoubleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a method with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDoubleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDoubleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDoubleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDoubleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDoubleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDoubleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
            <param name="argument8">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDoubleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a method with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteSingleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a method with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteSingleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a method with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteSingleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a method with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteSingleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteSingleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteSingleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteSingleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteSingleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteSingleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
            <param name="argument8">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteSingleMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a method with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBoolMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a method with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBoolMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a method with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBoolMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a method with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBoolMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBoolMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBoolMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBoolMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBoolMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBoolMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
            <param name="argument8">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBoolMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a method with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDateTimeMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a method with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDateTimeMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a method with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDateTimeMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a method with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDateTimeMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDateTimeMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDateTimeMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDateTimeMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDateTimeMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDateTimeMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
            <param name="argument8">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteDateTimeMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a method with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteStringMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a method with string return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteStringMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a method with string return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteStringMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a method with string return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteStringMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with string return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteStringMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with string return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteStringMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with string return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteStringMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with string return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteStringMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with string bool value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteStringMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with string return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
            <param name="argument8">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteStringMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a method with string return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteEnumMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a method with enum return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteEnumMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a method with enum return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteEnumMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a method with enum return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteEnumMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with enum return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteEnumMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with enum return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteEnumMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a method with enum return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteStructMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a method with struct return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteStructMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a method with struct return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteStructMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a method with struct return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteStructMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with struct return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteStructMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with struct return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteStructMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a method with struct return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
            <param name="argument8">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBaseReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBaseReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBaseReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBaseReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBaseReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBaseReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBaseReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBaseReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBaseReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
            <param name="argument8">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteBaseReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a method with unknown reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteKnownReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type)">
            <summary>
            Execute a method with known reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="knownType">type of T to increase performance</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteKnownReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type,System.Object)">
            <summary>
            Execute a method with known reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="knownType">type of T to increase performance</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteKnownReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type,System.Object,System.Object)">
            <summary>
            Execute a method with known reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="knownType">type of T to increase performance</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteKnownReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with known reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="knownType">type of T to increase performance</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteKnownReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with known reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="knownType">type of T to increase performance</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteKnownReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with known reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="knownType">type of T to increase performance</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteKnownReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with known reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="knownType">type of T to increase performance</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteKnownReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with known reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="knownType">type of T to increase performance</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteKnownReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with known reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="knownType">type of T to increase performance</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
            <param name="argument8">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteKnownReferenceMethodGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type,System.Object[])">
            <summary>
            Execute a method with known reference return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="knownType">type of T to increase performance</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteVariantMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a method with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteVariantMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a method with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteVariantMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a method with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteVariantMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteVariantMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteVariantMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteVariantMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteVariantMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteVariantMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a method with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
            <param name="argument5">argument as any</param>
            <param name="argument6">argument as any</param>
            <param name="argument7">argument as any</param>
            <param name="argument8">argument as any</param>
        </member>
        <member name="M:NetOffice.CoreMethodExtensions.ExecuteVariantMethodGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a method with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">method name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="T:NetOffice.CorePropertyGetExtensions">
            <summary>
            Provides top-off Core/Invoker get property services to shrink caller code in Api assemblies and give more refactoring possibilities
            </summary>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteObjectPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteObjectPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteObjectPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteObjectPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteObjectPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteObjectPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteObjectPropertyGetInternal(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with object return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt16PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt16PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt16PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt16PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt16PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt16PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt16PropertyGetInternal(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with Int16 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt32PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with int return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt32PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with int return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt32PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with int return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt32PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with int return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt32PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with int return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt32PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with int return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt32PropertyGetInternal(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with int return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt64PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with Int64 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt64PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with Int64 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt64PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with Int64 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt64PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with Int64 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt64PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with Int64 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt64PropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with Int64 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteInt64PropertyGetInternal(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with Int64 return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteUIntPtrPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with UIntPtr return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteUIntPtrPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with UIntPtr return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteUIntPtrPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with UIntPtr return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteUIntPtrPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with UIntPtr return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteUIntPtrPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with UIntPtr return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteUIntPtrPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with int return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteUIntPtrPropertyGetInternal(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with int return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteFloatPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with float return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteFloatPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with float return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteFloatPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with float return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteFloatPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with float return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteFloatPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with float return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteFloatPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with float return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteFloatPropertyGetInternal(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with float return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteDoublePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteDoublePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteDoublePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteDoublePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteDoublePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteDoublePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteDoublePropertyGetInternal(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with double return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteSinglePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteSinglePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteSinglePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteSinglePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteSinglePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteSinglePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteSinglePropertyGetInternal(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with single return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteDateTimePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteDateTimePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteDateTimePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteDateTimePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteDateTimePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteDateTimePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteDateTimePropertyGetInternal(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with DateTime return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBytePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with byte return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBytePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with byte return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBytePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with byte return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBytePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with byte return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBytePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with byte return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBytePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with byte return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBytePropertyGetInternal(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with byte return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBoolPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBoolPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBoolPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBoolPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBoolPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBoolPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray"> arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBoolPropertyGetInternal(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with bool return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteStringPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with string return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteStringPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with string return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteStringPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with string return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteStringPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with string return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteStringPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with string return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteStringPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with string return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteStringPropertyGetInternal(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with string return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteEnumPropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with enum return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteEnumPropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with enum return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteEnumPropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with enum return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteEnumPropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with enum return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteEnumPropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with enum return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteEnumPropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with enum return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteEnumPropertyGetInternal``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with enum return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteStructPropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with struct return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteStructPropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with struct return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteStructPropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with struct return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteStructPropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with struct return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteStructPropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with struct return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteStructPropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with struct return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteStructPropertyGetInternal``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with struct return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteReferencePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteReferencePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteReferencePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteReferencePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteReferencePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteReferencePropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteReferencePropertyGetInternal(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteReferencePropertyGetInternal``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBaseReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBaseReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBaseReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBaseReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBaseReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBaseReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteBaseReferencePropertyGetInternal``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteKnownReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type)">
            <summary>
            Execute a property get with known COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="knownType">type of T - given to increase performance</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteKnownReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type,System.Object)">
            <summary>
            Execute a property get with known COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="knownType">type of T - given to increase performance</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteKnownReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type,System.Object,System.Object)">
            <summary>
            Execute a property get with known COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="knownType">type of T - given to increase performance</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteKnownReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with known COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="knownType">type of T - given to increase performance</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteKnownReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with known COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="knownType">type of T - given to increase performance</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteKnownReferencePropertyGet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type,System.Object[])">
            <summary>
            Execute a property get with known COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="knownType">type of T - given to increase performance</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteKnownReferencePropertyGetInternal``1(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Type,System.Object[])">
            <summary>
            Execute a property get with known COM reference type return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="knownType">type of T - given to increase performance</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteVariantPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String)">
            <summary>
            Execute a property get with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteVariantPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a property get with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteVariantPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a property get with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteVariantPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteVariantPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a property get with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteVariantPropertyGet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertyGetExtensions.ExecuteVariantPropertyGetInternal(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Execute a property get with unknown return value
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="validatedArgs">validated arguments as any</param>
        </member>
        <member name="T:NetOffice.CorePropertySetExtensions">
            <summary>
            Provides top-off Core/Invoker set property services to shrink caller code in Api assemblies and give more refactoring possibilities
            </summary>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecutePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecutePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecutePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecutePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecutePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecutePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object[])">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteValuePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteValuePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteValuePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteValuePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteValuePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteValuePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object[])">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteValuePropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteValuePropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteValuePropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0,System.Object,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteValuePropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0,System.Object,System.Object,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteValuePropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteValuePropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0,System.Object[])">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteEnumPropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteEnumPropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteEnumPropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteEnumPropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteEnumPropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteEnumPropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object[])">
            <summary>
            Execute a value property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteReferencePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a reference property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteReferencePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a reference property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteReferencePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a reference property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteReferencePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a reference property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteReferencePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a reference property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteReferencePropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object[])">
            <summary>
            Execute a reference property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteReferencePropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0)">
            <summary>
            Execute a reference property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteReferencePropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0,System.Object)">
            <summary>
            Execute a reference property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteReferencePropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0,System.Object,System.Object)">
            <summary>
            Execute a reference property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteReferencePropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0,System.Object,System.Object,System.Object)">
            <summary>
            Execute a reference property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteReferencePropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a reference property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteReferencePropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0,System.Object[])">
            <summary>
            Execute a reference property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteVariantPropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Execute a variant property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteVariantPropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object)">
            <summary>
            Execute a variant property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteVariantPropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Execute a variant property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteVariantPropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a variant property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteVariantPropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a variant property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteVariantPropertySet(NetOffice.Core,NetOffice.ICOMObject,System.String,System.Object,System.Object[])">
            <summary>
            Execute a variant property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteVariantPropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0)">
            <summary>
            Execute a variant property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteVariantPropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0,System.Object)">
            <summary>
            Execute a variant property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteVariantPropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0,System.Object,System.Object)">
            <summary>
            Execute a variant property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteVariantPropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0,System.Object,System.Object,System.Object)">
            <summary>
            Execute a variant property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteVariantPropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Execute a variant property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="argument1">argument as any</param>
            <param name="argument2">argument as any</param>
            <param name="argument3">argument as any</param>
            <param name="argument4">argument as any</param>
        </member>
        <member name="M:NetOffice.CorePropertySetExtensions.ExecuteVariantPropertySet``1(NetOffice.Core,NetOffice.ICOMObject,System.String,``0,System.Object[])">
            <summary>
            Execute a variant property set
            </summary>
            <param name="value">core invoker</param>
            <param name="caller">calling instance</param>
            <param name="name">property name</param>
            <param name="newValue">value to set</param>
            <param name="paramsArray">arguments as any</param>
        </member>
        <member name="T:NetOffice.Diagnostics.DiagnosticItem">
            <summary>
            Diagnostics Data as Name/Value
            </summary>
        </member>
        <member name="M:NetOffice.Diagnostics.DiagnosticItem.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="name">name as any</param>
            <param name="value">value as any</param>
        </member>
        <member name="P:NetOffice.Diagnostics.DiagnosticItem.Name">
            <summary>
            Information Name
            </summary>
        </member>
        <member name="P:NetOffice.Diagnostics.DiagnosticItem.Value">
            <summary>
            Information Value
            </summary>
        </member>
        <member name="M:NetOffice.Diagnostics.DiagnosticItem.ToString">
            <summary>
            Returns a System.String that represents the instance
            </summary>
            <returns>System.String</returns>
        </member>
        <member name="T:NetOffice.Diagnostics.SelfDiagnostics">
            <summary>
            Represents a collection with self diagnostic information
            </summary>
        </member>
        <member name="M:NetOffice.Diagnostics.SelfDiagnostics.#ctor(NetOffice.Tools.COMAddinBase)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="comAddin">addin base</param>
        </member>
        <member name="M:NetOffice.Diagnostics.SelfDiagnostics.#ctor">
            <summary>
            Creates an instance of the class
            </summary>
        </member>
        <member name="P:NetOffice.Diagnostics.SelfDiagnostics.AssemblyTitle">
            <summary>
            Owner Assembly Title
            </summary>
        </member>
        <member name="P:NetOffice.Diagnostics.SelfDiagnostics.AssemblyVersion">
            <summary>
            Owner Assembly Version
            </summary>
        </member>
        <member name="P:NetOffice.Diagnostics.SelfDiagnostics.AssemblyDescription">
            <summary>
            Owner Assembly Description
            </summary>
        </member>
        <member name="P:NetOffice.Diagnostics.SelfDiagnostics.AssemblyProduct">
            <summary>
            Owner Assembly Product
            </summary>
        </member>
        <member name="P:NetOffice.Diagnostics.SelfDiagnostics.AssemblyCopyright">
            <summary>
            Owner Assembly Copyright
            </summary>
        </member>
        <member name="P:NetOffice.Diagnostics.SelfDiagnostics.AssemblyCompany">
            <summary>
            Owner Assembly Company
            </summary>
        </member>
        <member name="P:NetOffice.Diagnostics.SelfDiagnostics.OwnerAssembly">
            <summary>
            Hosting Owner Assembly
            </summary>
        </member>
        <member name="M:NetOffice.Diagnostics.SelfDiagnostics.Setup(NetOffice.Tools.COMAddinBase)">
            <summary>
            Collect diagnostic information
            </summary>
            <param name="comAddin">hosting addin or null</param>
        </member>
        <member name="T:NetOffice.Duck.VisibleAttribute">
            <summary>
            Indicates a special method, name starts with get_ or set_ which is not compiler generated
            </summary>
        </member>
        <member name="F:NetOffice.Duck.VisibleAttribute.Value">
            <summary>
            Always true
            </summary>
        </member>
        <member name="M:NetOffice.Duck.VisibleAttribute.#ctor">
            <summary>
            Creates an instance of the class
            </summary>
        </member>
        <member name="T:NetOffice.COMDynamicObject">
            <summary>
            Represents a managed COM proxy with dynamic runtime type information.
            </summary>
        </member>
        <member name="T:NetOffice.COMDynamicObject.Enumerator">
            <summary>
            Plain IEnumerable wrapper implementation
            </summary>
        </member>
        <member name="T:NetOffice.COMDynamicObject.DefaultItemSupport">
            <summary>
            Indicates the COM proxy offers a default property (like this[int index])
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject.DefaultItemSupport.NoDefaultItem">
            <summary>
            No default property available
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject.DefaultItemSupport.PropertyDefault">
            <summary>
            Default property available as _Default property
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject.DefaultItemSupport.MethodDefault">
            <summary>
            Default property available as _Default method
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject.DefaultItemSupport.PropertyItem">
            <summary>
            Default property available as Item property
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject.DefaultItemSupport.MethodItem">
            <summary>
            Default property available as Item method
            </summary>
        </member>
        <member name="T:NetOffice.COMDynamicObject.EnumeratorSupport">
            <summary>
            Indicates the COM proxy offers an enumerator
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject.EnumeratorSupport.NoEnumerator">
            <summary>
            No enumerator available
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject.EnumeratorSupport.PropertyEnumerator">
            <summary>
            Enumerator available as a property
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject.EnumeratorSupport.MethodEnumerator">
            <summary>
            Enumerator available as a method
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject.IID_IUnknown">
            <summary>
            The well know IUnknown Interface ID
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._parentObject">
            <summary>
            returns parent instance
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._listChildObjects">
            <summary>
            Child instance List
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._isCurrentlyDisposing">
            <summary>
            Returns instance is currently in disposing process
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._isDisposed">
            <summary>
            Returns instance is disposed (means unusable).
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._callQuitInDispose">
            <summary>
            try to call quit in dispose. must be set in top class
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._entities">
            <summary>
            Runtime self description
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._listSupportedEntities">
            <summary>
            List of runtime supported entities
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._proxyShare">
            <summary>
            Returns a shared access wrapper around the native wrapped proxy
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._friendlyTypeName">
            <summary>
            FriendlyTypeName cache field
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._underlyingTypeName">
            <summary>
            UnderlyingTypeName cache field
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._underlyingComponentName">
            <summary>
            Name of the proxy hosting component
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._childListLock">
            <summary>
            Monitor lock object for accessing the child list
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._disposeChildLock">
            <summary>
            monitor lock object for accessing the child list
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._disposeLock">
            <summary>
            Monitor lock object for the main dispose method
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._enumerator">
            <summary>
            Indicates the instance offers an enumerator
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._defaultItem">
            <summary>
            Indicates the instance offers an default property
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._entitiesLock">
            <summary>
            CheckEntities Monitor Lock
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._emptyArgs">
            <summary>
            Empty arguments dummy
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._instanceType">
            <summary>
            Self Type Cache
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._progId">
            <summary>
            Given ProgID in ctor or null
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._selfDynamicMemberNames">
            <summary>
            Dynamic accessible instance members
            </summary>
        </member>
        <member name="F:NetOffice.COMDynamicObject._invalidComProxy">
            <summary>
            Invalid proxy error message
            </summary>
        </member>
        <member name="M:NetOffice.COMDynamicObject.#ctor(System.Object)">
            <summary>
            Creates new instance with given proxy
            </summary>
            <param name="comProxy">the now wrapped comProxy instance</param>
        </member>
        <member name="M:NetOffice.COMDynamicObject.#ctor(NetOffice.ICOMObject,System.Object)">
            <summary>
            Creates new instance with given proxy and parent info
            </summary>
            <param name="parentObject">the parent instance where you have these instance from</param>
            <param name="comProxy">the now wrapped comProxy instance</param>
        </member>
        <member name="M:NetOffice.COMDynamicObject.#ctor(NetOffice.ICOMObject)">
            <summary>
            Creates new (root) instance with given managed proxy
            </summary>
            <param name="comObject">managed proxy</param>
        </member>
        <member name="M:NetOffice.COMDynamicObject.#ctor(NetOffice.Core,NetOffice.ICOMObject,System.Object)">
            <summary>
            Creates new instance with given proxy and parent info
            </summary>
            <param name="factory">current factory instance or null for default factory</param>
            <param name="parentObject">the parent instance where you have these instance from</param>
            <param name="comProxy">the now wrapped comProxy instance</param>       
        </member>
        <member name="M:NetOffice.COMDynamicObject.#ctor(NetOffice.Core,NetOffice.ICOMObject,NetOffice.COMProxyShare)">
            <summary>
            Creates new instance with given proxy and parent info
            </summary>
            <param name="factory">current factory instance or null for default factory</param>
            <param name="parentObject">the parent instance where you have these instance from</param>
            <param name="comProxy">proxy share instead of proxy</param>       
        </member>
        <member name="M:NetOffice.COMDynamicObject.#ctor(NetOffice.Core,System.String)">
            <summary>
            Create new instance from given ProgId
            </summary>
            <param name="factory">used factory core</param>
            <param name="progId"></param>
        </member>
        <member name="M:NetOffice.COMDynamicObject.#ctor(System.String)">
            <summary>
            Create new instance from given progId
            </summary>
            <param name="progId"></param>
        </member>
        <member name="P:NetOffice.COMDynamicObject.TryConvertFailResult">
            <summary>
            Return Value in TryConvert if no conversion is available.
            False may cause an exception from the current language service,
            otherwise the conversion result is just null(Nothing in Visual Basic)
            Default: false
            </summary>
        </member>
        <member name="P:NetOffice.COMDynamicObject.SelfDynamicMemberNames">
            <summary>
            Dynamic accessible instance members
            </summary>
        </member>
        <member name="M:NetOffice.COMDynamicObject.ConvertTo(NetOffice.ICOMObject)">
            <summary>
            Create a COMDynamicObject shallow copy from COMObject instance.
            The shallow copy is a root instance in com proxy management without child instances.
            Given COMObject instance and shallow copy share the same proxy.
            </summary>
            <param name="comObject">COMObject instance</param>
            <returns>COMDynamicObject shallow copy</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.ReleaseCOMProxy(System.Collections.Generic.IEnumerable{NetOffice.ICOMObject})">
            <summary>
            Release com proxy
            </summary>
        </member>
        <member name="M:NetOffice.COMDynamicObject.RaiseOnDispose">
            <summary>
            Calls the OnDispose event as service for client callers
            </summary>
            <returns>true if cancel is requested</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.CheckEntities">
            <summary>
            Check if GetEntities has been called for the instance and call it otherwise.
            </summary>
        </member>
        <member name="M:NetOffice.COMDynamicObject.GetEntities">
            <summary>
            Receive self description from UnderlyingObject through IDispatch
            </summary>
            <returns>entity collection</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.CheckEnumeratorEntity(System.String,System.Runtime.InteropServices.ComTypes.INVOKEKIND)">
            <summary>
            Check and stores the information the given proxy entity is an enumerator
            </summary>
            <param name="name">name of the entity</param>
            <param name="kind">kind of the entity</param>
        </member>
        <member name="M:NetOffice.COMDynamicObject.CheckDefaultEntity(System.String,System.Runtime.InteropServices.ComTypes.INVOKEKIND)">
            <summary>
            Check and stores the information the given proxy entity is a default property
            </summary>
            <param name="name">name of the entity</param>
            <param name="kind">kind of the entity</param>
        </member>
        <member name="M:NetOffice.COMDynamicObject.FindInCollection(System.Collections.Generic.IEnumerable{NetOffice.DynamicObjectEntity},System.String,NetOffice.DynamicObjectEntity.EntityKind)">
            <summary>
            Find item in collection. (Wrapper to bypass missing Linq in older .NET runtimes)
            </summary>
            <param name="values">collection</param>
            <param name="name">target name</param>
            <param name="kind">target kind</param>
            <returns>item or null</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.IsEnumeratorBinder(System.Dynamic.GetMemberBinder)">
            <summary>
            Check binder want an enumerator
            </summary>
            <param name="binder">given binder</param>
            <returns>true if binder want an enumerator, otherwise false</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.IsEnumeratorBinder(System.Dynamic.InvokeMemberBinder)">
            <summary>
            Check binder want an enumerator
            </summary>
            <param name="binder">given binder</param>
            <returns>true if binder want an enumerator, otherwise false</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.InvokeEnumerator">
            <summary>
            Invoke the proxy enumerator
            </summary>
            <returns>IEnumerable sequence</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.InvokeMethod(System.String)">
            <summary>
            Invoke a proxy method
            </summary>
            <param name="name">method name</param>
            <returns>return value or null</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.InvokeMethod(System.String,System.Object[])">
            <summary>
            Invoke a proxy method
            </summary>
            <param name="name">method name</param>
            <param name="args">method arguments</param>
            <returns>return value or null</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.InvokeMethod(System.String,System.Object[],System.Object)">
            <summary>
            Invoke a proxy method
            </summary>
            <param name="name">method name</param>
            <param name="args">method arguments</param>
            <param name="value">additional argument</param>
            <returns>return value or null</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.InvokePropertyGet(System.String)">
            <summary>
            Invoke a proxy property for read access
            </summary>
            <param name="name">property name</param>
            <returns>property value</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.InvokePropertyGet(System.String,System.Object[])">
            <summary>
            Invoke a proxy property for read access
            </summary>
            <param name="name">property name</param>
            <param name="args">arguments</param>
            <returns>property value</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.InvokePropertySet(System.String,System.Object[])">
            <summary>
            Invoke a proxy property for write access
            </summary>
            <param name="name">property name</param>
            <param name="args">arguments</param>
        </member>
        <member name="M:NetOffice.COMDynamicObject.InvokePropertySet(System.String,System.Object[],System.Object)">
            <summary>
            Invoke a proxy property for write access
            </summary>
            <param name="name">property name</param>
            <param name="args">arguments</param>
            <param name="value">additional argument</param>
        </member>
        <member name="M:NetOffice.COMDynamicObject.IsSelfDynamicMemberName(System.String)">
            <summary>
            DNUL for compatibility
            </summary>
            <param name="name">member name</param>
            <returns>true if name match, otherwise false</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.HasQuitMethod">
            <summary>
            DNUL for compatibility
            </summary>
            <returns>true if proxy has quit method, otherwise false</returns>
        </member>
        <member name="P:NetOffice.COMDynamicObject.SyncRoot">
            <summary>
            Monitor Lock
            </summary>
        </member>
        <member name="P:NetOffice.COMDynamicObject.Factory">
            <summary>
            The associated factory
            </summary>
        </member>
        <member name="P:NetOffice.COMDynamicObject.Invoker">
            <summary>
            The associated invoker
            </summary>
        </member>
        <member name="P:NetOffice.COMDynamicObject.Console">
            <summary>
            The associated console
            </summary>
        </member>
        <member name="P:NetOffice.COMDynamicObject.Settings">
            <summary>
            The associated settings
            </summary>
        </member>
        <member name="M:NetOffice.COMDynamicObject.To``1">
            <summary>
            Clone instance as target type
            </summary>
            <typeparam name="T">any other type to convert</typeparam>
            <exception cref="T:NetOffice.Exceptions.CloneException">An unexpected error occured. See inner exception(s) for details.</exception>
        </member>
        <member name="P:NetOffice.COMDynamicObject.UnderlyingObject">
            <summary>
            Returns the native wrapped proxy
            </summary>
        </member>
        <member name="P:NetOffice.COMDynamicObject.UnderlyingType">
            <summary>
            Returns Type of native proxy
            </summary>
        </member>
        <member name="P:NetOffice.COMDynamicObject.UnderlyingTypeName">
            <summary>
            Class name from UnderlyingObject
            </summary>
        </member>
        <member name="P:NetOffice.COMDynamicObject.UnderlyingFriendlyTypeName">
            <summary>
            Returns friendly name for the instance type
            </summary>
        </member>
        <member name="P:NetOffice.COMDynamicObject.UnderlyingComponentName">
            <summary>
            Name of the hosting NetOffice component
            </summary>      
        </member>
        <member name="P:NetOffice.COMDynamicObject.InstanceName">
            <summary>
            Friendly instance name of the NetOffice Wrapper class
            </summary>
        </member>
        <member name="P:NetOffice.COMDynamicObject.InstanceFriendlyName">
            <summary>
            Friendly Name of the NetOffice Wrapper class
            </summary>       
        </member>
        <member name="P:NetOffice.COMDynamicObject.InstanceComponentName">
            <summary>
            Name of the hosting NetOffice component
            </summary>
        </member>
        <member name="P:NetOffice.COMDynamicObject.InstanceType">
            <summary>
            Type information from ICOMObject instance
            </summary>
        </member>
        <member name="E:NetOffice.COMDynamicObject.OnDispose">
            <summary>
            These event was called from Dispose and you can skip the dipose operation here if you want. the event can be helpful for troubleshooting if you dont know why your objects beeing disposed
            </summary>
        </member>
        <member name="P:NetOffice.COMDynamicObject.IsDisposed">
            <summary>
            Returns instance is already diposed
            </summary>
        </member>
        <member name="P:NetOffice.COMDynamicObject.IsCurrentlyDisposing">
            <summary>
            Returns instance is currently in diposing progress
            </summary>
        </member>
        <member name="M:NetOffice.COMDynamicObject.Dispose">
            <summary>
            Dispose instance and all child instances
            </summary>
            <exception cref="T:NetOffice.Exceptions.COMDisposeException">An unexpected error occurs.</exception>
        </member>
        <member name="M:NetOffice.COMDynamicObject.Dispose(System.Boolean)">
            <summary>
            Dispose instance and all child instances
            </summary>
            <param name="disposeEventBinding">dispose proxies with events and one or more event recipients</param>
            <exception cref="T:NetOffice.Exceptions.COMDisposeException">An unexpected error occurs.</exception>
        </member>
        <member name="P:NetOffice.COMDynamicObject.ParentObject">
            <summary>
            Returns parent proxy object
            </summary>
        </member>
        <member name="P:NetOffice.COMDynamicObject.ChildObjects">
            <summary>
            Child instances
            </summary>
        </member>
        <member name="M:NetOffice.COMDynamicObject.AddChildObject(NetOffice.ICOMObject)">
            <summary>
            Add object to child list
            </summary>
            <param name="childObject">>target child instance</param>
            <exception cref="T:NetOffice.Exceptions.COMChildRelationException">Unexpected error</exception>
        </member>
        <member name="M:NetOffice.COMDynamicObject.RemoveChildObject(NetOffice.ICOMObject)">
            <summary>
            Remove object from child list
            </summary>
            <param name="childObject">target child instance</param>
            <exception cref="T:NetOffice.Exceptions.COMChildRelationException">Unexpected error</exception>
        </member>
        <member name="M:NetOffice.COMDynamicObject.DisposeChildInstances">
            <summary>
            Dispose all child instances
            </summary>
            <exception cref="T:NetOffice.Exceptions.COMDisposeException">An unexpected error occurs.</exception>
        </member>
        <member name="M:NetOffice.COMDynamicObject.DisposeChildInstances(System.Boolean)">
            <summary>
            Dispose all child instances
            </summary>
            <param name="disposeEventBinding">dispose proxies with events and one or more event recipients</param>
            <exception cref="T:NetOffice.Exceptions.COMDisposeException">An unexpected error occurs.</exception>
        </member>
        <member name="P:NetOffice.COMDynamicObject.IsEventBinding">
            <summary>
            Unsupported
            </summary>
        </member>
        <member name="P:NetOffice.COMDynamicObject.IsEventBridgeInitialized">
            <summary>
            Unsupported
            </summary>
        </member>
        <member name="P:NetOffice.COMDynamicObject.IsWithEventRecipients">
            <summary>
            Unsupported
            </summary>
        </member>
        <member name="M:NetOffice.COMDynamicObject.EntityIsAvailable(System.String)">
            <summary>
            NetOffice method: Returns information the proxy provides a method or property.
            Check want be made at runtime through IDispatch interface.
            </summary>
            <param name="name">name of the enitity</param>
            <returns>true if available, otherwise false</returns>
            <exception cref="T:NetOffice.Exceptions.AvailabilityException">Unexpected error, see inner exception(s) for details.</exception>
        </member>
        <member name="M:NetOffice.COMDynamicObject.EntityIsAvailable(System.String,NetOffice.Availability.SupportedEntityType)">
            <summary>
            NetOffice method: Returns information the proxy provides a method or property.
            Check want be made at runtime through IDispatch interface.
            </summary>
            <param name="name">name of the enitity</param>
            <param name="searchType">indicate the kind of enitity the caller is looking for</param>
            <returns>true if available, otherwise false</returns>
            <exception cref="T:NetOffice.Exceptions.AvailabilityException">Unexpected error, see inner exception(s) for details.</exception>
        </member>
        <member name="M:NetOffice.COMDynamicObject.NetOffice#ICOMProxyShareProvider#GetProxyShare">
            <summary>
            NetOffice method: Returns the inner proxy shared access handler
            </summary>
            <returns>shared proxy</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.NetOffice#ICOMProxyShareProvider#SetProxyShare(NetOffice.COMProxyShare)">
            <summary>
            NetOffice method: Set the inner proxy shared access handler.
            The method want aquire the share 1x times
            </summary>
            <param name="share">target share</param>
            <exception cref="T:System.ArgumentNullException">Throws when given share is null(Nothing in Visual Basic)</exception>
        </member>
        <member name="M:NetOffice.COMDynamicObject.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>a new object that is a copy of this instance</returns>
            <exception cref="T:NetOffice.Exceptions.CloneException">An unexpected error occured. See inner exception(s) for details.</exception>
        </member>
        <member name="M:NetOffice.COMDynamicObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>System.Int32 instance</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.Equals(System.Object)">
            <summary>
            Determines whether two Object instances are equal.
            </summary>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Provides a System.Dynamic.DynamicMetaObject that dispatches to the dynamic virtual
            methods. The object can be encapsulated inside another System.Dynamic.DynamicMetaObject
            to provide custom behavior for individual actions. This method supports the Dynamic
            Language Runtime infrastructure for language implementers and it is not intended
            to be used directly from your code.
            </summary>
            <param name="parameter">The expression that represents System.Dynamic.DynamicMetaObject to dispatch to the dynamic virtual methods.</param>
            <returns> An object of the System.Dynamic.DynamicMetaObject type.</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.GetDynamicMemberNames">
            <summary>
            Returns a sequence of all dynamic member names.
            </summary>
            <returns>a sequence that contains dynamic member names.</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Provides implementation for type conversion operations.
            </summary>
            <param name="binder">Provides information about the conversion operation.</param>
            <param name="result">The result of the type conversion operation.</param>
            <returns>true if the operation is successful; otherwise, false. </returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation.</param>
            <param name="result">The result of the index operation.</param>
            <returns>true if the operation is successful; otherwise, false.</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            Provides the implementation for operations that set a value by index.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation.</param>
            <param name="value">The value to set to the object that has the specified index.</param>
            <returns>true if the operation is successful; otherwise, false.</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation.</param>
            <param name="result">The result of the get operation.</param>
            <returns>true if the operation is successful; otherwise, false.</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation.</param>
            <param name="value">The value to set to the member.</param>
            <returns> true if the operation is successful; otherwise, false.</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member.
            </summary>
            <param name="binder">Provides information about the dynamic operation.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation.</param>
            <param name="result">The result of the member invocation.</param>
            <returns>true if the operation is successful; otherwise, false.</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.EqualsOnServer(NetOffice.ICOMObject)">
            <summary>
            Determines whether two COMObject instances are equal.
            </summary>
            <param name="obj">target instance to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.op_Equality(NetOffice.COMDynamicObject,NetOffice.COMObject)">
            <summary>
            Determines whether two COMObject instances are equal.
            </summary>
            <param name="objectA"></param>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.op_Inequality(NetOffice.COMDynamicObject,NetOffice.COMObject)">
            <summary>
            Determines whether two COMObject instances are not equal.
            </summary>
            <param name="objectA">first instance</param>
            <param name="objectB">second instance</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.op_Equality(NetOffice.COMDynamicObject,NetOffice.COMDynamicObject)">
            <summary>
            Determines whether two COMObject instances are equal.
            </summary>
            <param name="objectA"></param>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.op_Equality(NetOffice.COMDynamicObject,System.Object)">
            <summary>
            Determines whether two COMObject instances are equal.
            </summary>
            <param name="objectA"></param>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.op_Equality(System.Object,NetOffice.COMDynamicObject)">
            <summary>
            Determines whether two COMObject instances are equal.
            </summary>
            <param name="objectA">first instance</param>
            <param name="objectB">second instance</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.op_Inequality(NetOffice.COMDynamicObject,NetOffice.COMDynamicObject)">
            <summary>
            Determines whether two COMObject instances are not equal.
            </summary>
            <param name="objectA">first instance</param>
            <param name="objectB">second instance</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.op_Inequality(NetOffice.COMDynamicObject,System.Object)">
            <summary>
            Determines whether two COMObject instances are not equal.
            </summary>
            <param name="objectA">first instance</param>
            <param name="objectB">second instance</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:NetOffice.COMDynamicObject.op_Inequality(System.Object,NetOffice.COMDynamicObject)">
            <summary>
            Determines whether two COMObject instances are not equal.
            </summary>
            <param name="objectA">first instance</param>
            <param name="objectB">second instance</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="T:NetOffice.Dynamics.COMDynamicMetaObject">
            <summary>
            Wrapper around underlying DynamicMetaObject for debugging purposes.
            </summary>
        </member>
        <member name="M:NetOffice.Dynamics.COMDynamicMetaObject.#ctor(System.Dynamic.DynamicMetaObject)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="underlying">wrapped instance</param>
        </member>
        <member name="P:NetOffice.Dynamics.COMDynamicMetaObject.Underlying">
            <summary>
            Wrapped Instance
            </summary>
        </member>
        <member name="M:NetOffice.Dynamics.COMDynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
            <summary>
            Performs the binding of the dynamic binary operation.
            </summary>
            <param name="binder">An instance of the System.Dynamic.BinaryOperationBinder that represents the details of the dynamic operation.</param>
            <param name="arg"> An instance of the System.Dynamic.DynamicMetaObject representing the right hand side of the binary operation.</param>
            <returns>The new System.Dynamic.DynamicMetaObject representing the result of the binding.</returns>
        </member>
        <member name="M:NetOffice.Dynamics.COMDynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
            <summary>
            Performs the binding of the dynamic conversion operation.
            </summary>
            <param name="binder"> An instance of the System.Dynamic.ConvertBinder that represents the details of the dynamic operation.</param>
            <returns>The new System.Dynamic.DynamicMetaObject representing the result of the binding.</returns>
        </member>
        <member name="M:NetOffice.Dynamics.COMDynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Performs the binding of the dynamic create instance operation.
            </summary>
            <param name="binder">An instance of the System.Dynamic.CreateInstanceBinder that represents the details of the dynamic operation.</param>
            <param name="args">An array of System.Dynamic.DynamicMetaObject instances - arguments to the create instance operation.</param>
            <returns>The new System.Dynamic.DynamicMetaObject representing the result of the binding.</returns>
        </member>
        <member name="M:NetOffice.Dynamics.COMDynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Performs the binding of the dynamic delete index operation.
            </summary>
            <param name="binder">An instance of the System.Dynamic.DeleteIndexBinder that represents the details of the dynamic operation.</param>
            <param name="indexes">An array of System.Dynamic.DynamicMetaObject instances - indexes for the delete index operation.</param>
            <returns>The new System.Dynamic.DynamicMetaObject representing the result of the binding.</returns>
        </member>
        <member name="M:NetOffice.Dynamics.COMDynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
            <summary>
            Performs the binding of the dynamic delete member operation.
            </summary>
            <param name="binder">An instance of the System.Dynamic.DeleteMemberBinder that represents the details of the dynamic operation.</param>
            <returns>The new System.Dynamic.DynamicMetaObject representing the result of the binding.</returns>
        </member>
        <member name="M:NetOffice.Dynamics.COMDynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Performs the binding of the dynamic get index operation.
            </summary>
            <param name="binder">An instance of the System.Dynamic.GetIndexBinder that represents the details of the dynamic operation.</param>
            <param name="indexes">An array of System.Dynamic.DynamicMetaObject instances - indexes for the get index operation.</param>
            <returns>The new System.Dynamic.DynamicMetaObject representing the result of the binding.</returns>
        </member>
        <member name="M:NetOffice.Dynamics.COMDynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
            <summary>
            Performs the binding of the dynamic get member operation.
            </summary>
            <param name="binder">An instance of the System.Dynamic.GetMemberBinder that represents the details of the dynamic operation.</param>
            <returns>The new System.Dynamic.DynamicMetaObject representing the result of the binding.</returns>
        </member>
        <member name="M:NetOffice.Dynamics.COMDynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Performs the binding of the dynamic invoke operation.
            </summary>
            <param name="binder">An instance of the System.Dynamic.InvokeBinder that represents the details of the dynamic operation.</param>
            <param name="args">An array of System.Dynamic.DynamicMetaObject instances - arguments to the invoke operation.</param>
            <returns>The new System.Dynamic.DynamicMetaObject representing the result of the binding.</returns>
        </member>
        <member name="M:NetOffice.Dynamics.COMDynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Performs the binding of the dynamic invoke member operation.
            </summary>
            <param name="binder">An instance of the System.Dynamic.InvokeMemberBinder that represents the details of the dynamic operation.</param>
            <param name="args">An array of System.Dynamic.DynamicMetaObject instances - arguments to the invoke member operation.</param>
            <returns>The new System.Dynamic.DynamicMetaObject representing the result of the binding.</returns>
        </member>
        <member name="M:NetOffice.Dynamics.COMDynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
            <summary>
            Performs the binding of the dynamic set index operation.
            </summary>
            <param name="binder">An instance of the System.Dynamic.SetIndexBinder that represents the details of the dynamic operation.</param>
            <param name="indexes">An array of System.Dynamic.DynamicMetaObject instances - indexes for the set index operation.</param>
            <param name="value">The System.Dynamic.DynamicMetaObject representing the value for the set index operation.</param>
            <returns>The new System.Dynamic.DynamicMetaObject representing the result of the binding.</returns>
        </member>
        <member name="M:NetOffice.Dynamics.COMDynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
            <summary>
            Performs the binding of the dynamic set member operation.
            </summary>
            <param name="binder">An instance of the System.Dynamic.SetMemberBinder that represents the details of the dynamic operation.</param>
            <param name="value">The System.Dynamic.DynamicMetaObject representing the value for the set member  operation.</param>
            <returns>The new System.Dynamic.DynamicMetaObject representing the result of the binding.</returns>
        </member>
        <member name="M:NetOffice.Dynamics.COMDynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
            <summary>
            Performs the binding of the dynamic unary operation.
            </summary>
            <param name="binder">An instance of the System.Dynamic.UnaryOperationBinder that represents the details of the dynamic operation.</param>
            <returns>The new System.Dynamic.DynamicMetaObject representing the result of the binding.</returns>
        </member>
        <member name="M:NetOffice.Dynamics.COMDynamicMetaObject.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>The list of dynamic member names.</returns>
        </member>
        <member name="T:NetOffice.COMProxyShare">
            <summary>
            Provides shared access to managed COM proxies(System._ComObject) by implement a reference counter.  
            </summary>
        </member>
        <member name="T:NetOffice.COMProxyShare.COMProxyShareCountChangedChangedEventHandler">
            <summary>
            COMProxyShare event handler after reference counter has been changed
            </summary>
            <param name="sender">Event sender</param>
        </member>
        <member name="F:NetOffice.COMProxyShare._thisLock">
            <summary>
            Shared access thread lock in <see cref="M:NetOffice.COMProxyShare.Acquire"/> and <see cref="M:NetOffice.COMProxyShare.Release"/> methods.
            </summary>
        </member>
        <member name="F:NetOffice.COMProxyShare._count">
            <summary>
            Reference count for _proxy
            </summary>
        </member>
        <member name="F:NetOffice.COMProxyShare._proxy">
            <summary>
            Com proxy as any
            </summary>
        </member>
        <member name="F:NetOffice.COMProxyShare._released">
            <summary>
            Cache flag to see _proxy is disconnected
            </summary>
        </member>
        <member name="F:NetOffice.COMProxyShare._isEnumerator">
            <summary>
            Instance is marked as enumerator provider
            </summary>
        </member>
        <member name="F:NetOffice.COMProxyShare._factory">
            <summary>
            Used Core
            </summary>
        </member>
        <member name="F:NetOffice.COMProxyShare._invalidComProxy">
            <summary>
            Invalid proxy error message
            </summary>
        </member>
        <member name="M:NetOffice.COMProxyShare.#ctor(NetOffice.Core,System.Object)">
            <summary>
            Creates an instance of the class and acquire the given proxy
            </summary>
            <param name="factory">used core</param>
            <param name="proxy">com proxy as any</param>
            <exception cref="T:System.ArgumentNullException">throws when proxy is null</exception>
        </member>
        <member name="M:NetOffice.COMProxyShare.#ctor(NetOffice.Core,System.Object,System.Boolean)">
            <summary>
             Creates an instance of the class and acquire the given proxy
            </summary>
            <param name="factory">used core</param>
            <param name="proxy">com proxy as any</param>
            <param name="isEnumerator">indicates proxy is an enumerator</param>
            <exception cref="T:System.ArgumentNullException">throws when proxy is null</exception>
        </member>
        <member name="M:NetOffice.COMProxyShare.#ctor(NetOffice.Core,System.Object,System.Boolean,System.Boolean)">
            <summary>
             Creates an instance of the class and acquire the given proxy
            </summary>
            <param name="factory">used core</param>
            <param name="proxy">com proxy as any</param>
            <param name="isEnumerator">indicates proxy is an enumerator</param>
            <param name="suppressReleaseExceptions">ignore exceptions when release underlying managed proxy</param>
            <exception cref="T:System.ArgumentNullException">throws when proxy is null</exception>
        </member>
        <member name="F:NetOffice.COMProxyShare.CountChanged">
            <summary>
            Occurs after reference counter has been changed
            </summary>
        </member>
        <member name="P:NetOffice.COMProxyShare.Released">
            <summary>
            Returns information the underlying proxy is already released
            </summary>
        </member>
        <member name="P:NetOffice.COMProxyShare.Factory">
            <summary>
            Used Factory Core
            </summary>
        </member>
        <member name="P:NetOffice.COMProxyShare.Proxy">
            <summary>
            Underlying managed proxy(System._ComObject)
            </summary>
        </member>
        <member name="P:NetOffice.COMProxyShare.SuppressReleaseExceptions">
            <summary>
            Ignore exceptions when releasing underlying managed proxy (System._ComObject).
            Default is false.
            </summary>
            <remarks>
            When set to true, <see cref="M:NetOffice.COMProxyShare.Release"/> method will not throw exceptions which
            occuring when releasing the object.
            </remarks>
        </member>
        <member name="P:NetOffice.COMProxyShare.IsEnumerator">
            <summary>
            Instance is marked as enumerator provider
            </summary>
        </member>
        <member name="P:NetOffice.COMProxyShare.Count">
            <summary>
            Current Reference Count
            </summary>
        </member>
        <member name="M:NetOffice.COMProxyShare.Acquire">
            <summary>
            Increment the reference counter by 1
            </summary>
        </member>
        <member name="M:NetOffice.COMProxyShare.Release">
            <summary>
            Decrement the reference counter by 1 and release the underlying proxy if counter is 0 after decrement
            </summary>
            <returns>true if underlying proxy is released, otherwise false</returns>
        </member>
        <member name="M:NetOffice.COMProxyShare.ToString">
            <summary>
            Returns a System.String that represents the instance
            </summary>
            <returns>System.String</returns>
        </member>
        <member name="T:NetOffice.Events.CoClassEventReflector">
            <summary>
            CoClass IEventBinding Services
            </summary>
        </member>
        <member name="M:NetOffice.Events.CoClassEventReflector.HasEventRecipients(NetOffice.ICOMObject,System.Type)">
            <summary>
            Instance has one or more event recipients
            </summary>
            <param name="instance">target instance</param>
            <param name="type">target instance type</param> 
            <returns>true if one or more event is active, otherwise false</returns>
        </member>
        <member name="M:NetOffice.Events.CoClassEventReflector.HasEventRecipients(NetOffice.ICOMObject,System.Type,System.String)">
            <summary>
            Instance has one or more event recipients
            </summary>
            <param name="instance">target instance</param>
            <param name="type">target instance type</param> 
            <param name="eventName">name of the event</param>
            <returns>true if event is active, otherwise false</returns>
        </member>
        <member name="M:NetOffice.Events.CoClassEventReflector.GetEventRecipients(NetOffice.ICOMObject,System.Type,System.String)">
            <summary>
            Target methods from its actual event recipients
            </summary>
            <param name="instance">target instance</param>
            <param name="type">target instance type</param>
            <param name="eventName">name of the event without 'Event' at the end</param>
            <returns>actual event recipients</returns>
        </member>
        <member name="M:NetOffice.Events.CoClassEventReflector.GetCountOfEventRecipients(NetOffice.ICOMObject,System.Type,System.String)">
            <summary>
            Returns the current count of event recipients
            </summary>
            <param name="instance">target instance</param>
            <param name="type">target instance type</param>
            <param name="eventName">name of the event without 'Event' at the end</param>
            <returns>count of event recipients</returns>
        </member>
        <member name="M:NetOffice.Events.CoClassEventReflector.RaiseCustomEvent(NetOffice.ICOMObject,System.Type,System.String,System.Object[]@)">
            <summary>
            Raise an instance event
            </summary>
            <param name="instance">target instance</param>
            <param name="type">target instance type</param>
            <param name="eventName">name of the event without 'Event' at the end</param>
            <param name="paramsArray">custom arguments for the event</param>
            <returns>count of called event recipients</returns>
        </member>
        <member name="T:NetOffice.Exceptions.AvailabilityException">
            <summary>
            Indicates an availability operation failed
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.AvailabilityException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.AvailabilityException.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
        </member>
        <member name="M:NetOffice.Exceptions.AvailabilityException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:NetOffice.Exceptions.CloneException">
            <summary>
            Indicates a Clone operation failed
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.CloneException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.CloneException.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
        </member>
        <member name="M:NetOffice.Exceptions.CloneException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:NetOffice.Exceptions.COMChildRelationException">
            <summary>
            Indicates a child relation operation in NetOffice COM proxy management has been failed to complete
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.COMChildRelationException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="innerException">the exception that is the cause of the current exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.COMChildRelationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">the message that indicates the reason for the exception</param>
            <param name="innerException">the exception that is the cause of the current exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.COMChildRelationException.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">the message that indicates the reason for the exception</param>
        </member>
        <member name="T:NetOffice.Exceptions.COMDisposeException">
            <summary>
            Indicates a dispose operation has been failed to complete
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.COMDisposeException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="innerException">the exception that is the cause of the current exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.COMDisposeException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">the message that indicates the reason for the exception</param>
            <param name="innerException">the exception that is the cause of the current exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.COMDisposeException.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">the message that indicates the reason for the exception</param>
        </member>
        <member name="T:NetOffice.Exceptions.CreateCOMProxyShareException">
            <summary>
            Indicates NetOffice.Core failed to create a COMProxyShare instance
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.CreateCOMProxyShareException.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
        </member>
        <member name="M:NetOffice.Exceptions.CreateCOMProxyShareException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.CreateCOMProxyShareException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:NetOffice.Exceptions.CreateInstanceException">
            <summary>
            Indicates NetOffice.Core failed to create an instance
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.CreateInstanceException.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
        </member>
        <member name="M:NetOffice.Exceptions.CreateInstanceException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.CreateInstanceException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:NetOffice.Exceptions.DuckException">
            <summary>
            Indicates NetOffice.Core failed to compile a duck type implementation
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.DuckException.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
        </member>
        <member name="M:NetOffice.Exceptions.DuckException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>     
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.DuckException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:NetOffice.Exceptions.CallType">
            <summary>
            Specify an invoke operation kind
            </summary>
        </member>
        <member name="F:NetOffice.Exceptions.CallType.PropertyGet">
            <summary>
            PropertyGet 
            </summary>
        </member>
        <member name="F:NetOffice.Exceptions.CallType.PropertySet">
            <summary>
            PropertySet
            </summary>
        </member>
        <member name="F:NetOffice.Exceptions.CallType.Method">
            <summary>
            Method or MethodReturn
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.ExceptionMessageBuilder.GetExceptionDiagnosticsMessage(NetOffice.ICOMObject,System.String,NetOffice.Exceptions.CallType,System.Object[])">
            <summary>
            Get diagnostic exception message
            </summary>
            <param name="comObject">caller instance</param>
            <param name="name">name of invoke target</param>
            <param name="type">type of invoke target</param>
            <param name="arguments">arguments as any</param>
            <returns>diagnostic exception message or error message if an exception occurs</returns>
        </member>
        <member name="M:NetOffice.Exceptions.ExceptionMessageBuilder.GetExceptionDefaultMessage(NetOffice.ICOMObject)">
            <summary>
            Get associated settings default message
            </summary>
            <param name="comObject">caller instance</param>
            <returns>default exception message</returns>
        </member>
        <member name="M:NetOffice.Exceptions.ExceptionMessageBuilder.GetExceptionInnerExceptionMessageToTopLevelMessage(System.Exception)">
            <summary>
            Get most inner/bottom exception message
            </summary>
            <param name="throwedException">exception as any</param>
            <returns>most inner exception message</returns>
        </member>
        <member name="M:NetOffice.Exceptions.ExceptionMessageBuilder.GetExceptionAllInnerExceptionMessagesToTopLevelMessage(System.Exception)">
            <summary>
            Get all exception/inner exception messages as summary
            </summary>
            <param name="throwedException">exception</param>
            <returns>exception message summary</returns>
        </member>
        <member name="M:NetOffice.Exceptions.ExceptionMessageBuilder.GetExceptionMessage(System.Exception,System.Object,System.String,NetOffice.Exceptions.CallType,System.Object[])">
            <summary>
            Get exception message based on associated settings
            </summary>
            <param name="thrownException">exception as any</param>
            <param name="instance">caller instance</param>
            <param name="name"></param>
            <param name="type">name of invoke target</param>
            <param name="arguments">arguments as any</param>
            <returns>exception message</returns>
        </member>
        <member name="M:NetOffice.Exceptions.ExceptionMessageBuilder.GetDefaultExceptionMessage">
            <summary>
            Get default settings exception message
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetOffice.Exceptions.ExceptionMessageBuilder.TryGetProxyClassName(System.Object)">
            <summary>
            Try to get proxy class and suppress any exceptions
            </summary>
            <param name="proxy">proxy instance</param>
            <returns>Class name of the proxy object, or <code>System._ComObject</code> value when name cannot be obtained.</returns>
        </member>
        <member name="T:NetOffice.Exceptions.FactoryException">
            <summary>
            Indicates NetOffice.Core failed to receive required factory info
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.FactoryException.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
        </member>
        <member name="M:NetOffice.Exceptions.FactoryException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.FactoryException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:NetOffice.Exceptions.IDispatchNotImplementedException">
            <summary>
            Indicates a given com proxy/result doesn't implement the IDispatch COM Import Interface.
            The <see cref="T:NetOffice.IDispatch"/> interface is the key interface for late binding which NetOffice uses strictly.
            </summary>
        </member>
        <member name="F:NetOffice.Exceptions.IDispatchNotImplementedException._defaultMessage">
            <summary>
            Default Exception Message
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.IDispatchNotImplementedException.#ctor">
            <summary>
            Creates an instance of the class
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.IDispatchNotImplementedException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.IDispatchNotImplementedException.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
        </member>
        <member name="M:NetOffice.Exceptions.IDispatchNotImplementedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:NetOffice.Exceptions.InvokerCOMException">
            <summary>
            Indicates a failed invoke operation.
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.InvokerCOMException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the InvokerCOMException class.
            </summary>
            <param name="message">the message that indicates the reason for the exception</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.InvokerCOMException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the InvokerCOMException class.
            </summary>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:NetOffice.Exceptions.MethodCOMException">
            <summary>
            Indicates a failed method invoke operation
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.MethodCOMException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">the message that indicates the reason for the exception</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.MethodCOMException.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">the message that indicates the reason for the exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.MethodCOMException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:NetOffice.Exceptions.NetOfficeCOMException">
            <summary>
            Extend System.Runtime.InteropServices.COMException
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.NetOfficeCOMException.#ctor">
            <summary>
            Creates an instance of the class
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.NetOfficeCOMException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="inner">the exception that is the cause of the current exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.NetOfficeCOMException.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">the message that indicates the reason for the exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.NetOfficeCOMException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">the message that indicates the reason for the exception</param>
            <param name="inner">the exception that is the cause of the current exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.NetOfficeCOMException.#ctor(System.String,System.Int32)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">the message that indicates the reason for the exception</param>
            <param name="errorCode">The error code (HRESULT) value associated with this exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.NetOfficeCOMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="info">the SerializationInfo object that holds the serialized object data</param>
            <param name="context">the StreamingContext object that supplies the contextual information about the source or destination</param>
            <exception cref="T:System.ArgumentNullException">info is null</exception>
        </member>
        <member name="T:NetOffice.Exceptions.NetOfficeIOException">
            <summary>
            Indicates an I/O Error
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.NetOfficeIOException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.NetOfficeIOException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">the message that indicates the reason for the exception</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:NetOffice.Exceptions.PropertyGetCOMException">
            <summary>
            Indicates a failed property get invoke operation
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.PropertyGetCOMException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">the message that indicates the reason for the exception</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.PropertyGetCOMException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:NetOffice.Exceptions.PropertySetCOMException">
            <summary>
            Indicates a failed property set invoke operation
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.PropertySetCOMException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">the message that indicates the reason for the exception</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.PropertySetCOMException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:NetOffice.Exceptions.RegisterException">
            <summary>
            Indicates a register error
            </summary>
        </member>
        <member name="F:NetOffice.Exceptions.RegisterException._exceptionMessage">
            <summary>
            Default Error Message
            </summary>
        </member>
        <member name="F:NetOffice.Exceptions.RegisterException.ErrorBlock">
            <summary>
            Codeblock
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.RegisterException.#ctor(System.Int32)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="errorBlock">codeblock</param>
        </member>
        <member name="M:NetOffice.Exceptions.RegisterException.#ctor(System.Int32,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="errorBlock">codeblock</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.RegisterException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.RegisterException.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
        </member>
        <member name="M:NetOffice.Exceptions.RegisterException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:NetOffice.Exceptions.UnregisterException">
            <summary>
            Indicates an unregister error
            </summary>
        </member>
        <member name="F:NetOffice.Exceptions.UnregisterException._exceptionMessage">
            <summary>
            Default Error Message
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.UnregisterException.#ctor">
            <summary>
            Creates an instance of the class
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.UnregisterException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:NetOffice.Exceptions.UnregisterException.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
        </member>
        <member name="M:NetOffice.Exceptions.UnregisterException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:NetOffice.Exceptions.EntityNotSupportedException">
            <summary>
            Signals the target method or property is not supported from the COM proxy in the current version
            </summary>
        </member>
        <member name="M:NetOffice.Exceptions.EntityNotSupportedException.#ctor(System.String)">
            <summary>
            Creates an instance of the exception
            </summary>
            <param name="entityName">name of missing entity</param>
        </member>
        <member name="T:NetOffice.Extensions.Calling.CallExtensions">
            <summary>
            <see cref="T:NetOffice.ICOMObject"/> Call Extensions
            </summary>
        </member>
        <member name="M:NetOffice.Extensions.Calling.CallExtensions.Method(NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Invoke <see cref="T:NetOffice.ICOMObject"/> method by name.
            </summary>
            <remarks>Should be called when dealing with optional arguments results in ugly code because this method can handle so-called named arguments</remarks>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">Unable to complete the call</exception>
            <param name="comObject">target <see cref="T:NetOffice.ICOMObject"/> instance</param>
            <param name="name">name of the method</param>
            <param name="arg1">optional argument 1</param>
            <param name="arg2">optional argument 2</param>
            <param name="arg3">optional argument 3</param>
            <param name="arg4">optional argument 4</param>
            <param name="arg5">optional argument 5</param>
            <param name="arg6">optional argument 6</param>
            <param name="arg7">optional argument 7</param>
            <param name="arg8">optional argument 8</param>
            <param name="arg9">optional argument 9</param>
            <param name="arg10">optional argument 10</param>
            <param name="arg11">optional argument 11</param>
            <param name="arg12">optional argument 12</param>
            <param name="arg13">optional argument 13</param>
            <param name="arg14">optional argument 14</param>
            <param name="arg15">optional argument 15</param>
            <param name="arg16">optional argument 16</param>
            <param name="arg17">optional argument 17</param>
            <param name="arg18">optional argument 18</param>
            <param name="arg19">optional argument 19</param>
            <param name="arg20">optional argument 20</param>
            <param name="arg21">optional argument 21</param>
            <param name="arg22">optional argument 22</param>
            <param name="arg23">optional argument 23</param>
            <param name="arg24">optional argument 24</param>
            <param name="arg25">optional argument 25</param>
            <param name="arg26">optional argument 26</param>
            <param name="arg27">optional argument 27</param>
            <param name="arg28">optional argument 28</param>
            <param name="arg29">optional argument 29</param>
            <param name="arg30">optional argument 30</param>
            <param name="arg31">optional argument 31</param>
            <param name="arg32">optional argument 32</param>
        </member>
        <member name="M:NetOffice.Extensions.Calling.CallExtensions.MethodGet``1(NetOffice.ICOMObject,System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Invoke <see cref="T:NetOffice.ICOMObject"/> method by name.
            </summary>
            <remarks>Should be called when dealing with optional arguments results in ugly code because this method can handle so-called named arguments</remarks>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">Unable to complete the call</exception>
            <param name="comObject">target <see cref="T:NetOffice.ICOMObject"/> instance</param>
            <param name="name">name of the method</param>
            <param name="arg1">optional argument 1</param>
            <param name="arg2">optional argument 2</param>
            <param name="arg3">optional argument 3</param>
            <param name="arg4">optional argument 4</param>
            <param name="arg5">optional argument 5</param>
            <param name="arg6">optional argument 6</param>
            <param name="arg7">optional argument 7</param>
            <param name="arg8">optional argument 8</param>
            <param name="arg9">optional argument 9</param>
            <param name="arg10">optional argument 10</param>
            <param name="arg11">optional argument 11</param>
            <param name="arg12">optional argument 12</param>
            <param name="arg13">optional argument 13</param>
            <param name="arg14">optional argument 14</param>
            <param name="arg15">optional argument 15</param>
            <param name="arg16">optional argument 16</param>
            <param name="arg17">optional argument 17</param>
            <param name="arg18">optional argument 18</param>
            <param name="arg19">optional argument 19</param>
            <param name="arg20">optional argument 20</param>
            <param name="arg21">optional argument 21</param>
            <param name="arg22">optional argument 22</param>
            <param name="arg23">optional argument 23</param>
            <param name="arg24">optional argument 24</param>
            <param name="arg25">optional argument 25</param>
            <param name="arg26">optional argument 26</param>
            <param name="arg27">optional argument 27</param>
            <param name="arg28">optional argument 28</param>
            <param name="arg29">optional argument 29</param>
            <param name="arg30">optional argument 30</param>
            <param name="arg31">optional argument 31</param>
            <param name="arg32">optional argument 32</param>
            <returns>result of T</returns>
        </member>
        <member name="T:NetOffice.Extensions.Conversion.ConversionExtensions">
            <summary>
            <see cref="T:NetOffice.ICOMObject"/> Conversion Extensions
            </summary>
        </member>
        <member name="M:NetOffice.Extensions.Conversion.ConversionExtensions.To``1(System.Object,System.Boolean)">
            <summary>
            Cast instance to <see cref="T:NetOffice.ICOMObject"/> and clone instance as target type of T
            </summary>
            <typeparam name="T">given target type</typeparam>
            <param name="value">instance to convert</param>
            <param name="throwException">return null or throw exception if its failed to convert</param>
            <returns>instance of T or null(Nothing in Visual Basic)</returns>
            <exception cref="T:NetOffice.Exceptions.CloneException">Failed to convert instance to <see cref="T:NetOffice.ICOMObject"/></exception>
        </member>
        <member name="T:NetOffice.Extensions.Invoker.InvokerExtensions">
            <summary>
            <see cref="T:NetOffice.ICOMObject"/> Invoker Extensions
            </summary>
        </member>
        <member name="M:NetOffice.Extensions.Invoker.InvokerExtensions.Property``1(System.Object,System.String)">
            <summary>
            Invoke Property if instance implement <see cref="T:NetOffice.ICOMObject"/>
            </summary>
            <typeparam name="T">result type</typeparam>
            <param name="value">instance which is <see cref="T:NetOffice.ICOMObject"/></param>
            <param name="propertyName">name of property</param>
            <returns>result of invoked property or default(T) if instance doesn't implement <see cref="T:NetOffice.ICOMObject"/></returns>
        </member>
        <member name="M:NetOffice.Extensions.Invoker.InvokerExtensions.Method(System.Object,System.String,System.Boolean)">
            <summary>
            Invoke method if instance implement <see cref="T:NetOffice.ICOMObject"/>
            </summary>
            <param name="value">instance which is <see cref="T:NetOffice.ICOMObject"/></param>
            <param name="methodName">name of method</param>
            <param name="throwException">throw exception if unable to cast <see cref="T:NetOffice.ICOMObject"/></param>
            <returns>result of invoked property or default(T) if instance doesn't implement <see cref="T:NetOffice.ICOMObject"/></returns>
        </member>
        <member name="M:NetOffice.Extensions.Invoker.InvokerExtensions.MethodGet``1(System.Object,System.String,System.Object[],System.Boolean)">
            <summary>
            Invoke method if instance implement <see cref="T:NetOffice.ICOMObject"/>
            </summary>
            <param name="value">instance which is <see cref="T:NetOffice.ICOMObject"/></param>
            <param name="methodName">name of method</param>
            <param name="paramsArray">arguments as any</param>
            <param name="throwException">throw exception if unable to cast <see cref="T:NetOffice.ICOMObject"/></param>
            <returns>result of invoked property or default(T) if instance doesn't implement <see cref="T:NetOffice.ICOMObject"/></returns>
        </member>
        <member name="T:NetOffice.Extensions.EnumerableExtensions">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for querying objects
            that implement NetOffice.CollectionsGeneric.IEnumerableProvider`1.
            </summary>
        </member>
        <member name="M:NetOffice.Extensions.EnumerableExtensions.First``1(NetOffice.CollectionsGeneric.IEnumerableProvider{``0},System.Boolean)">
            <summary>
            Returns the first element of a sequence
            </summary>
            <typeparam name="TSource">the type of the elements of <paramref name="source"/></typeparam>
            <param name="source">the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of</param>
            <param name="append">append items in sequence to parent instance in com proxy management</param>
            <returns>the first element in the specified sequence</returns>
            <exception cref="T:System.ArgumentNullException">source is null(Nothing in Visual Basic)</exception>
            <exception cref="T:System.InvalidOperationException">sequence is empty</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">error occured while calling remote server</exception>
        </member>
        <member name="M:NetOffice.Extensions.EnumerableExtensions.First``1(NetOffice.CollectionsGeneric.IEnumerableProvider{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Returns the first element of a sequence
            </summary>
            <typeparam name="TSource">the type of the elements of <paramref name="source"/></typeparam>
            <param name="source">the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of</param>
            <param name="append">append items in sequence to parent instance in com proxy management</param>
            <param name="predicate">a function to test each element for a condition</param>
            <returns>the first element in the specified sequence</returns>
            <exception cref="T:System.ArgumentNullException">source is null(Nothing in Visual Basic)</exception>
            <exception cref="T:System.InvalidOperationException">sequence is empty</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">error occured while calling remote server</exception>
        </member>
        <member name="M:NetOffice.Extensions.EnumerableExtensions.FirstOrDefault``1(NetOffice.CollectionsGeneric.IEnumerableProvider{``0},System.Boolean)">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no elements
            </summary>
            <typeparam name="TSource">the type of the elements of <paramref name="source"/></typeparam>
            <param name="source">the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of</param>
            <param name="append">append items in sequence to parent instance in com proxy management</param>
            <returns>default(TSource) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" /></returns>
            <exception cref="T:System.ArgumentNullException">source is null(Nothing in Visual Basic)</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">error occured while calling remote server</exception>     
        </member>
        <member name="M:NetOffice.Extensions.EnumerableExtensions.FirstOrDefault``1(NetOffice.CollectionsGeneric.IEnumerableProvider{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no elements
            </summary>
            <typeparam name="TSource">the type of the elements of <paramref name="source"/></typeparam>
            <param name="source">the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of</param>
            <param name="predicate">a function to test each element for a condition</param>
            <param name="append">append items in sequence to parent instance in com proxy management</param>
            <returns>default(TSource) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" /></returns>
            <exception cref="T:System.ArgumentNullException">source is null(Nothing in Visual Basic)</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">error occured while calling remote server</exception> 
        </member>
        <member name="M:NetOffice.Extensions.EnumerableExtensions.Last``1(NetOffice.CollectionsGeneric.IEnumerableProvider{``0},System.Boolean)">
            <summary>
            Returns the last element of a sequence
            </summary>
            <typeparam name="TSource">the type of the elements of <paramref name="source"/></typeparam>
            <param name="source">the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of</param>
            <param name="append">append items in sequence to parent instance in com proxy management</param>
            <returns>the value at the last position in the source sequence</returns>
            <exception cref="T:System.ArgumentNullException">source is null(Nothing in Visual Basic)</exception>
            <exception cref="T:System.InvalidOperationException">sequence is empty</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">error occured while calling remote server</exception>
        </member>
        <member name="M:NetOffice.Extensions.EnumerableExtensions.Last``1(NetOffice.CollectionsGeneric.IEnumerableProvider{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Returns the last element of a sequence
            </summary>
            <typeparam name="TSource">the type of the elements of <paramref name="source"/></typeparam>
            <param name="source">the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of</param>
            <param name="append">append items in sequence to parent instance in com proxy management</param>
            <param name="predicate">a function to test each element for a condition</param>
            <returns>the value at the last position in the source sequence</returns>
            <exception cref="T:System.ArgumentNullException">source is null(Nothing in Visual Basic)</exception>
            <exception cref="T:System.InvalidOperationException">sequence is empty</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">error occured while calling remote server</exception>
        </member>
        <member name="M:NetOffice.Extensions.EnumerableExtensions.LastOrDefault``1(NetOffice.CollectionsGeneric.IEnumerableProvider{``0},System.Boolean)">
            <summary>
            Returns the last element of a sequence
            </summary>
            <typeparam name="TSource">the type of the elements of <paramref name="source"/></typeparam>
            <param name="source">the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of</param>
            <param name="append">append items in sequence to parent instance in com proxy management</param>
            <returns>the value at the last position in the source sequence</returns>
            <exception cref="T:System.ArgumentNullException">source is null(Nothing in Visual Basic)</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">error occured while calling remote server</exception>
        </member>
        <member name="M:NetOffice.Extensions.EnumerableExtensions.LastOrDefault``1(NetOffice.CollectionsGeneric.IEnumerableProvider{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Returns the last element of a sequence
            </summary>
            <typeparam name="TSource">the type of the elements of <paramref name="source"/></typeparam>
            <param name="source">the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of</param>
            <param name="append">append items in sequence to parent instance in com proxy management</param>
            <param name="predicate">a function to test each element for a condition</param>
            <returns>the value at the last position in the source sequence</returns>
            <exception cref="T:System.ArgumentNullException">source is null(Nothing in Visual Basic)</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">error occured while calling remote server</exception>
        </member>
        <member name="M:NetOffice.Extensions.EnumerableExtensions.Count``1(NetOffice.CollectionsGeneric.IEnumerableProvider{``0},System.Boolean)">
            <summary>
            Returns the number of elements in a sequence
            </summary>
            <typeparam name="TSource">the type of the elements of <paramref name="source"/></typeparam>
            <param name="source">the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of</param>
            <param name="append">append items in sequence to parent instance in com proxy management</param>
            <returns>the number of elements in the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null(Nothing in Visual Basic)</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">error occured while calling remote server</exception>
        </member>
        <member name="M:NetOffice.Extensions.EnumerableExtensions.Count``1(NetOffice.CollectionsGeneric.IEnumerableProvider{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Returns the number of elements in a sequence
            </summary>
            <typeparam name="TSource">the type of the elements of <paramref name="source"/></typeparam>
            <param name="source">the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of</param>
            <param name="predicate">a function to test each element for a condition</param>
            <param name="append">append items in sequence to parent instance in com proxy management</param>
            <returns>the number of elements in the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null(Nothing in Visual Basic)</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">error occured while calling remote server</exception>
        </member>
        <member name="M:NetOffice.Extensions.EnumerableExtensions.Any``1(NetOffice.CollectionsGeneric.IEnumerableProvider{``0},System.Boolean)">
            <summary>
            Determines whether a sequence contains any elements
            </summary>
            <typeparam name="TSource">the type of the elements of <paramref name="source"/></typeparam>
            <param name="source">the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of</param>
            <param name="append">append items in sequence to parent instance in com proxy management</param>
            <returns>true if the source sequence contains any elements; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException">source is null(Nothing in Visual Basic)</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">error occured while calling remote server</exception>
        </member>
        <member name="M:NetOffice.Extensions.EnumerableExtensions.Any``1(NetOffice.CollectionsGeneric.IEnumerableProvider{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Determines whether a sequence contains any elements
            </summary>
            <typeparam name="TSource">the type of the elements of <paramref name="source"/></typeparam>
            <param name="source">the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of</param>
            <param name="predicate">a function to test each element for a condition</param>
            <param name="append">append items in sequence to parent instance in com proxy management</param>
            <returns>true if the source sequence contains any elements; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException">source is null(Nothing in Visual Basic)</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">error occured while calling remote server</exception>
        </member>
        <member name="M:NetOffice.Extensions.EnumerableExtensions.Contains``1(NetOffice.CollectionsGeneric.IEnumerableProvider{``0},``0,System.Boolean)">
            <summary>
            Determines whether a sequence contains a specified element by using the NetOffice Core equality comparer
            </summary>
            <typeparam name="TSource">the type of the elements of <paramref name="source"/></typeparam>
            <param name="source">the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of</param>
            <param name="value">the value to locate in the sequence</param>
            <param name="append">append items in sequence to parent instance in com proxy management</param>
            <returns>true if the source sequence contains an element that has the specified value; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException">source is null(Nothing in Visual Basic)</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">error occured while calling remote server</exception>
        </member>
        <member name="M:NetOffice.Extensions.EnumerableExtensions.Where``1(NetOffice.CollectionsGeneric.IEnumerableProvider{``0},System.Func{``0,System.Int32,System.Boolean},System.Boolean)">
            <summary>
            Filters a sequence of values based on a predicate
            </summary>
            <typeparam name="TSource">the type of the elements of <paramref name="source"/></typeparam>
            <param name="source">the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of</param>
            <param name="predicate">a function to test each element for a condition</param>
            <param name="append">append items in sequence to parent instance in com proxy management</param>
            <returns>true if the source sequence contains an element that has the specified value; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException">source is null(Nothing in Visual Basic)</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">error occured while calling remote server</exception>
        </member>
        <member name="M:NetOffice.Extensions.EnumerableExtensions.Where``1(NetOffice.CollectionsGeneric.IEnumerableProvider{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Filters a sequence of values based on a predicate
            </summary>
            <typeparam name="TSource">the type of the elements of <paramref name="source"/></typeparam>
            <param name="source">the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of</param>
            <param name="predicate">a function to test each element for a condition</param>
            <param name="append">append items in sequence to parent instance in com proxy management</param>
            <returns>true if the source sequence contains an element that has the specified value; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException">source is null(Nothing in Visual Basic)</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeCOMException">error occured while calling remote server</exception>
        </member>
        <member name="T:NetOffice.Filtering.IMessageFilter">
            <summary>
            http://msdn.microsoft.com/en-us/library/windows/desktop/ms693740%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="M:NetOffice.Filtering.IMessageFilter.HandleInComingCall(System.UInt32,System.IntPtr,System.UInt32,NetOffice.Filtering.InterfaceInfo[])">
            <summary>
            Provides a single entry point for incoming calls.
            </summary>
            <param name="dwCallType">The type of incoming call that has been received. Possible values are from the enumeration CALLTYPE</param>
            <param name="htaskCaller">The thread id of the caller</param>
            <param name="dwTickCount">The elapsed tick count since the outgoing call was made, if dwCallType is not CALLTYPE_TOPLEVEL. If dwCallType is CALLTYPE_TOPLEVEL, dwTickCount should be ignored</param>
            <param name="lpInterfaceInfo">A pointer to an INTERFACEINFO structure that identifies the object, interface, and method being called. In the case of DDE calls, lpInterfaceInfo can be NULL because the DDE layer does not return interface information.</param>
            <returns>
            This method can return the following values
            SERVERCALL_ISHANDLED - The application might be able to process the call
            SERVERCALL_REJECTED - The application cannot handle the call due to an unforeseen problem, such as network unavailability, or if it is in the process of terminating
            SERVERCALL_RETRYLATER - The application cannot handle the call at this time. An application might return this value when it is in a user-controlled modal state
            </returns>
        </member>
        <member name="M:NetOffice.Filtering.IMessageFilter.RetryRejectedCall(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Provides applications with an opportunity to display a dialog box offering retry, cancel, or task-switching options.
            </summary>
            <param name="htaskCallee">The thread id of the called application</param>
            <param name="dwTickCount">The number of elapsed ticks since the call was made</param>
            <param name="dwRejectType">Specifies either SERVERCALL_REJECTED or SERVERCALL_RETRYLATER, as returned by the object application</param>
            <returns>
            This method can return the following value
            -1 - The call should be canceled. COM then returns RPC_E_CALL_REJECTED from the original method call
            0 ≤ value ≤ 100 - The call is to be retried immediately.
            100 ≤ value - COM will wait for this many milliseconds and then retry the call
            </returns>
        </member>
        <member name="M:NetOffice.Filtering.IMessageFilter.MessagePending(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Indicates that a message has arrived while COM is waiting to respond to a remote call.
            </summary>
            <param name="htaskCallee">The thread id of the called application</param>
            <param name="dwTickCount">The number of ticks since the call was made. It is calculated from the GetTickCount function</param>
            <param name="dwPendingType">The type of call made during which a message or event was received. Possible values are from the enumeration PENDINGTYPE, where PENDINGTYPE_TOPLEVEL means the outgoing call was not nested within a call from another application and PENDINTGYPE_NESTED means the outgoing call was nested within a call from another application.</param>
            <returns>
            This method can return the following values
            PENDINGMSG_CANCELCALL - Cancel the outgoing call
            PENDINGMSG_WAITNOPROCESS - Continue waiting for the reply, and do not dispatch the message unless it is a task-switching or window-activation message
            PENDINGMSG_WAITDEFPROCESS - Keyboard and mouse messages are no longer dispatched. However there are some cases where mouse and keyboard messages could cause the system to deadlock, and in these cases, mouse and keyboard messages are discarded. WM_PAINT messages are dispatched
            </returns>
        </member>
        <member name="T:NetOffice.Filtering.InterfaceInfo">
            <summary>
            http://msdn.microsoft.com/en-us/library/windows/desktop/ms683793%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="F:NetOffice.Filtering.InterfaceInfo.punk">
            <summary>
            A pointer to the IUnknown interface on the object
            </summary>
        </member>
        <member name="F:NetOffice.Filtering.InterfaceInfo.iid">
            <summary>
            The identifier of the requested interface
            </summary>
        </member>
        <member name="F:NetOffice.Filtering.InterfaceInfo.wMethod">
            <summary>
            The interface method
            </summary>
        </member>
        <member name="T:NetOffice.Filtering.RetryMessageFilterLogMode">
            <summary>
            Specify log behaviour for an RetryMessageFilter instance
            </summary>
        </member>
        <member name="F:NetOffice.Filtering.RetryMessageFilterLogMode.None">
            <summary>
            Disable Log
            </summary>
        </member>
        <member name="F:NetOffice.Filtering.RetryMessageFilterLogMode.RetryRejectedCall">
            <summary>
            Call DebugConsole.WriteLine in IMessageFilter.RetryRejectedCall
            </summary>
        </member>
        <member name="F:NetOffice.Filtering.RetryMessageFilterLogMode.MessagePending">
            <summary>
            Call DebugConsole.WriteLine in IMessageFilter.MessagePending
            </summary>
        </member>
        <member name="F:NetOffice.Filtering.RetryMessageFilterLogMode.Both">
            <summary>
            Call DebugConsole.WriteLine in IMessageFilter.RetryRejectedCall and IMessageFilter.MessagePending
            </summary>
        </member>
        <member name="T:NetOffice.Filtering.RetryMessageFilterMode">
            <summary>
            Specify the filter for an RetryMessageFilter instance
            </summary>
        </member>
        <member name="F:NetOffice.Filtering.RetryMessageFilterMode.Immediately">
            <summary>
            Try rejected call again immediately
            </summary>
        </member>
        <member name="F:NetOffice.Filtering.RetryMessageFilterMode.Delayed">
            <summary>
            Try rejected call again after few milliseconds
            </summary>
        </member>
        <member name="F:NetOffice.Filtering.RetryMessageFilterMode.None">
            <summary>
            Don't try rejected call again
            </summary>
        </member>
        <member name="T:NetOffice.Filtering.RetryMessageFilter">
            <summary>
            An IMessageFilter Implementation
            Learn more about: http://netoffice.codeplex.com/wikipage?title=Settings.MessageFilter_EN
            </summary>
        </member>
        <member name="M:NetOffice.Filtering.RetryMessageFilter.#ctor">
            <summary>
            Creates an instance of the class
            </summary>
        </member>
        <member name="M:NetOffice.Filtering.RetryMessageFilter.#ctor(System.Action{System.String})">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="onPropertyChanged">occurs when a property value changes</param>
        </member>
        <member name="P:NetOffice.Filtering.RetryMessageFilter.OnPropertyChanged">
            <summary>
            Occurs when a property value changes
            </summary>
        </member>
        <member name="P:NetOffice.Filtering.RetryMessageFilter.Enabled">
            <summary>
            Get or set the message filter is enabled
            </summary>
        </member>
        <member name="P:NetOffice.Filtering.RetryMessageFilter.RetryMode">
            <summary>
            Get or set retry options
            </summary>
        </member>
        <member name="P:NetOffice.Filtering.RetryMessageFilter.LogMode">
            <summary>
            Get or set log options
            </summary>
        </member>
        <member name="M:NetOffice.Filtering.RetryMessageFilter.ToString">
            <summary>
            Returns a System.String that represents the instance
            </summary>
            <returns>System.String</returns>
        </member>
        <member name="T:NetOffice.ICloneable`1">
            <summary>
            Supports cloning, which creates a new instance of a <see cref="T:NetOffice.ICOMObject"/> instance with the same parent and underlying com proxy
            as an existing <see cref="T:NetOffice.ICOMObject"/> instance. Instances shares the underlying com proxy with a reference counter based lifetime system.
            </summary>
            <typeparam name="T"><see cref="T:NetOffice.ICOMObject"/> implementation</typeparam>
            <exception cref="T:NetOffice.Exceptions.CloneException">An unexpected error occured. See inner exception(s) for details.</exception>
        </member>
        <member name="M:NetOffice.ICloneable`1.Clone">
            <summary>
            Creates a new <see cref="T:NetOffice.ICOMObject"/> that is a copy of the current instance
            </summary>
            <returns> A new <see cref="T:NetOffice.ICOMObject"/> that is a copy of this instance</returns>
        </member>
        <member name="T:NetOffice.ICOMObjectAvailability">
            <summary>
            Represents runtime availability services for a COM Proxy
            </summary>
        </member>
        <member name="M:NetOffice.ICOMObjectAvailability.EntityIsAvailable(System.String)">
            <summary>
            Returns information the proxy provides a method or property.
            Check want be made at runtime through IDispatch interface.
            </summary>
            <param name="name">name of the entity</param>
            <returns>true if available, otherwise false</returns>
            <exception cref="T:NetOffice.Exceptions.AvailabilityException">Unexpected error, see inner exception(s) for details.</exception>
        </member>
        <member name="M:NetOffice.ICOMObjectAvailability.EntityIsAvailable(System.String,NetOffice.Availability.SupportedEntityType)">
            <summary>
            Returns information the proxy provides a method or property.
            Check want be made at runtime through IDispatch interface.
            </summary>
            <param name="name">name of the entity</param>
            <param name="searchType">indicate the kind of entity the caller is looking for</param>
            <returns>true if available, otherwise false</returns>
            <exception cref="T:NetOffice.Exceptions.AvailabilityException">Unexpected error, see inner exception(s) for details.</exception>
        </member>
        <member name="T:NetOffice.ICOMProxyShareProvider">
            <summary>
            Handle access to shared underlying COM proxy. Not intended to be used outside of NetOffice infrastructure.
            </summary>
        </member>
        <member name="M:NetOffice.ICOMProxyShareProvider.GetProxyShare">
            <summary>
            Returns the inner proxy shared access handler.
            </summary>
            <returns>shared proxy</returns>
        </member>
        <member name="M:NetOffice.ICOMProxyShareProvider.SetProxyShare(NetOffice.COMProxyShare)">
            <summary>
            Set the inner proxy shared access handler.
            The method wants to acquire the shared object one time.
            </summary>
            <param name="share">shared proxy</param>
            <exception cref="T:System.ArgumentNullException">Throws when given share is null(Nothing in Visual Basic)</exception>
        </member>
        <member name="T:NetOffice.IO.IOPath">
            <summary>
            Wrapper around System.IO.Path to throw NetOfficeIOException if something failed
            </summary>
        </member>
        <member name="M:NetOffice.IO.IOPath.GetDirectoryName(System.String)">
            <summary>
             Returns the directory information for the specified path string
            </summary>
            <param name="path">the path of a file or directory</param>
            <returns>Directory information for path, or null if path denotes a root directory or is null. Returns System.String.Empty if path does not contain directory information</returns>
        </member>
        <member name="M:NetOffice.IO.IOPath.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string
            </summary>
            <param name="path">the path string from which to obtain the file name and extension</param>
            <returns>The characters after the last directory character in path</returns>
        </member>
        <member name="T:NetOffice.Loader.FactoryList">
            <summary>
            Contains loaded factory information
            </summary>
        </member>
        <member name="M:NetOffice.Loader.FactoryList.Contains(System.String)">
            <summary>
            Check for loaded assembly in factory list
            </summary>
            <param name="name">name of the assembly</param>
            <returns>true if exists, otherwise false</returns>
        </member>
        <member name="T:NetOffice.Loader.KnownKeyTokens">
            <summary>
            Contains embedded key token schema
            </summary>
        </member>
        <member name="M:NetOffice.Loader.KnownKeyTokens.ContainsNetOfficeAttribute(System.Reflection.Assembly)">
            <summary>
            Returns info the assembly is a NetOffice Api Assembly
            </summary>
            <param name="itemAssembly">assembly information</param>
            <returns>true if NetOffice assembly, otherwise false</returns>
        </member>
        <member name="M:NetOffice.Loader.KnownKeyTokens.ContainsNetOfficePublicKeyToken(System.Reflection.AssemblyName)">
            <summary>
            Returns info the assembly is a NetOffice Api Assembly with known keytoken
            </summary>
            <param name="itemName">assembly information</param>
            <returns>true if NetOffice assembly with token, otherwise false</returns>
        </member>
        <member name="M:NetOffice.Loader.PathBuilder.BuildLocalPathFromDependentAssembly(NetOffice.Loader.DependentAssembly)">
            <summary>
            Build path from dependent assembly
            </summary>
            <param name="assembly">assembly to resolve</param>
            <returns>resolved path</returns>
        </member>
        <member name="M:NetOffice.Loader.PathBuilder.BuildLocalPathFromAssemblyFileName(NetOffice.Core,System.String)">
            <summary>
            Build path from assembly file name
            </summary>
            <param name="factory">factory to use codebase directory from</param>
            <param name="assemblyName">assembly name like abc.dll</param>
            <returns>resolved path</returns>
        </member>
        <member name="T:NetOffice.Loader.CurrentAppDomain">
            <summary>
            Encapsulates current AppDomain with loader services and exception tolerant methods.
            </summary>
        </member>
        <member name="M:NetOffice.Loader.CurrentAppDomain.#ctor(NetOffice.Core)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="owner">owner core</param>
        </member>
        <member name="P:NetOffice.Loader.CurrentAppDomain.Owner">
            <summary>
            Owner Core
            </summary>
        </member>
        <member name="P:NetOffice.Loader.CurrentAppDomain.AssemblyNames">
            <summary>
            Core should load these assemblies while initialize if files exists in current codebase 
            </summary>
        </member>
        <member name="P:NetOffice.Loader.CurrentAppDomain.AssemblyVersion">
            <summary>
            Current Assembly Version
            </summary>
        </member>
        <member name="M:NetOffice.Loader.CurrentAppDomain.GetAssemblies">
            <summary>
            Returns all loaded assemblies in current appdomain
            </summary>
            <returns>loaded assemblies</returns>
        </member>
        <member name="M:NetOffice.Loader.CurrentAppDomain.Load(System.String)">
            <summary>
            Try load an assembly
            </summary>
            <param name="fileName">full qualified file path</param>
            <returns>Assembly instance or null</returns>
        </member>
        <member name="M:NetOffice.Loader.CurrentAppDomain.Load(System.Reflection.AssemblyName)">
            <summary>
            Try load an assembly
            </summary>
            <param name="name">assembly reference name</param>
            <returns>Assembly instance or null</returns>
        </member>
        <member name="M:NetOffice.Loader.CurrentAppDomain.ValidateVersion(System.String)">
            <summary>
            Try to validate argument file version match with current NetOffice version.
            The method does nothing if argument file not exists.
            </summary>
            <param name="fileName">target file to load</param>.resources
            <returns>true if file exists in current NetOffice version</returns>
        </member>
        <member name="M:NetOffice.Loader.CurrentAppDomain.ValidateVersion(System.Reflection.AssemblyName)">
            <summary>
            Try to validate argument file version match with current NetOffice version. 
            </summary>
            <param name="name">given assembly specification</param>
            <returns>true if file exists in current NetOffice version</returns>
        </member>
        <member name="M:NetOffice.Loader.CurrentAppDomain.TryLoadAssemblies(NetOffice.Core)">
            <summary>
            Try load known assembly names
            </summary>
            <param name="factory">core to use</param>
        </member>
        <member name="M:NetOffice.Loader.CurrentAppDomain.KeyTokens(NetOffice.Core)">
            <summary>
            Returns embedded keytoken schema
            </summary>
            <param name="factory">factory type to use</param>
            <returns>keytoken line array</returns>
        </member>
        <member name="M:NetOffice.Loader.CurrentAppDomain.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Occurs when the resolution of an assembly fails.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="args">A System.ResolveEventArgs that contains the event data</param>
            <returns>The System.Reflection.Assembly that resolves the type, assembly, or resource or null if the assembly cannot be resolved</returns>
        </member>
        <member name="T:NetOffice.Loader.DependentAssembly">
            <summary>
            Dependent assembly description
            </summary>
        </member>
        <member name="M:NetOffice.Loader.DependentAssembly.#ctor(System.String,System.Reflection.Assembly)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="name">Name of the dependent assembly</param>
            <param name="parentAssembly">assembly that is required from</param>
        </member>
        <member name="F:NetOffice.Loader.DependentAssembly.Name">
            <summary>
            Name of the dependent assembly
            </summary>
        </member>
        <member name="F:NetOffice.Loader.DependentAssembly.ParentAssembly">
            <summary>
            Assembly that is required from
            </summary>
        </member>
        <member name="T:NetOffice.Resolver.InstanceTypeNameResolver">
            <summary>
            Spend information about <see cref="T:NetOffice.ICOMObject"/> instances
            </summary>
        </member>
        <member name="M:NetOffice.Resolver.InstanceTypeNameResolver.GetComponentName(NetOffice.ICOMObject)">
            <summary>
            Return the component root namespace of an <see cref="T:NetOffice.ICOMObject"/> instance
            </summary>
            <param name="instance">target instance</param>
            <returns>root namespace</returns>
        </member>
        <member name="M:NetOffice.Resolver.InstanceTypeNameResolver.GetFriendlyInstanceName(NetOffice.ICOMObject)">
            <summary>
            Return a human readable office-like instance type description of an <see cref="T:NetOffice.ICOMObject"/> instance
            </summary>
            <param name="instance">target instance</param>
            <returns>type description</returns>
        </member>
        <member name="T:NetOffice.Resolver.UnderlyingTypeNameResolver">
            <summary>
            Spend information about the underlying proxy of an <see cref="T:NetOffice.ICOMObject"/> instance
            </summary>
        </member>
        <member name="M:NetOffice.Resolver.UnderlyingTypeNameResolver.GetComponentName(NetOffice.ICOMObject)">
            <summary>
            Returns the name of the hosting type library
            </summary>
            <param name="instance">target instance</param>
            <returns>library name or empty if its failed to receive</returns>
        </member>
        <member name="M:NetOffice.Resolver.UnderlyingTypeNameResolver.GetClassName(NetOffice.ICOMObject)">
            <summary>
            Returns the class name of the underlying proxy
            </summary>
            <param name="instance">target instance</param>
            <returns>class name or empty if its failed to receive</returns>
        </member>
        <member name="M:NetOffice.Resolver.UnderlyingTypeNameResolver.GetFriendlyClassName(NetOffice.ICOMObject,System.String)">
            <summary>
            Returns a human readable office-like name of underlying proxy class
            </summary>
            <param name="instance">target instance</param>
            <param name="className">cached or default class name - want return if not null</param>
            <returns>friendly class name</returns>
        </member>
        <member name="M:NetOffice.Resolver.UnderlyingTypeNameResolver.GetFriendlyClassName(NetOffice.ICOMObject)">
            <summary>
            Returns a human readable office-like name of underlying proxy class
            </summary>
            <param name="instance">target instance</param>
            <returns>friendly class name</returns>
        </member>
        <member name="T:NetOffice.Resolver.UriResolver">
            <summary>
            Uri Conversion methods because System.Uri doesn't handle special characters as well
            </summary>
        </member>
        <member name="M:NetOffice.Resolver.UriResolver.ResolveLocalPath(System.String)">
            <summary>
            Convert file: path to local
            </summary>
            <param name="path">target path as any</param>
            <returns>converted path</returns>
        </member>
        <member name="M:NetOffice.StringEx.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            Returns a value indicating whether a specified substring occurs within this string.
            This method uses case insensitive comparison.</summary>
            <param name="text">The original string.</param>
            <param name="value">The string to seek.</param>
        </member>
        <member name="T:NetOffice.Tools.DisabledItem">
            <summary>
            Represents information about a disabled add-in in a Microsoft Office application.
            </summary>
            <remarks>
            Use the <see cref="!:OfficeResiliency.Parse()"/> method to convert the binary
            data from the Resiliency\DisabledItems registry keys into the <see cref="T:NetOffice.Tools.DisabledItem"/> object.
            </remarks>
        </member>
        <member name="T:NetOffice.Tools.DisabledItemType">
            <summary>
            Represents the type of structure stored in the Resiliency registry keys.
            </summary>
            <remarks>
            The Resiliency registry key contains a list of DisabledItems. Information
            about disabled items (eg. add-ins) is stored as binary data.
            The first <see cref="T:System.Int32"/> value represents the type of the
            data structure.
            
            For regular add-ins (COM, .NET, NetOffice or VSTO) the usual disabled item
            type value would be either AddInByFilename (1) or AddInByDEPFilename (6).
            </remarks>
        </member>
        <member name="T:NetOffice.Tools.DontRegisterAddinAttribute">
            <summary>
            Don't register addin into the Microsoft Office application.
            The addin still will be registered as COM component from callers like RegAsm
            but it won't create or remove the Registry keys to bring the component into Office.
            (For troubleshooting purposes)
            </summary>
        </member>
        <member name="T:NetOffice.Tools.ForceInitializeAttribute">
            <summary>
            COMAddin want initialize Factory Core while addin startup, otherwise the Factory Core want load at first-use.
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ForceInitializeAttribute.EnableMoreDebugOutput">
            <summary>
            Enable Settings.EnableDebugOutput before initialize
            </summary>
        </member>
        <member name="M:NetOffice.Tools.ForceInitializeAttribute.#ctor">
            <summary>
            Creates an instance of the class
            </summary>
        </member>
        <member name="M:NetOffice.Tools.ForceInitializeAttribute.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="enableMoreDebugOutput">enable Settings.EnableDebugOutput before initialize</param>
        </member>
        <member name="T:NetOffice.Tools.ICOMAddin">
            <summary>
            Represents an addin implementation trough IDTExtensibility2
            </summary>
        </member>
        <member name="T:NetOffice.Tools.IDisposableState">
            <summary>
            Represents an IDisposable state info instance. Dispose call do nothing if instance is already disposed
            </summary>
        </member>
        <member name="P:NetOffice.Tools.IDisposableState.IsDisposed">
            <summary>
            Returns information the instance is already disposed
            </summary>
        </member>
        <member name="T:NetOffice.Tools.LockbackAttribute">
            <summary>
            COMAddin Register method want create Lockback Bypass Key - see: http://support.microsoft.com/kb/948461
            </summary>
        </member>
        <member name="M:NetOffice.Tools.LockbackAttribute.CreateKey(System.Boolean)">
            <summary>
            Creates Office .NET Framework Lockback Bypass Key
            </summary>
            <param name="isSystem">ClassesRoot want used or CurrentUser</param>
            <returns>true if created otherwise false</returns>
        </member>
        <member name="T:NetOffice.Tools.CodebaseAttribute">
            <summary>
            COMAddin Register/Unregister methods want add/remove "Codebase" registry key.
            A missing Codebase attribute means a Codebase(true) attribute by default for backward compatibility.
            </summary>
        </member>
        <member name="F:NetOffice.Tools.CodebaseAttribute.Value">
            <summary>
            Create/Delete Codebase entry. True by default
            </summary>
        </member>
        <member name="M:NetOffice.Tools.CodebaseAttribute.#ctor">
            <summary>
            Creates an instance of the attribute
            </summary>
        </member>
        <member name="M:NetOffice.Tools.CodebaseAttribute.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="value">create entry</param>
        </member>
        <member name="M:NetOffice.Tools.CodebaseAttribute.DeleteValue(System.Guid,System.Boolean,System.String,System.Boolean)">
            <summary>
            Remove registry codebase value
            </summary>
            <param name="guid">addin id</param>
             <param name="isSystem">delete in ClassesRoot otherwise CurrentUser</param>
            <param name="assemblyVersion">assembly version</param>
            <param name="throwExceptionOnError">throw exception on error</param>
            <returns>true if removed otherwise false</returns>
        </member>
        <member name="M:NetOffice.Tools.CodebaseAttribute.CreateValue(System.Guid,System.Boolean,System.String,System.String)">
            <summary>
            Create registry codebase value
            </summary>
            <param name="guid">addin id</param>
             <param name="isSystem">delete in ClassesRoot otherwise CurrentUser</param>
            <param name="assemblyVersion">assembly version</param>
            <param name="codebase">given codebase path</param>        
        </member>
        <member name="M:NetOffice.Tools.CodebaseAttribute.TryGetKey(System.Guid,System.Boolean,System.String)">
            <summary>
            Try to open codebase key
            </summary>
            <param name="guid">addin id</param>
            <param name="isSystem">create in ClassesRoot otherwise CurrentUser</param>
            <param name="assemblyVersion">assembly version</param>
            <returns>key or null if not found</returns>
        </member>
        <member name="M:NetOffice.Tools.CodebaseAttribute.CreateKey(System.Guid,System.Boolean,System.String)">
            <summary>
            Create or open registry codebase key
            </summary>
            <param name="guid">addin id</param>
            <param name="isSystem">create in ClassesRoot otherwise CurrentUser</param>
            <param name="assemblyVersion">assembly version</param>
            <returns>key</returns>
        </member>
        <member name="T:NetOffice.Tools.Native.Bridge.CdeclHandle">
            <summary>
            Represents a handle to an unmanaged library.
            CdeclHandle does not implement any thread-safe operations.
            </summary>
        </member>
        <member name="M:NetOffice.Tools.Native.Bridge.CdeclHandle.#ctor(System.IntPtr,System.String,System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="underlying">underlying module handle</param>
            <param name="folder">folder that contains the library</param>
            <param name="name">name of the library</param>
            <exception cref="T:System.ArgumentOutOfRangeException">underlying is empty</exception>
            <exception cref="T:System.ArgumentNullException">name is null or empty</exception>
        </member>
        <member name="P:NetOffice.Tools.Native.Bridge.CdeclHandle.HandleIsZero">
            <summary>
            Underlying Module Handle is empty
            </summary>
        </member>
        <member name="P:NetOffice.Tools.Native.Bridge.CdeclHandle.Name">
            <summary>
            Name of the Library
            </summary>
        </member>
        <member name="P:NetOffice.Tools.Native.Bridge.CdeclHandle.Folder">
            <summary>
            Folder that contains the library
            </summary>
        </member>
        <member name="P:NetOffice.Tools.Native.Bridge.CdeclHandle.Underlying">
            <summary>
            Underlying Module Handle
            </summary>
        </member>
        <member name="P:NetOffice.Tools.Native.Bridge.CdeclHandle.Functions">
            <summary>
            Delegate Cache
            </summary>
        </member>
        <member name="M:NetOffice.Tools.Native.Bridge.CdeclHandle.GetDelegateForFunctionPointer``1(System.String)">
            <summary>
            Returns a function pointer by name. The method is caching the operation.
            </summary>
            <typeparam name="T">target delegate</typeparam>
            <param name="name">name of the method</param>
            <returns>delegate to unmanaged method</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Unable to get proc address or function pointer</exception>
            <exception cref="T:System.ArgumentNullException">an argument is null or empty</exception>
            <exception cref="T:System.ObjectDisposedException">instance is already disposed</exception>
        </member>
        <member name="M:NetOffice.Tools.Native.Bridge.CdeclHandle.GetDelegateForFunctionPointer(System.String,System.Type)">
            <summary>
            Returns a function pointer by name. The method is caching the operation.
            </summary>
            <param name="name">name of the method</param>
            <param name="type">target delegate type</param>
            <returns>delegate to unmanaged method</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Unable to get proc address or function pointer</exception>
            <exception cref="T:System.ArgumentNullException">an argument is null or empty</exception>
            <exception cref="T:System.ObjectDisposedException">instance is already disposed</exception>
        </member>
        <member name="M:NetOffice.Tools.Native.Bridge.CdeclHandle.LoadLibrary(System.String,System.Version)">
            <summary>
            Loads an unmanaged library from filesystem
            </summary>
            <param name="fullFileName">full qualified name of the library file</param>
            <param name="fileVersion">optional file version to check major and minor</param>
            <returns>handle to library</returns>
            <exception cref="T:System.IO.FileNotFoundException">File is missing</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Unable to load library</exception>
            <exception cref="T:System.IO.FileLoadException">A version mismatch occurs</exception>
            <exception cref="T:System.ArgumentNullException">fullFileName is null or empty</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeIOException">I/O related error</exception>
        </member>
        <member name="M:NetOffice.Tools.Native.Bridge.CdeclHandle.LoadLibrary``1(System.String,System.Version)">
            <summary>
            Loads an unmanaged library from filesystem
            </summary>
            <typeparam name="T">codebase type</typeparam>
            <param name="fileName">name(incl. extension) without path of the library</param>
            <param name="fileVersion">optional file version to check major and minor</param>
            <returns>handle to library</returns>
            <exception cref="T:System.IO.FileNotFoundException">File is missing</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Unable to load library</exception>
            <exception cref="T:System.IO.FileLoadException">A version mismatch occurs</exception>
            <exception cref="T:System.ArgumentNullException">a non-optional argument is null or empty</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeIOException">I/O related error</exception>
        </member>
        <member name="M:NetOffice.Tools.Native.Bridge.CdeclHandle.LoadLibrary(System.Type,System.String,System.Version)">
            <summary>
            Loads an unmanaged library from filesystem
            </summary>
            <param name="codebaseType">type to analyze directory/codebase from</param>
            <param name="fileName">name(incl. extension) without path of the library</param>
            <param name="fileVersion">optional file version to check major and minor</param>
            <returns>handle to library</returns>
            <exception cref="T:System.IO.FileNotFoundException">File is missing</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Unable to load library</exception>
            <exception cref="T:System.IO.FileLoadException">A version mismatch occurs</exception>
            <exception cref="T:System.ArgumentNullException">a non-optional argument is null or empty</exception>
            <exception cref="T:NetOffice.Exceptions.NetOfficeIOException">I/O related error</exception>
        </member>
        <member name="M:NetOffice.Tools.Native.Bridge.CdeclHandle.ClearCache">
            <summary>
            Clear Function Pointer Delegate Cache
            </summary>
        </member>
        <member name="M:NetOffice.Tools.Native.Bridge.CdeclHandle.IsCachedFunction(System.Delegate)">
            <summary>
            Lookup inside delegate cache to determine the given function is cached by the instance
            </summary>
            <param name="function">given function as any</param>
            <returns>true if function is cached and instance is not disposed, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException">function is null</exception>
        </member>
        <member name="M:NetOffice.Tools.Native.Bridge.CdeclHandle.GetUnderlyingHandle">
            <summary>
            Returns the underlying module handle
            </summary>
            <returns>native win32 module handle</returns>
        </member>
        <member name="M:NetOffice.Tools.Native.Bridge.CdeclHandle.Dispose">
            <summary>
            Free the library and clears delegate cache
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">Unable to free library</exception>
        </member>
        <member name="M:NetOffice.Tools.Native.Bridge.CdeclHandle.ToString">
            <summary>
            Returns a System.String that represents the instance
            </summary>
            <returns>System.String</returns>
        </member>
        <member name="T:NetOffice.Tools.Native.Bridge.Interop">
            <summary>
            Interop kernel32 Dll Imports
            </summary>
        </member>
        <member name="M:NetOffice.Tools.Native.Bridge.Interop.LoadLibrary(System.String)">
            <summary>
            Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.
            </summary>
            <param name="lpFileName">The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file)</param>
            <returns>If the function succeeds, the return value is a handle to the module. If the function fails, the return value is NULL. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:NetOffice.Tools.Native.Bridge.Interop.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).
            </summary>
            <param name="hModule">A handle to the DLL module that contains the function or variable.</param>
            <param name="lpProcName">The function or variable name, or the function's ordinal value. If this parameter is an ordinal value, it must be in the low-order word; the high-order word must be zero.</param>
            <returns>If the function succeeds, the return value is the address of the exported function or variable. If the function fails, the return value is NULL. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:NetOffice.Tools.Native.Bridge.Interop.FreeLibrary(System.IntPtr)">
            <summary>
            Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count. When the reference count reaches zero, the module is unloaded from the address space of the calling process and the handle is no longer valid.
            </summary>
            <param name="hModule">A handle to the loaded library module.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call the GetLastError function.</returns>
        </member>
        <member name="T:NetOffice.Tools.Native.IDTExtensibility2">
            <summary>
            The well known Extensibility
            </summary>
        </member>
        <member name="M:NetOffice.Tools.Native.IDTExtensibility2.OnConnection(System.Object,NetOffice.Tools.ext_ConnectMode,System.Object,System.Array@)">
            <summary>
            Occurs whenever an add-in is loaded into MS-Office
            </summary>
            <param name="Application">A reference to an instance of the office application</param>
            <param name="ConnectMode">An ext_ConnectMode enumeration value that indicates the way the add-in was loaded into MS-Office</param>
            <param name="AddInInst">An AddIn reference to the add-in's own instance. This is stored for later use, such as determining the parent collection for the add-in</param>
            <param name="custom">An empty array that you can use to pass host-specific data for use in the add-in</param>
        </member>
        <member name="M:NetOffice.Tools.Native.IDTExtensibility2.OnDisconnection(NetOffice.Tools.ext_DisconnectMode,System.Array@)">
            <summary>
            Occurs whenever an add-in is unloaded from MS Office
            </summary>
            <param name="RemoveMode">An ext_DisconnectMode enumeration value that informs an add-in why it was unloaded.</param>
            <param name="custom">An empty array that you can use to pass host-specific data for use after the add-in unloads</param>
        </member>
        <member name="M:NetOffice.Tools.Native.IDTExtensibility2.OnAddInsUpdate(System.Array@)">
            <summary>
            Occurs whenever an add-in is loaded or unloaded from MS Office
            </summary>
            <param name="custom">An empty array that you can use to pass host-specific data for use in the add-in</param>
        </member>
        <member name="M:NetOffice.Tools.Native.IDTExtensibility2.OnStartupComplete(System.Array@)">
            <summary>
             Occurs whenever an add-in, which is set to load when MS Office starts, loads.
            </summary>
            <param name="custom">An empty array that you can use to pass host-specific data for use when the add-in loads</param>
        </member>
        <member name="M:NetOffice.Tools.Native.IDTExtensibility2.OnBeginShutdown(System.Array@)">
            <summary>
            Occurs whenever MS Office shuts down while an add-in is running
            </summary>
            <param name="custom">An empty array that you can use to pass host-specific data for use in the add-in</param>
        </member>
        <member name="T:NetOffice.Tools.OfficeRegisterKeyState">
            <summary>
            RegAddin.exe want give the information that the necessary Office registry key(s) was already
            created from RegAddin or the addin need to do this by himself. (COMAddin base class want do this)
            </summary>
        </member>
        <member name="F:NetOffice.Tools.OfficeRegisterKeyState.NeedToCreate">
            <summary>
            Registry key want be create in the addin
            </summary>
        </member>
        <member name="F:NetOffice.Tools.OfficeRegisterKeyState.AlreadyCreated">
            <summary>
            Registry key is already created
            </summary>
        </member>
        <member name="M:NetOffice.Tools.OfficeResiliency.Parse(System.Byte[])">
            <summary>
            Method for converting the binary data from the Resiliency\DisabledItems
            registry keys into the <see cref="T:NetOffice.Tools.DisabledItem"/> object.
            </summary>
            <param name="rawData">Binary data from the DisabledItems registry key.</param>
            <returns></returns>
            <remarks>
            DisabledItems registry keys are stored at <c>HKEY_CURRENT_USER\Software\Microsoft\Office\[OfficeAppVersion]\[OfficeAppName]\Resiliency\DisabledItems</c>
            as subkeys.
            The [OfficeAppVersion] is MS Office release version like <c>15.0</c> or <c>16.0</c>.
            The [OfficeAppName] is the name of a MS Office application like <c>Word</c>, <c>Excel</c>, <c>PowerPoint</c>, <c>Outlook</c> and others.
            </remarks>
        </member>
        <member name="T:NetOffice.Tools.OfficeUnRegisterKeyState">
            <summary>
            RegAddin.exe want give the information that the necessary Office registry key(s) was already
            deleted from RegAddin or the addin need to do this by himself. (COMAddin base class want do this)
            </summary>
        </member>
        <member name="F:NetOffice.Tools.OfficeUnRegisterKeyState.NeedToDelete">
            <summary>
            Registry key want be delete in the addin
            </summary>
        </member>
        <member name="F:NetOffice.Tools.OfficeUnRegisterKeyState.AlreadyDeleted">
            <summary>
            Registry key is already deleted
            </summary>
        </member>
        <member name="T:NetOffice.Tools.OnErrorHandler">
            <summary>
            Custom error handler
            </summary>
            <param name="methodKind">origin method where the error comes from</param>
            <param name="exception">occured exception</param>
        </member>
        <member name="T:NetOffice.Tools.ProgrammableAttribute">
            <summary>
            COMAddin Register/Unregister methods want add/remove "Programmable" registry key
            </summary>
        </member>
        <member name="M:NetOffice.Tools.ProgrammableAttribute.DeleteKeys(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Remove registry programmable keys
            </summary>
            <param name="guid">addin id</param>
            <param name="isSystem">delete in ClassesRoot otherwise CurrentUser</param>
            <param name="throwExceptionOnError">throw exception on error</param>
            <returns>true if removed otherwise false</returns>
        </member>
        <member name="M:NetOffice.Tools.ProgrammableAttribute.CreateKeys(System.Guid,System.Boolean)">
            <summary>
            Create registry programmable keys
            </summary>
            <param name="guid">addin id</param>
            <param name="isSystem">create in ClassesRoot otherwise CurrentUser</param>
        </member>
        <member name="T:NetOffice.Tools.RegExport">
            <summary>
            Registry Export Definition
            </summary>
        </member>
        <member name="M:NetOffice.Tools.RegExport.Add(System.String)">
            <summary>
             Add a new key to the instance
            </summary>
            <param name="key">target unique key</param>
            <returns>value list</returns>
        </member>
        <member name="M:NetOffice.Tools.RegExport.Add(System.String,System.Collections.Generic.IEnumerable{NetOffice.Tools.RegExportValue})">
            <summary>
            Add a new key to the instance
            </summary>
            <param name="key">target unique key</param>
            <param name="values">target values</param>
            <returns>value list</returns>
        </member>
        <member name="T:NetOffice.Tools.RegExportValue">
            <summary>
            Represents a registry value
            </summary>
        </member>
        <member name="M:NetOffice.Tools.RegExportValue.#ctor">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="M:NetOffice.Tools.RegExportValue.#ctor(System.String,Microsoft.Win32.RegistryValueKind,System.Object)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="name">name of the value</param>
            <param name="kind">target value kind</param>
            <param name="value">target value</param>
        </member>
        <member name="M:NetOffice.Tools.RegExportValue.#ctor(System.Object)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="value">target value</param>
        </member>
        <member name="M:NetOffice.Tools.RegExportValue.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="name">name of the value</param>
            <param name="value">target value</param>
        </member>
        <member name="P:NetOffice.Tools.RegExportValue.Name">
            <summary>
            Value name, can be null for(default) value
            </summary>
        </member>
        <member name="P:NetOffice.Tools.RegExportValue.Kind">
            <summary>
            Value Kind
            </summary>
        </member>
        <member name="P:NetOffice.Tools.RegExportValue.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:NetOffice.Tools.RegExportFunctionAttribute">
            <summary>
            Mark a static method as registry export handler.
            RegAddin.exe want call this method when an .reg file export is requested.
            The method can give additional registry information to the export.
            The method need the following signature: static RegExport CreateRegistryExport(InstallScope scope);
            </summary>
        </member>
        <member name="T:NetOffice.Tools.RegExportHandler">
            <summary>
            Handle COMAddin register export process
            </summary>
        </member>
        <member name="M:NetOffice.Tools.RegExportHandler.ProceedUser(System.Type,System.String[],NetOffice.Tools.OfficeRegisterKeyState)">
            <summary>
            Do register export process per user
            </summary>
            <param name="type">addin type</param>
            <param name="addinOfficeRegistryKey">office application registry path</param>
            <param name="keyState">the office registry key need to create</param>
        </member>
        <member name="M:NetOffice.Tools.RegExportHandler.Proceed(System.Type,System.String[],NetOffice.Tools.InstallScope,NetOffice.Tools.OfficeRegisterKeyState)">
            <summary>
            Do register export process
            </summary>
            <param name="type">addin type</param>
            <param name="addinOfficeRegistryKey">office application registry path</param>
            <param name="scope">the current installation scope</param>
            <param name="keyState">the office registry key need to create</param>
        </member>
        <member name="T:NetOffice.Tools.RegisterErrorHandler">
            <summary>
            Handle register errors
            </summary>
        </member>
        <member name="M:NetOffice.Tools.RegisterErrorHandler.RaiseStaticErrorHandlerMethod(System.Type,NetOffice.Tools.RegisterErrorMethodKind,System.Exception)">
            <summary>
            Checks for a static method, signed with the ErrorHandlerAttribute and call them if its available
            </summary>
            <param name="type">type information for the class with static method </param>
            <param name="methodKind">origin method where the error comes from</param>
            <param name="exception">occured exception</param>
            <returns>true if error is handled by derived method and we can proceed</returns>
        </member>
        <member name="T:NetOffice.Tools.COMAddinRegisterHandler">
            <summary>
            Handle COMAddin register process
            </summary>
        </member>
        <member name="M:NetOffice.Tools.COMAddinRegisterHandler.ProceedUser(System.Type,System.String[],NetOffice.Tools.OfficeRegisterKeyState)">
            <summary>
            Do register process per user installation
            </summary>
            <param name="type">addin type</param>
            <param name="addinOfficeRegistryKey">office application registry path</param>
            <param name="keyState">the office registry key need to create</param>
        </member>
        <member name="M:NetOffice.Tools.COMAddinRegisterHandler.Proceed(System.Type,System.String[],NetOffice.Tools.InstallScope,NetOffice.Tools.OfficeRegisterKeyState)">
            <summary>
            Do register process 
            </summary>
            <param name="type">addin type</param>
            <param name="addinOfficeRegistryKey">office application registry path</param>
            <param name="scope">the current installation scope</param>
            <param name="keyState">the office registry key need to create</param>
        </member>
        <member name="M:NetOffice.Tools.COMAddinRegisterHandler.CallDerivedRegisterMethod(System.Reflection.MethodInfo,System.Type,NetOffice.Tools.RegisterCall,NetOffice.Tools.InstallScope,NetOffice.Tools.OfficeRegisterKeyState)">
            <summary>
            Derived Register Call Helper
            </summary>
            <param name="registerMethod">the method to call</param>
            <param name="type">type for derived class</param>
            <param name="callType">kind of call, defined in Register attribute</param>
            <param name="scope">current register scope</param>
            <param name="keyState">office reg key state</param>
            <returns>true if no exception occurs, otherwise false</returns>
        </member>
        <member name="T:NetOffice.Tools.InstallScope">
            <summary>
            The current install/uninstall scope
            </summary>
        </member>
        <member name="F:NetOffice.Tools.InstallScope.System">
            <summary>
            Whole system
            </summary>
        </member>
        <member name="F:NetOffice.Tools.InstallScope.User">
            <summary>
            Current User
            </summary>
        </member>
        <member name="T:NetOffice.Tools.TimestampAttribute">
            <summary>
            Create a time stamp in host application add-in registry key when registering the add-in.
            </summary>
        </member>
        <member name="M:NetOffice.Tools.TimestampAttribute.#ctor">
            <summary>
            Create a time stamp in host application add-in registry key.
            </summary>
        </member>
        <member name="T:NetOffice.Tools.COMAddinUnRegisterHandler">
            <summary>
            Handle <see cref="T:NetOffice.Tools.COMAddinBase"/> unregistration process.
            </summary>
        </member>
        <member name="M:NetOffice.Tools.COMAddinUnRegisterHandler.ProceedUser(System.Type,System.String[],NetOffice.Tools.OfficeUnRegisterKeyState)">
            <summary>
            Do unregister process per user uninstallation
            </summary>
            <param name="type">addin type</param>
            <param name="addinOfficeRegistryKey">office application registry path</param>
            <param name="keyState">the office registry key need to delete</param>
        </member>
        <member name="M:NetOffice.Tools.COMAddinUnRegisterHandler.Proceed(System.Type,System.String[],NetOffice.Tools.InstallScope,NetOffice.Tools.OfficeUnRegisterKeyState)">
            <summary>
            Do unregister process 
            </summary>
            <param name="type">addin type</param>
            <param name="addinOfficeRegistryKey">office application registry path</param>
            <param name="scope">the current installation scope</param>
            <param name="keyState">the office registry key need to delete</param>
        </member>
        <member name="M:NetOffice.Tools.COMAddinUnRegisterHandler.CallDerivedUnRegisterMethod(System.Reflection.MethodInfo,System.Type,NetOffice.Tools.RegisterCall,NetOffice.Tools.InstallScope,NetOffice.Tools.OfficeUnRegisterKeyState)">
            <summary>
            Derived UnRegister Call Helper
            </summary>
            <param name="registerMethod">the method to call</param>
            <param name="type">type for derived class</param>
            <param name="callType">kind of call, defined in Register attribute</param>
            <param name="scope">current register scope</param>
            <param name="keyState">office reg key state</param>
            <returns>true if no exception occurs, otherwise false</returns>
        </member>
        <member name="T:NetOffice.Tools.AttributeReflector">
            <summary>
            Provides Attribute reflection utils
            </summary>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetRegisterErrorMethod(System.Type)">
            <summary>
            Analyze first parameter and returns the register error method delegate if exists
            </summary>
            <param name="type">Type of target addin</param>
            <returns>delegate or null</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetRegisterErrorAttribute(System.Type,System.Reflection.MethodInfo@,NetOffice.Tools.RegisterErrorHandlerAttribute@)">
            <summary>
            Looks for a method with the RegisterErrorHandlerFunctionAttribute
            </summary>
            <param name="type">the type you want looking for the method</param>
            <param name="method">the method when its found</param>
            <param name="attribute">the attribute when its found</param>
            <returns>true when the method was found</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetRegExportAttribute(System.Type,System.Reflection.MethodInfo@,NetOffice.Tools.RegExportFunctionAttribute@)">
            <summary>
             Looks for a static method with the RegExportFunctionAttribute
            </summary>
            <param name="type">the type you want looking for the method</param>
            <param name="method">the method when its found</param>
            <param name="attribute">the attribute when its found</param>
            <returns>true when the method was found</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetRegisterAttribute(System.Type,System.Reflection.MethodInfo@,NetOffice.Tools.RegisterFunctionAttribute@)">
            <summary>
             Looks for a static method with the RegisterFunctionAttribute
            </summary>
            <param name="type">the type you want looking for the method</param>
            <param name="method">the method when its found</param>
            <param name="attribute">the attribute when its found</param>
            <returns>true when the method was found</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetUnRegisterAttribute(System.Type,System.Reflection.MethodInfo@,NetOffice.Tools.UnRegisterFunctionAttribute@)">
            <summary>
            Looks for a method with the UnRegisterFunctionAttribute
            </summary>
            <param name="type">the type you want looking for the method</param>
            <param name="method">the method when its found</param>
            <param name="attribute">the attribute when its found</param>
            <returns>true when the method was found</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetRibbonAttribute(System.Type,System.String)">
            <summary>
            Looks for the CustomUIAttribute
            </summary>
            <param name="type">the type you want looking for the attribute</param>
            <param name="ribbonID">given ribbon id from Office</param>
            <returns>CustomUIAttribute or null</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetCustomPaneAttribute(System.Type)">
            <summary>
            Looks for the CustomPaneAttribute
            </summary>
            <param name="type">the type you want looking for the attribute</param>
            <returns>CustomPaneAttribute or null</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetCustomPaneAttributes(System.Type)">
            <summary>
            Looks the CustomPaneAttributes
            </summary>
            <param name="type">the type you want looking for the attribute</param>
            <returns>CustomPaneAttribute[] instance</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetTimestampAttribute(System.Type)">
            <summary>
            Looks for the TimestampAttribute
            </summary>
            <param name="type">the type you want looking for the attribute</param>
            <returns>TimestampAttribute or null</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetProgrammableAttribute(System.Type)">
            <summary>
            Looks for the ProgrammableAttribute
            </summary>
            <param name="type">the type you want looking for the attribute</param>
            <returns>ProgrammableAttribute or null</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetLockbackAttribute(System.Type)">
            <summary>
            Looks for the LockbackAttribute
            </summary>
            <param name="type">the type you want looking for the attribute</param>
            <returns>LockbackAttribute or null</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetCodebaseAttribute(System.Type)">
            <summary>
            Looks for the CodebaseAttribute
            </summary>
            <param name="type">the type you want looking for the attribute</param>
            <returns>CodebaseAttribute or default attribute</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetForceInitializeAttribute(System.Type)">
            <summary>
            Looks for the ForceInitializeAttribute
            </summary>
            <param name="type">the type you want looking for the attribute</param>
            <returns>ForceInitializeAttribute or null</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetGuidAttribute(System.Type)">
            <summary>
            Looks for the GuidAttribute. Throws an exception if not found
            </summary>
            <param name="type">the type you want looking for the attribute</param>
            <returns>GuidAttribute</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetProgIDAttribute(System.Type)">
            <summary>
            Looks for the ProgIdAttribute. Throws an exception if not found
            </summary>
            <param name="type">the type you want looking for the attribute</param>
            <returns>ProgIdAttribute</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetProgIDAttribute(System.Type,System.Boolean)">
            <summary>
            Looks for the ProgIdAttribute. Throws an exception if not found
            </summary>
            <param name="type">the type you want looking for the attribute</param>
            <param name="throwException">throw exception if not found</param>
            <returns>ProgIdAttribute</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetTweakAttribute(System.Type)">
            Looks for the TweakAttribute.
            <summary>
            <param name="type">the type you want looking for the attribute</param>
            </summary>
            <returns>TweakAttribute</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetRegistryLocationAttribute(System.Type)">
            <summary>
            Looks for the RegistryLocationAttribute. Returns a default RegistryLocationAttribute(InstallScope) if not found
            </summary>
            <param name="type">the type you want looking for the attribute</param>
            <returns>RegistryLocationAttribute</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetCOMAddinAttribute(System.Type)">
            <summary>
            Looks for the COMAddinAttribute.
            </summary>
            <param name="type">the type you want looking for the attribute</param>
            <returns>COMAddinAttribute</returns>
        </member>
        <member name="M:NetOffice.Tools.AttributeReflector.GetCOMAddinAttribute(System.Type,System.String)">
            <summary>
            Looks for the COMAddinAttribute.
            </summary>
            <param name="type">the type you want looking for the attribute</param>
            <param name="progID">addin progid</param>
            <returns>COMAddinAttribute</returns>
        </member>
        <member name="T:NetOffice.Tools.LoadBehavior">
            <summary>
            A value that specifies when the application attempts to load the add-in and the current state of the add-in (loaded or unloaded).
            By default add-ins use value <see cref="F:NetOffice.Tools.LoadBehavior.LoadAtStartup"/> (3), which specifies that the add-in is loaded at startup.
            </summary>
            <remarks>
            The LoadBehavior value contains a bitwise combination of values that specify the runtime behavior of the add-in.
            The lowest order bit (values 0 and 1) indicates whether the add-in is currently unloaded or loaded.
            Other bits indicate when the application attempts to load the add-in.
            Typically, the LoadBehavior entry is intended to be set to 0, 3, or 16 (in decimal) when the add-in is installed on end-user computer.
            </remarks>
            <see href="https://docs.microsoft.com/en-us/visualstudio/vsto/registry-entries-for-vsto-add-ins?view=vs-2019#LoadBehavior">LoadBehavior values</see>
        </member>
        <member name="F:NetOffice.Tools.LoadBehavior.DoNotLoad">
            <summary>
            The application never tries to load the add-in automatically.
            The user can try to manually load the add-in, or the add-in can be loaded programmatically.
            </summary>
            <remarks>
            If the add-in is successfully loaded, the LoadBehavior value remains 0.
            </remarks>
        </member>
        <member name="F:NetOffice.Tools.LoadBehavior.DoNotLoadManual">
            <summary>
            The application never tries to load the add-in automatically.
            The user can try to manually load the add-in, or the add-in can be loaded programmatically.
            </summary>
            <remarks>
            If the application successfully loads the add-in, the LoadBehavior value changes to 0, and remains at 0 after the application closes.
            </remarks>
        </member>
        <member name="F:NetOffice.Tools.LoadBehavior.LoadAtStartupManual">
            <summary>
            The application does not try to load the add-in automatically.
            The user can try to manually load the add-in, or the add-in can be loaded programmatically.
            </summary>
            <remarks>
            If the application successfully loads the add-in, the LoadBehavior value changes to 3, and remains at 3 after the application closes.
            </remarks>
        </member>
        <member name="F:NetOffice.Tools.LoadBehavior.LoadAtStartup">
            <summary>
            The application tries to load the add-in when the application starts.
            This is the default value for most add-ins.
            </summary>
            <remarks>
            If the application successfully loads the add-in, the LoadBehavior value remains 3.
            If an error occurs when loading the add-in, the LoadBehavior value changes to 2, and remains at 2 after the application closes.
            </remarks>
        </member>
        <member name="F:NetOffice.Tools.LoadBehavior.LoadOnDemandManual">
            <summary>
            The application does not try to load the add-in automatically.
            The user can try to manually load the add-in, or the add-in can be loaded programmatically.
            </summary>
            <remarks>
            If the application successfully loads the add-in, the LoadBehavior value changes to 9.
            </remarks>
        </member>
        <member name="F:NetOffice.Tools.LoadBehavior.LoadOnDemand">
            <summary>
            The add-in will be loaded only when the application requires it,
            such as when a user clicks a UI element that uses functionality in the add-in
            (for example, a custom button in the Ribbon).
            </summary>
            <remarks>
            If the application successfully loads the add-in, the LoadBehavior value remains 9,
            but the status of the add-in in the COM Add-ins dialog box is updated to indicate that the add-in is currently loaded.
            If an error occurs when loading the add-in, the LoadBehavior value changes to 8.
            </remarks>
        </member>
        <member name="F:NetOffice.Tools.LoadBehavior.LoadOnce">
            <summary>
            Set this value if you want your add-in to be loaded on demand.
            The application loads the add-in when the user runs the application for the first time.
            The next time the user runs the application, the application loads any UI elements that are defined by the add-in,
            but the add-in is not loaded until the user clicks a UI element that is associated with the add-in.
            </summary>
            <remarks>
            When the application successfully loads the add-in for the first time, the LoadBehavior value remains 16 while the add-in is loaded.
            After the application closes, the LoadBehavior value changes to 9.
            </remarks>
        </member>
        <member name="T:NetOffice.Tools.COMAddinAttribute">
            <summary>
            Specify essential COMAddin information
            </summary>
        </member>
        <member name="F:NetOffice.Tools.COMAddinAttribute.Name">
            <summary>
            Display Name for the Addin
            </summary>
        </member>
        <member name="F:NetOffice.Tools.COMAddinAttribute.Description">
            <summary>
            Description for the Addin
            </summary>
        </member>
        <member name="F:NetOffice.Tools.COMAddinAttribute.LoadBehavior">
            <summary>
            LoadBehavior for the Addin
            </summary>
        </member>
        <member name="F:NetOffice.Tools.COMAddinAttribute.CommandLineSafe">
            <summary>
            Gives info the Addin is commandline safe
            </summary>
        </member>
        <member name="M:NetOffice.Tools.COMAddinAttribute.#ctor(System.String,NetOffice.Tools.LoadBehavior)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="name">Display Name for the Addin</param>
            <param name="loadBehavior">LoadBehavior for the Addin</param>
        </member>
        <member name="M:NetOffice.Tools.COMAddinAttribute.#ctor(System.String,System.String,NetOffice.Tools.LoadBehavior)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="name">Display Name for the Addin</param>
            <param name="description">Description for the Addin</param>
            <param name="loadBehavior">LoadBehavior for the Addin</param>
        </member>
        <member name="M:NetOffice.Tools.COMAddinAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="name">Display Name for the Addin</param>
            <param name="description">Description for the Addin</param>
            <param name="loadBehavior">LoadBehavior for the Addin</param>
        </member>
        <member name="M:NetOffice.Tools.COMAddinAttribute.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="name">Display Name for the Addin</param>
            <param name="description">Description for the Addin</param>
            <param name="loadBehavior">LoadBehavior for the Addin</param>
            <param name="commandLineSafe">Gives info the Addin is commandline safe</param>
        </member>
        <member name="T:NetOffice.Tools.COMAddinBase">
            <summary>
            Encapsulate generic addin services 
            </summary>
        </member>
        <member name="F:NetOffice.Tools.COMAddinBase._creationTime">
            <summary>
            Set in ctor first to measure the time from creation to OnStartupComplete
            </summary>
        </member>
        <member name="F:NetOffice.Tools.COMAddinBase._type">
            <summary>
            Type cache field
            </summary>
        </member>
        <member name="F:NetOffice.Tools.COMAddinBase._lock">
            <summary>
            Static visual styles lock
            </summary>
        </member>
        <member name="M:NetOffice.Tools.COMAddinBase.#ctor">
            <summary>
            Creates an instance of the class
            </summary>
        </member>
        <member name="P:NetOffice.Tools.COMAddinBase.AppInstance">
            <summary>
            Host Application Instance
            </summary>
        </member>
        <member name="P:NetOffice.Tools.COMAddinBase.Factory">
            <summary>
            Current associated Core
            </summary>
        </member>
        <member name="P:NetOffice.Tools.COMAddinBase.LoadingTimeElapsed">
            <summary>
            Elapsed time in milliseconds from instance creation until OnStartupComplete event
            </summary>
        </member>
        <member name="P:NetOffice.Tools.COMAddinBase.Type">
            <summary>
            Type Information of the instance
            </summary>
        </member>
        <member name="P:NetOffice.Tools.COMAddinBase.Roots">
            <summary>
            Instance managed root com objects
            </summary>
        </member>
        <member name="M:NetOffice.Tools.COMAddinBase.EnableVisualStyles">
            <summary>
            Call System.Windows.Forms.Application.EnableVisualStyles
            </summary>
        </member>
        <member name="T:NetOffice.Tools.CustomPaneAttribute">
            <summary>
            Specify a custom task pane
            </summary>
        </member>
        <member name="F:NetOffice.Tools.CustomPaneAttribute.PaneType">
            <summary>
            Type of the custom task pane
            </summary>
        </member>
        <member name="F:NetOffice.Tools.CustomPaneAttribute.Title">
            <summary>
            Pane Title (Default is Pane Type Name)
            </summary>
        </member>
        <member name="F:NetOffice.Tools.CustomPaneAttribute.Visible">
            <summary>
            Pane Visibility (Default is true)
            </summary>
        </member>
        <member name="F:NetOffice.Tools.CustomPaneAttribute.DockPosition">
            <summary>
            Pane dock alignment direction (Default is Right)
            </summary>
        </member>
        <member name="F:NetOffice.Tools.CustomPaneAttribute.DockPositionRestrict">
            <summary>
            Pane dock alignment restriction (Default is None)
            </summary>
        </member>
        <member name="F:NetOffice.Tools.CustomPaneAttribute.Width">
            <summary>
            Pane Width (Default is 150)
            </summary>
        </member>
        <member name="F:NetOffice.Tools.CustomPaneAttribute.Height">
            <summary>
            Pane Height (Default is 150)
            </summary>
        </member>
        <member name="M:NetOffice.Tools.CustomPaneAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance of the Attribute
            </summary>
            <param name="paneType">type of the custom task pane</param>
        </member>
        <member name="M:NetOffice.Tools.CustomPaneAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates an instance of the Attribute
            </summary>
            <param name="paneType">type of the custom task pane</param>
            <param name="title">pane caption</param>
        </member>
        <member name="M:NetOffice.Tools.CustomPaneAttribute.#ctor(System.Type,System.String,System.Boolean)">
            <summary>
            Creates an instance of the Attribute
            </summary>
            <param name="paneType">type of the custom task pane</param>
            <param name="title">pane caption</param>
            <param name="visible">pane visibility</param>
        </member>
        <member name="M:NetOffice.Tools.CustomPaneAttribute.#ctor(System.Type,System.String,System.Boolean,NetOffice.Tools.PaneDockPosition)">
            <summary>
            Creates an instance of the Attribute
            </summary>
            <param name="title">pane caption</param>
            <param name="visible">pane visibility</param>
            <param name="paneType">type of the custom task pane</param>
            <param name="dockPosition">pane dock alignment direction</param>
        </member>
        <member name="M:NetOffice.Tools.CustomPaneAttribute.#ctor(System.Type,System.String,System.Boolean,NetOffice.Tools.PaneDockPosition,NetOffice.Tools.PaneDockPositionRestrict)">
            <summary>
            Creates an instance of the Attribute
            </summary>
            <param name="paneType">type of the custom task pane</param>
            <param name="title">pane caption</param>
            <param name="visible">pane visibility</param>
            <param name="dockPosition">pane dock alignment direction</param>
            <param name="restriction">pane dock alignment restriction</param>
        </member>
        <member name="M:NetOffice.Tools.CustomPaneAttribute.#ctor(System.Type,System.String,System.Boolean,NetOffice.Tools.PaneDockPosition,NetOffice.Tools.PaneDockPositionRestrict,System.Int32,System.Int32)">
            <summary>
            Creates an instance of the Attribute
            </summary>
            <param name="paneType">type of the custom task pane</param>
            <param name="title">pane caption</param>
            <param name="visible">pane visibility</param>
            <param name="dockPosition">pane dock alignment direction</param>
            <param name="restriction">pane dock alignment restriction</param>
            <param name="width">pane width</param>
            <param name="height">pane height</param>
        </member>
        <member name="T:NetOffice.Tools.PaneDockPosition">
            <summary>
             SupportByVersion Office 12, 14, 15, 16
            </summary>
        </member>
        <member name="F:NetOffice.Tools.PaneDockPosition.msoCTPDockPositionLeft">
            <summary>
            SupportByVersion Office 12, 14, 15, 16
            </summary>
        </member>
        <member name="F:NetOffice.Tools.PaneDockPosition.msoCTPDockPositionTop">
            <summary>
            SupportByVersion Office 12, 14, 15, 16
            </summary>
        </member>
        <member name="F:NetOffice.Tools.PaneDockPosition.msoCTPDockPositionRight">
            <summary>
            SupportByVersion Office 12, 14, 15, 16
            </summary>
        </member>
        <member name="F:NetOffice.Tools.PaneDockPosition.msoCTPDockPositionBottom">
            <summary>
            SupportByVersion Office 12, 14, 15, 16
            </summary>
        </member>
        <member name="F:NetOffice.Tools.PaneDockPosition.msoCTPDockPositionFloating">
            <summary>
            SupportByVersion Office 12, 14, 15, 16
            </summary>
        </member>
        <member name="T:NetOffice.Tools.PaneDockPositionRestrict">
            <summary>
            SupportByVersion Office 12, 14, 15, 16
            </summary>
        </member>
        <member name="F:NetOffice.Tools.PaneDockPositionRestrict.msoCTPDockPositionRestrictNone">
            <summary>
            SupportByVersion Office 12, 14, 15, 16
            </summary>
        </member>
        <member name="F:NetOffice.Tools.PaneDockPositionRestrict.msoCTPDockPositionRestrictNoChange">
            <summary>
            SupportByVersion Office 12, 14, 15, 16
            </summary>
        </member>
        <member name="F:NetOffice.Tools.PaneDockPositionRestrict.msoCTPDockPositionRestrictNoHorizontal">
            <summary>
            SupportByVersion Office 12, 14, 15, 16
            </summary>
        </member>
        <member name="F:NetOffice.Tools.PaneDockPositionRestrict.msoCTPDockPositionRestrictNoVertical">
            <summary>
            SupportByVersion Office 12, 14, 15, 16
            </summary>
        </member>
        <member name="T:NetOffice.Tools.CustomUIAttribute">
            <summary>
            Specify an embedded XML File for RibbonUI
            </summary>
        </member>
        <member name="F:NetOffice.Tools.CustomUIAttribute.Value">
            <summary>
            Full qualified location
            </summary>
        </member>
        <member name="F:NetOffice.Tools.CustomUIAttribute.RibbonID">
            <summary>
            Target ribbon id(s) - comma separated or empty as wildcard
            </summary>
        </member>
        <member name="F:NetOffice.Tools.CustomUIAttribute.UseAssemblyNamespace">
            <summary>
            Use root namespace of the calling instance
            </summary>
        </member>
        <member name="F:NetOffice.Tools.CustomUIAttribute.RibbonIDs">
            <summary>
            Processed Ribbon ID's
            </summary>
        </member>
        <member name="M:NetOffice.Tools.CustomUIAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="value">Full qualified location</param>
        </member>
        <member name="M:NetOffice.Tools.CustomUIAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="ribbonID">target ribbon id(s) - comma separated or empty as wildcard</param>
            <param name="value">Full qualified location</param>
        </member>
        <member name="M:NetOffice.Tools.CustomUIAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="value">Full qualified location</param>
            <param name="useAssemblyNamespace">Use namespace of the calling instance</param>
        </member>
        <member name="M:NetOffice.Tools.CustomUIAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="ribbonID">target ribbon id(s) - comma separated or empty as wildcard</param>
            <param name="value">Full qualified location</param>
            <param name="useAssemblyNamespace">Use namespace of the calling instance</param>
        </member>
        <member name="M:NetOffice.Tools.CustomUIAttribute.BuildPath(System.String,System.Boolean,System.String)">
            <summary>
            Build resource path with attribute values
            </summary>
            <param name="resourcePath">resource path</param>
            <param name="useAssemblyNamespace">use assembly namespace</param>
            <param name="assemblyNamespace">root assembly namespace</param>
            <returns>return resource path</returns>
        </member>
        <member name="T:NetOffice.Tools.ErrorMethodKind">
            <summary>
            Indicates in which method the error is occured
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ErrorMethodKind.OnStartupComplete">
            <summary>
            the error is occured in void IDTExtensibility2.OnStartupComplete(ref Array custom)
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ErrorMethodKind.OnDisconnection">
            <summary>
            the error is occured in void IDTExtensibility2.OnDisconnection(ext_DisconnectMode RemoveMode, ref Array custom)
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ErrorMethodKind.OnConnection">
            <summary>
            the error is occured in void IDTExtensibility2.OnConnection(object Application, ext_ConnectMode ConnectMode, object AddInInst, ref Array custom)
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ErrorMethodKind.OnAddInsUpdate">
            <summary>
             the error is occured in void IDTExtensibility2.OnAddInsUpdate(ref Array custom)
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ErrorMethodKind.OnBeginShutdown">
            <summary>
            the error is occured in void IDTExtensibility2.OnBeginShutdown(ref Array custom)
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ErrorMethodKind.GetCustomUI">
            <summary>
            the error is occured in public virtual string GetCustomUI(string RibbonID)
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ErrorMethodKind.CTPFactoryAvailable">
            <summary>
            the error is occured in public virtual void CTPFactoryAvailable(object CTPFactoryInst)
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ErrorMethodKind.CreateFactory">
            <summary>
             the error is occured in protected virtual Factory CreateFactory()
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ErrorMethodKind.CreateCustomAddinInstance">
            <summary>
            the error is occured while NetOffice try to create the custom addin object instance
            </summary>
        </member>
        <member name="T:NetOffice.Tools.RegisterErrorHandlerAttribute">
            <summary>
            Mark a static method as error handler for COMAddin methods. The static method need the following signature: public static void ErrorHandler(RegisterErrorMethodKind methodKind, Exception exception)
            Rethrow the exception(second argument) in the method body to the runtime system if you want signalize an error to the environment(typical not wanted)
            </summary>
        </member>
        <member name="T:NetOffice.Tools.RegisterErrorMethodKind">
            <summary>
            Indicates in which method the error is occured
            </summary>
        </member>
        <member name="F:NetOffice.Tools.RegisterErrorMethodKind.Register">
            <summary>
            The error is occured in the Register operation
            </summary>
        </member>
        <member name="F:NetOffice.Tools.RegisterErrorMethodKind.UnRegister">
            <summary>
             The error is occured in the Unregister operation
            </summary>
        </member>
        <member name="F:NetOffice.Tools.RegisterErrorMethodKind.Export">
            <summary>
            The error is occured in the Register export operation
            </summary>
        </member>
        <member name="T:NetOffice.Tools.RegisterMode">
            <summary>
            Specify the kind and condition of the registration method call.
            </summary>
        </member>
        <member name="F:NetOffice.Tools.RegisterMode.Replace">
            <summary>
            The base class <see cref="T:NetOffice.Tools.COMAddinBase"/> does not perform any registration operations
            and calls the specified registration method with the parameter <see cref="F:NetOffice.Tools.RegisterCall.Replace"/>.
            The specified registration method has to do all registration operations manually.
            </summary>
        </member>
        <member name="F:NetOffice.Tools.RegisterMode.CallBefore">
            <summary>
            The method was called with parameter <see cref="F:NetOffice.Tools.RegisterCall.CallBefore"/> before the base class does any registration operations.
            </summary>
        </member>
        <member name="F:NetOffice.Tools.RegisterMode.CallAfter">
            <summary>
            The method was called with parameter <see cref="F:NetOffice.Tools.RegisterCall.CallAfter"/> when the base class registration operations are done.
            </summary>
        </member>
        <member name="F:NetOffice.Tools.RegisterMode.CallBeforeAndAfter">
            <summary>
            This means a combination of <see cref="F:NetOffice.Tools.RegisterCall.CallBefore"/> and <see cref="F:NetOffice.Tools.RegisterCall.CallAfter"/>.
            </summary>
        </member>
        <member name="T:NetOffice.Tools.RegisterCall">
            <summary>
            Parameter for Register/Unregister Methods
            </summary>
        </member>
        <member name="F:NetOffice.Tools.RegisterCall.Replace">
            <summary>
            The method was called without any register/unregister action from the base class. The specified register method has to do all register operations
            </summary>
        </member>
        <member name="F:NetOffice.Tools.RegisterCall.CallBefore">
            <summary>
            The method is called before the base class perform all register operation
            </summary>
        </member>
        <member name="F:NetOffice.Tools.RegisterCall.CallAfter">
            <summary>
            The method was called when the base class register operations are done
            </summary>
        </member>
        <member name="T:NetOffice.Tools.RegisterFunctionAttribute">
            <summary>
            Mark a static method as Register method. the method need the following signature public void Register(Type type, RegisterCall callType)
            </summary>
        </member>
        <member name="F:NetOffice.Tools.RegisterFunctionAttribute.Value">
            <summary>
            Register Call Condition
            </summary>
        </member>
        <member name="M:NetOffice.Tools.RegisterFunctionAttribute.#ctor(NetOffice.Tools.RegisterMode)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="mode">register call condition</param>
        </member>
        <member name="M:NetOffice.Tools.RegisterFunctionAttribute.#ctor">
            <summary>
            Creates an instance of the attribute
            </summary>
        </member>
        <member name="T:NetOffice.Tools.RegistrySaveLocation">
            <summary>
            Specify possible registry locations
            </summary>
        </member>
        <member name="F:NetOffice.Tools.RegistrySaveLocation.InstallScopeCurrentUser">
            <summary>
            Based on current scope but related addin key want set always in CurrentUser
            </summary>
        </member>
        <member name="F:NetOffice.Tools.RegistrySaveLocation.InstallScope">
            <summary>
            Based on current scope
            </summary>
        </member>
        <member name="F:NetOffice.Tools.RegistrySaveLocation.CurrentUser">
            <summary>
            CurrentUser Key
            </summary>
        </member>
        <member name="F:NetOffice.Tools.RegistrySaveLocation.LocalMachine">
            <summary>
            LocalMachineKey (permissions required)
            </summary>
        </member>
        <member name="T:NetOffice.Tools.RegistryLocationAttribute">
            <summary>
            Specify the addin registry keys for office was created in the Machine key or current user
            </summary>
        </member>
        <member name="F:NetOffice.Tools.RegistryLocationAttribute.Value">
            <summary>
            Registry Location
            </summary>
        </member>
        <member name="M:NetOffice.Tools.RegistryLocationAttribute.#ctor(NetOffice.Tools.RegistrySaveLocation)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="value">Registry location</param>
        </member>
        <member name="M:NetOffice.Tools.RegistryLocationAttribute.IsMachineComponentTarget(NetOffice.Tools.InstallScope)">
            <summary>
            Returns info the current combination of RegistryLocation and InstallScope means system key for component register
            </summary>
            <param name="scope">scope target</param>
            <returns>true if machine otherwise false</returns>
        </member>
        <member name="M:NetOffice.Tools.RegistryLocationAttribute.IsMachineAddinTarget">
            <summary>
            Returns info RegAsm default addin registration is system addin
            </summary>
            <returns>true if machine otherwise false</returns>
        </member>
        <member name="M:NetOffice.Tools.RegistryLocationAttribute.IsMachineAddinTarget(NetOffice.Tools.InstallScope)">
            <summary>
            Returns info the current combination of RegistryLocation and InstallScope means system key for component register
            </summary>
            <param name="scope">scope target</param>
            <returns>true if machine otherwise false</returns>
        </member>
        <member name="M:NetOffice.Tools.RegistryLocationAttribute.CreateApplicationKey(System.Boolean,System.String,System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Creates the office application registry to load the addin
            </summary>
            <param name="isSystem">install to the system or current user</param>
            <param name="officeKey">the office application root key without hive key</param>
            <param name="progId">addin progid</param>
            <param name="loadBehavior">addin load behaviour</param>
            <param name="friendlyName">addin caption</param>
            <param name="description">addin detailed description</param>
            <param name="createTimeStamp">create timestamp</param>
        </member>
        <member name="M:NetOffice.Tools.RegistryLocationAttribute.CreateApplicationKey(System.Boolean,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates the office application registry to load the addin
            </summary>
            <param name="isSystem">install to the system or current user</param>
            <param name="officeKey">the office application root key without hive key</param>
            <param name="progId">addin progid</param>
            <param name="loadBehavior">addin load behaviour</param>
            <param name="friendlyName">addin caption</param>
            <param name="description">addin detailed description</param>
            <param name="commandLineSafe">addin is safe for commandline</param>
            <param name="createTimeStamp">create timestamp</param>
        </member>
        <member name="M:NetOffice.Tools.RegistryLocationAttribute.TryDeleteApplicationKey(System.Boolean,System.String,System.String)">
            <summary>
            Deletes an office addin key entry
            </summary>
            <param name="isSystem">install to the system or current user</param>
            <param name="officeKey">the office application root key without hive key</param>
            <param name="progId">addin progid</param>
            <returns>true if no exception occurs</returns>
        </member>
        <member name="T:NetOffice.Tools.TweakAttribute">
            <summary>
            Activate tweaks for <see cref="T:NetOffice.Tools.COMAddinBase"/> derived classes.
            You can add various values in the Microsoft Office Add-ins registry location
            to customize NetOffice diagnostic/log settings at runtime. This can be very helpful in troubleshooting.
            See tweaks overview here: http://netoffice.codeplex.com/wikipage?title=Tweaks_EN
            </summary>
        </member>
        <member name="F:NetOffice.Tools.TweakAttribute.Enabled">
            <summary>
            Enable or disable possible tweaking is possible
            </summary>
        </member>
        <member name="M:NetOffice.Tools.TweakAttribute.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="enabled">Enable or disable possible tweaking is possible</param>
        </member>
        <member name="M:NetOffice.Tools.TweakAttribute.#ctor">
            <summary>
            Creates an instance of the class
            </summary>
        </member>
        <member name="T:NetOffice.Tools.IsLoadedFromSystemKeyDelegate">
            <summary>
            Points to an addin method that try to detect the addin is loaded from HKEY_LOCAL_MACHINE\Software\Office or HKEY_CURRENT_USER\Software\Office
            Each COMAddin base class has a corresponding -cache supported- method for this delegate.
            COMAddin base class want give this method as delegate during the loading process to service methods.
            The service methods want call the delegate only if need because it is potentially expensive in performance
            which is a problem in a loading process.
            </summary>
            <returns>null if unknown or true/false</returns>
        </member>
        <member name="T:NetOffice.Tools.Tweaks">
            <summary>
            Tweak Handler to customize some settings at runtime (if wanted)
            </summary>
        </member>
        <member name="M:NetOffice.Tools.Tweaks.#cctor">
            <summary>
            Creates no instance of the class
            </summary>
        </member>
        <member name="P:NetOffice.Tools.Tweaks.CustomTweaks">
            <summary>
            Store applied custom teaks. int = GetHashCode() from COMAddin instance. Dictionary string string = name, value of applied tweak
            </summary>
        </member>
        <member name="M:NetOffice.Tools.Tweaks.ApplyTweaks(NetOffice.Core,System.Object,System.Type,System.String,NetOffice.Tools.IsLoadedFromSystemKeyDelegate)">
            <summary>
            Analyze a COMAddin for the TweakAttribute and try to set given arguments(registry) if exists
            </summary>
            <param name="factory">current used factory or null for default</param>
            <param name="addinInstance">COMAddin instance</param>
            <param name="addinType">Type info from COMAddin instance</param>
            <param name="registryEndPoint">specific office registry key endpoint</param>
            <param name="useSystemRegistryKey">Try read in HKEY_LOCAL_Machine otherwise HKEY_CURRENT_USER</param>
        </member>
        <member name="M:NetOffice.Tools.Tweaks.DisposeTweaks(NetOffice.Core,System.Object,System.Type)">
            <summary>
            Dispose applied tweaks for COMAddin instance
            </summary>
            <param name="factory">current used factory or null for default</param>
            <param name="addinInstance">COMAddin instance</param>
            <param name="addinType">Type info from COMAddin instance</param>
        </member>
        <member name="M:NetOffice.Tools.Tweaks.IsWellKnownName(System.String)">
            <summary>
            Returns info the regkey value name is addin standard or NetOffice tweak
            </summary>
            <param name="name">target regkey name</param>
            <returns>true if found</returns>
        </member>
        <member name="T:NetOffice.Tools.UnRegisterFunctionAttribute">
            <summary>
            Mark a static method as UnRegister method. the method need the following signature public void UnRegister(Type type, RegisterCall callType)
            </summary>
        </member>
        <member name="F:NetOffice.Tools.UnRegisterFunctionAttribute.Value">
            <summary>
            Register Call Condition
            </summary>
        </member>
        <member name="M:NetOffice.Tools.UnRegisterFunctionAttribute.#ctor(NetOffice.Tools.RegisterMode)">
            <summary>
            Creates an instance of the attribute
            </summary>
            <param name="mode">register call condition</param>
        </member>
        <member name="T:NetOffice.Tools.OnStartupCompleteEventHandler">
            <summary>
            OnStartupComplete Event Handler
            </summary>
            <param name="custom">custom arguments</param>
        </member>
        <member name="T:NetOffice.Tools.OnDisconnectionEventHandler">
            <summary>
            OnDisconnection Event Handler
            </summary>
            <param name="removeMode">kind of remove</param>
            <param name="custom">custom arguments</param>
        </member>
        <member name="T:NetOffice.Tools.OnConnectionEventHandler">
            <summary>
            OnConnection Event Handler
            </summary>
            <param name="application">application host instance</param>
            <param name="connectMode">kind of connect</param>
            <param name="addInInst">addin instance</param>
            <param name="custom">custom arguments</param>
        </member>
        <member name="T:NetOffice.Tools.OnAddInsUpdateEventHandler">
            <summary>
            OnAddInsUpdate Event Handler
            </summary>
            <param name="custom">custom arguments</param>
        </member>
        <member name="T:NetOffice.Tools.OnBeginShutdownEventHandler">
            <summary>
            OnBeginShutdown Event Handler
            </summary>
            <param name="custom">custom arguments</param>
        </member>
        <member name="T:NetOffice.Tools.ext_ConnectMode">
            <summary>
            Used in IDTExtensibility2 interface
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ext_ConnectMode.ext_cm_AfterStartup">
            <summary>
            The add-in was loaded after Application started.
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ext_ConnectMode.ext_cm_Startup">
            <summary>
            The add-in was loaded when Application started.
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ext_ConnectMode.ext_cm_External">
            <summary>
            The add-in was loaded by an external client.
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ext_ConnectMode.ext_cm_CommandLine">
            <summary>
            The add-in was loaded from the command line.
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ext_ConnectMode.ext_cm_Solution">
            <summary>
            The add-in was loaded with a solution.
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ext_ConnectMode.ext_cm_UISetup">
            <summary>
            The add-in was loaded for user interface setup.
            </summary>
        </member>
        <member name="T:NetOffice.Tools.ext_DisconnectMode">
            <summary>
            Used in IDTExtensibility2 interface
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ext_DisconnectMode.ext_dm_HostShutdown">
            <summary>
            The add-in was unloaded when Application was shut down.
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ext_DisconnectMode.ext_dm_UserClosed">
            <summary>
            The add-in was unloaded while Application was running.
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ext_DisconnectMode.ext_dm_UISetupComplete">
            <summary>
            The add-in was unloaded after the user interface was set up.
            </summary>
        </member>
        <member name="F:NetOffice.Tools.ext_DisconnectMode.ext_dm_SolutionClosed">
            <summary>
            The add-in was unloaded when the solution was closed.
            </summary>
        </member>
        <member name="T:NetOffice.DynamicObjectEntity">
            <summary>
            Runtime Entity Description
            </summary>
        </member>
        <member name="T:NetOffice.DynamicObjectEntity.EntityKind">
            <summary>
            Particular Entity Kind
            </summary>
        </member>
        <member name="F:NetOffice.DynamicObjectEntity.EntityKind.Method">
            <summary>
            Method
            </summary>
        </member>
        <member name="F:NetOffice.DynamicObjectEntity.EntityKind.PropertyReadonly">
            <summary>
            ReadOnly Property
            </summary>
        </member>
        <member name="F:NetOffice.DynamicObjectEntity.EntityKind.PropertyWritable">
            <summary>
            Property with Write-Access
            </summary>
        </member>
        <member name="M:NetOffice.DynamicObjectEntity.#ctor(System.String,NetOffice.DynamicObjectEntity.EntityKind)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="name">entity name</param>
            <param name="kind">entity kind</param>
        </member>
        <member name="P:NetOffice.DynamicObjectEntity.Name">
            <summary>
            Entity Name
            </summary>
        </member>
        <member name="P:NetOffice.DynamicObjectEntity.Kind">
            <summary>
            Entity Kind
            </summary>
        </member>
        <member name="M:NetOffice.DynamicObjectEntity.ToString">
            <summary>
            Returns a System.String that represents the instance
            </summary>
            <returns>System.String</returns>
        </member>
        <member name="T:NetOffice.Availability.SupportedEntityFinder">
            <summary>
            Performs a cache supported search to analyze at runtime a proxy supports a method or property
            </summary>
        </member>
        <member name="M:NetOffice.Availability.SupportedEntityFinder.Find(NetOffice.Core,System.Collections.Generic.Dictionary{System.String,System.String}@,NetOffice.Availability.SupportedEntityType,System.Object,System.String)">
            <summary>
            Returns information a method or property is supported by a com proxy
            </summary>
            <param name="factory">core to perform searching</param>
            <param name="list">cache dictionary</param>
            <param name="searchType">entity type</param>
            <param name="proxy">target com proxy</param>
            <param name="name">name of the target entity</param>
            <returns>true if supported, otherwise false</returns>
            <exception cref="T:NetOffice.Exceptions.AvailabilityException">An unexpected error occurs. See inner exception(s) for details.</exception>
        </member>
        <member name="M:NetOffice.Availability.SupportedEntityFinder.GetSupportedEntities(NetOffice.Core,System.Object)">
            <summary>
            Creates an entity support list for a proxy
            </summary>
            <param name="factory">core to perform searching</param>
            <param name="comProxy">proxy to analyze</param>
            <returns>supported methods and properties as name/kind dictionary</returns>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown in general if any exception occurs. See inner exception(s) for details</exception>
        </member>
        <member name="T:NetOffice.Availability.SupportedEntityType">
            <summary>
            Search parameter for the EntityIsAvailable Method
            </summary>
        </member>
        <member name="F:NetOffice.Availability.SupportedEntityType.Both">
            <summary>
            looking for a method or a property
            </summary>
        </member>
        <member name="F:NetOffice.Availability.SupportedEntityType.Property">
            <summary>
            looking for a property only
            </summary>
        </member>
        <member name="F:NetOffice.Availability.SupportedEntityType.Method">
            <summary>
            looking for a method only
            </summary>
        </member>
        <member name="T:NetOffice.Running.Win32Window">
            <summary>
            IWin32Window Implementation
            </summary>
        </member>
        <member name="M:NetOffice.Running.Win32Window.#ctor(System.Int32)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="hwnd">target handle</param>
        </member>
        <member name="M:NetOffice.Running.Win32Window.#ctor(System.IntPtr)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="handle">target handle</param>
        </member>
        <member name="P:NetOffice.Running.Win32Window.Handle">
            <summary>
            Gets the handle to the window
            </summary>
        </member>
        <member name="M:NetOffice.Running.Win32Window.Create(System.Object)">
            <summary>
            Try create an IWin32Window implementation by given argument
            </summary>
            <param name="value">target handle</param>
            <returns>IWin32Window</returns>
        </member>
        <member name="T:NetOffice.Running.ProxyInformation">
            <summary>
            Encapsulate a Proxy and spend some additional information about
            </summary>
        </member>
        <member name="T:NetOffice.Running.ProxyInformation.ProcessElevation">
            <summary>
            Determine Process Elevation
            </summary>
        </member>
        <member name="F:NetOffice.Running.ProxyInformation.ProcessElevation.Unknown">
            <summary>
            Failed to detect permission
            </summary>
        </member>
        <member name="F:NetOffice.Running.ProxyInformation.ProcessElevation.AdministratorRole">
            <summary>
            Process is in admin role
            </summary>
        </member>
        <member name="F:NetOffice.Running.ProxyInformation.ProcessElevation.BelowAdministratorRole">
            <summary>
            Process is not in admin role
            </summary>
        </member>
        <member name="M:NetOffice.Running.ProxyInformation.#ctor(System.Object,System.String,System.String,System.String,System.String,System.String,System.IntPtr,NetOffice.Running.ProxyInformation.ProcessElevation)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="proxy">proxy from ROT</param>
            <param name="displayName">display name in running object table</param>
            <param name="id">interface id</param>
            <param name="name">name of the managed proxy class if exists</param>
            <param name="component">name of the component where the proxy comes from</param>
            <param name="libraryID">id of the component where the proxy comes from</param>
            <param name="processID">pid</param>
            <param name="elevation">process elevation</param>
        </member>
        <member name="P:NetOffice.Running.ProxyInformation.DisplayName">
            <summary>
            Display name in the running object table
            </summary>
        </member>
        <member name="P:NetOffice.Running.ProxyInformation.Name">
            <summary>
            Name of the managed proxy class if exists
            </summary>
        </member>
        <member name="P:NetOffice.Running.ProxyInformation.Component">
            <summary>
            Name of the component where the proxy comes from
            </summary>
        </member>
        <member name="P:NetOffice.Running.ProxyInformation.ID">
            <summary>
            Interface id
            </summary>
        </member>
        <member name="P:NetOffice.Running.ProxyInformation.Library">
            <summary>
            ID of the component where the proxy comes from
            </summary>
        </member>
        <member name="P:NetOffice.Running.ProxyInformation.ProcessID">
            <summary>
            PID
            </summary>
        </member>
        <member name="P:NetOffice.Running.ProxyInformation.Elevation">
            <summary>
            Determine process elevation
            </summary>
        </member>
        <member name="P:NetOffice.Running.ProxyInformation.Proxy">
            <summary>
            Proxy from ROT
            </summary>
        </member>
        <member name="M:NetOffice.Running.ProxyInformation.Dispose">
            <summary>
            Release the proxy
            </summary>
        </member>
        <member name="M:NetOffice.Running.ProxyInformation.ToString">
            <summary>
            Returns a System.String that represents the instance
            </summary>
            <returns>System.String</returns>
        </member>
        <member name="T:NetOffice.Running.ProxyService">
            <summary>
            Try to find running COM instances.
            The strategy to find is (depending on the arguments) the Running Object Table (ROT) or Windows Desktop Subsystem through IAccessible.
            The reason is because the Running Object Table won't give you all COM instances; it just shows only the information.
            </summary>
        </member>
        <member name="M:NetOffice.Running.ProxyService.GetActiveInstances``1(System.String,System.String)">
            <summary>
             Returns all running com proxies, wrapped by T
            </summary>
            <param name="componentName">component name, for example Excel</param>
            <param name="className">class name, for example Application</param>
            <returns><see cref="T:NetOffice.ICOMObject"/> enumerator</returns>
        </member>
        <member name="M:NetOffice.Running.ProxyService.GetActiveInstance``1(System.String,System.String,System.Boolean)">
            <summary>
             Returns first running com proxy, wrapped by T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="componentName"></param>
            <param name="className"></param>
            <param name="throwExceptionIfNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:NetOffice.Running.ProxyService.GetActiveInstances(System.String,System.String)">
            <summary>
            Returns all running com proxies there is match with given arguments
            </summary>
            <param name="componentName">component name, for example Excel</param>
            <param name="className">class name, for example Application</param>
            <returns>COM proxy enumerator</returns>
        </member>
        <member name="M:NetOffice.Running.ProxyService.GetActiveInstance(System.String,System.String,System.Boolean)">
            <summary>
            Returns a running com proxy there is match with given arguments
            </summary>
            <param name="componentName">component name, for example Excel or null as wildcard</param>
            <param name="className">class name, for example Application or null as wildcard</param>
            <param name="throwExceptionIfNothingFound">throw an exception if no proxy was found</param>
            <returns>proxy instance or null</returns>
        </member>
        <member name="T:NetOffice.Running.RunningWindowTable">
            <summary>
            Try to find COM proxies from Desktop subsystem.
            </summary>
        </member>
        <member name="P:NetOffice.Running.RunningWindowTable.MainWindowTimeoutMilliseconds">
            <summary>
            Timeout for the main window lookup in milliseconds.
            Default: 5000, Possible Range 1000-90000
            </summary>
        </member>
        <member name="P:NetOffice.Running.RunningWindowTable.ChildWindowTimeoutMilliseconds">
            <summary>
            Timeout for the child window lookup in milliseconds.
            Default: 5000, Possible Range 1000-90000
            </summary>
        </member>
        <member name="M:NetOffice.Running.RunningWindowTable.GetAccessibleProxy(NetOffice.Running.RunningWindowTable.ProxyType,System.Boolean)">
            <summary>
            Returns an accessible com proxy through the IAccessible interface
            </summary>
            <param name="type">target proxy type</param>
            <param name="throwExceptionIfNothingFound">throw an exception if no proxy found</param>
            <returns>com proxy instance or null</returns>
        </member>
        <member name="M:NetOffice.Running.RunningWindowTable.GetAccessibleProxies(NetOffice.Running.RunningWindowTable.ProxyType)">
            <summary>
            Returns all accessible com proxies through the IAccessible interface
            </summary>
            <param name="type">target proxy type</param>
        </member>
        <member name="M:NetOffice.Running.RunningWindowTable.GetAccessibleProxyInformations(NetOffice.Running.RunningWindowTable.ProxyType)">
            <summary>
             Returns all accessible com proxies and additional information through the IAccessible interface 
            </summary>
            <param name="type">target proxy type</param>
            <returns>proxy information enumerator</returns>
        </member>
        <member name="M:NetOffice.Running.RunningWindowTable.GetAccessibleProxiesFromPath(System.Collections.Generic.IEnumerable{NetOffice.Running.RunningWindowTable.AccessibleWindowTarget})">
            <summary>
            Performs a lookup for window/child windows there implement the IAccessible interface to get a COM proxy
            </summary>
            <param name="targets">one ore more targets to lookup</param>
            <returns>proxy information enumeration</returns>
        </member>
        <member name="M:NetOffice.Running.RunningWindowTable.GetAccessibleProxiesFromPath(System.Collections.Generic.IEnumerable{NetOffice.Running.RunningWindowTable.AccessibleWindowTarget},System.Int32)">
            <summary>
            Performs a lookup for window/child windows there implement the IAccessible interface to get a COM proxy
            </summary>
            <param name="targets">one ore more targets to lookup</param>
            <param name="maximumResultCount">maximum result count - the method abort if reached</param>
            <returns>proxy information enumeration</returns>
        </member>
        <member name="M:NetOffice.Running.RunningWindowTable.GetAccessibleProxyCount(NetOffice.Running.RunningWindowTable.ProxyType)">
            <summary>
             Returns the count of accessible com proxies
            </summary>
            <param name="type">target proxy type</param>
            <returns>count of accessible proxies</returns>
        </member>
        <member name="T:NetOffice.Running.RunningWindowTable.ProxyType">
            <summary>
            Determine which kind of proxy is wanted
            </summary>
        </member>
        <member name="F:NetOffice.Running.RunningWindowTable.ProxyType.ExcelApplication">
            <summary>
            Excel Application Proxy
            </summary>
        </member>
        <member name="F:NetOffice.Running.RunningWindowTable.ProxyType.WordApplication">
            <summary>
            Word Application Proxy
            </summary>
        </member>
        <member name="F:NetOffice.Running.RunningWindowTable.ProxyType.PowerPointApplication">
            <summary>
            PowerPoint Application Proxy
            </summary>
        </member>
        <member name="F:NetOffice.Running.RunningWindowTable.ProxyType.AllSupportedOfficeApplications">
            <summary>
            All supported Office applications together
            </summary>
        </member>
        <member name="F:NetOffice.Running.RunningWindowTable.ProxyType.All">
            <summary>
            All Together, incl. unknown
            </summary>
        </member>
        <member name="T:NetOffice.Running.RunningWindowTable.NameCompareKind">
            <summary>
            Determine how RunningWindowTable do compares the main window class name.
            Upper/Lower case is always ignored
            </summary>
        </member>
        <member name="F:NetOffice.Running.RunningWindowTable.NameCompareKind.Equal">
            <summary>
            Must match completely with MainClassName
            </summary>
        </member>
        <member name="F:NetOffice.Running.RunningWindowTable.NameCompareKind.StartsWith">
            <summary>
            Must start with MainClassName
            </summary>
        </member>
        <member name="F:NetOffice.Running.RunningWindowTable.NameCompareKind.EndsWith">
            <summary>
            Must ends with MainClassName
            </summary>
        </member>
        <member name="F:NetOffice.Running.RunningWindowTable.NameCompareKind.StartEndWith">
            <summary>
            Must start with MainClassName and ends with MainClassNameEnd
            </summary>
        </member>
        <member name="T:NetOffice.Running.RunningWindowTable.AccessibleWindowTarget">
            <summary>
            Path to a window or child window that implements the IAccessible interface
            </summary>
        </member>
        <member name="M:NetOffice.Running.RunningWindowTable.AccessibleWindowTarget.#ctor">
            <summary>
            Creates an instance of the class
            </summary>
        </member>
        <member name="M:NetOffice.Running.RunningWindowTable.AccessibleWindowTarget.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="mainClassName">name of the main window class</param>
        </member>
        <member name="M:NetOffice.Running.RunningWindowTable.AccessibleWindowTarget.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="mainClassName">name of the main window class</param>
            <param name="childPath">path to a child window</param>
        </member>
        <member name="M:NetOffice.Running.RunningWindowTable.AccessibleWindowTarget.#ctor(System.String,System.String,NetOffice.Running.RunningWindowTable.NameCompareKind,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="mainClassName">name of the main window class</param>
            <param name="mainClassNameEnd">ends with part of main window class name if its compared as StartsEndWith</param>
            <param name="nameCompare">Determine how RunningWindowTable do compares the main window class name</param>
            <param name="childPath">path to a child window</param>
        </member>
        <member name="P:NetOffice.Running.RunningWindowTable.AccessibleWindowTarget.MainClassName">
            <summary>
            Name of the main window class
            </summary>
        </member>
        <member name="P:NetOffice.Running.RunningWindowTable.AccessibleWindowTarget.MainClassNameEnd">
            <summary>
            EndsWith Part of main window class name if its compared as StartsEndWith
            </summary>
        </member>
        <member name="P:NetOffice.Running.RunningWindowTable.AccessibleWindowTarget.NameCompare">
            <summary>
            Determine how RunningWindowTable do compares the main window class name
            </summary>
        </member>
        <member name="P:NetOffice.Running.RunningWindowTable.AccessibleWindowTarget.ChildPath">
            <summary>
            Path to a child window
            </summary>
        </member>
        <member name="P:NetOffice.Running.RunningWindowTable.AccessibleWindowTarget.AccPropertyName">
            <summary>
            If its not null or empty RunningObjectTable want invoke a property with these name from IAccessible proxy
            </summary>
        </member>
        <member name="M:NetOffice.Running.RunningWindowTable.AccessibleWindowTarget.ToString">
            <summary>
            Returns a System.String that represents the instance
            </summary>
            <returns>System.String</returns>
        </member>
        <member name="M:NetOffice.Running.RunningWindowTable.RunningWindowTableItemCollection.Dispose">
            <summary>
            Dispose the instance
            </summary>
        </member>
        <member name="M:NetOffice.Running.RunningWindowTable.RunningWindowTableItemCollection.ToString">
            <summary>
            Returns a System.String that represents the instance
            </summary>
            <returns>System.String</returns>
        </member>
        <member name="T:NetOffice.Running.ChildWindowBatchEnumerator">
            <summary>
            Try to find specific child windows in a deep level
            </summary>
        </member>
        <member name="T:NetOffice.Running.ChildWindowBatchEnumerator.SearchCriteria">
            <summary>
            Child window search criteria
            </summary>
        </member>
        <member name="M:NetOffice.Running.ChildWindowBatchEnumerator.SearchCriteria.#ctor">
            <summary>
            Creates an instance of the class
            </summary>
        </member>
        <member name="M:NetOffice.Running.ChildWindowBatchEnumerator.SearchCriteria.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="className"></param>
        </member>
        <member name="P:NetOffice.Running.ChildWindowBatchEnumerator.SearchCriteria.ClassName">
            <summary>
            Target window class name
            </summary>
        </member>
        <member name="M:NetOffice.Running.ChildWindowBatchEnumerator.SearchCriteria.ToString">
            <summary>
            Returns a System.String that represents the instance
            </summary>
            <returns>System.String</returns>
        </member>
        <member name="M:NetOffice.Running.ChildWindowBatchEnumerator.#ctor(System.IntPtr)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="handle">target window handle</param>
        </member>
        <member name="P:NetOffice.Running.ChildWindowBatchEnumerator.SearchOrder">
            <summary>
            Search order as top down batch
            </summary>
        </member>
        <member name="M:NetOffice.Running.ChildWindowBatchEnumerator.EnumerateWindows(System.Int32)">
            <summary>
            Enumerates all child windows. WARNING: The method returns null if operation timeout is reached.
            </summary>
            <param name="milliSecondsTimeout">a timeout for the operation. when a window is busy or non responding these method freeze. you can handle this with the operation timeout</param>
            <returns>result array or null</returns>
        </member>
        <member name="T:NetOffice.Running.Win32">
            <summary>
            Encapsulate some external Win32 operations to deal with windows desktop
            </summary>
        </member>
        <member name="M:NetOffice.Running.Win32.GetClassName(System.IntPtr)">
            <summary>
            Retrieves the name of the class to which the specified window belongs. 
            </summary>
            <param name="hwnd">A handle to the window and, indirectly, the class to which the window belongs. </param>
            <returns>If the function succeeds, the return value is the number of characters copied to the buffer, not including the terminating null character.</returns>
        </member>
        <member name="M:NetOffice.Running.Win32.GetWindowText(System.IntPtr)">
            <summary>
            Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, GetWindowText cannot retrieve the text of a control in another application.
            </summary>
            <param name="hwnd">A handle to the window or control containing the text. </param>
            <returns>The buffer that will receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a null character.</returns>
        </member>
        <member name="M:NetOffice.Running.Win32.GetWindowThreadProcessId(System.IntPtr)">
            <summary>
            Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window. 
            </summary>
            <param name="hwnd">A handle to the window. </param>
            <returns>The return value is the identifier of the thread that created the window.</returns>
        </member>
        <member name="M:NetOffice.Running.Win32.AccessibleObjectFromWindow(System.IntPtr)">
            <summary>
            Retrieves the address of the specified interface for the object associated with the specified window.
            </summary>
            <param name="hwnd">Specifies the handle of a window for which an object is to be retrieved. </param>
            <returns>Address of a pointer variable that receives the address of the specified interface.</returns>
        </member>
        <member name="T:NetOffice.Running.RunningObjectTable">
            <summary>
            A Running Object Table(ROT) Wrapper
            </summary>
        </member>
        <member name="M:NetOffice.Running.RunningObjectTable.RunningObjectTableItemCollection.Dispose">
            <summary>
            Dispose the instance
            </summary>
        </member>
        <member name="M:NetOffice.Running.RunningObjectTable.RunningObjectTableItemCollection.ToString">
            <summary>
            Returns a System.String that represents the instance
            </summary>
            <returns>System.String</returns>
        </member>
        <member name="F:NetOffice.Running.RunningObjectTable.ComponentNamePrefix">
            <summary>
            Some MS Office applications in specific versions use the "Microsoft " prefix in the COM server name.
            </summary>
        </member>
        <member name="M:NetOffice.Running.RunningObjectTable.GetProxyCount(System.String,System.String)">
            <summary>
            Returns the count of open com proxies
            </summary>
            <param name="componentName">component name or null as wildcard</param>
            <param name="className">class name or null as wildcard</param>
            <returns>count of open com proxies</returns>
        </member>
        <member name="M:NetOffice.Running.RunningObjectTable.GetActiveProxy(System.String,System.String,System.Boolean)">
            <summary>
            Returns a running com proxy from the running object table. the method takes the first proxy there matched with the input parameters.
            WARNING: the method returns always the first com proxy from the running object table if multiple (match) proxies exists.
            </summary>
            <param name="componentName">component name, for example Excel</param>
            <param name="className">class name, for example Application</param>
            <param name="throwExceptionIfNothingFound">throw an exception if no proxy was found</param>
            <returns>a native COM proxy</returns>
        </member>
        <member name="M:NetOffice.Running.RunningObjectTable.GetActiveProxies(System.String,System.String)">
            <summary>
            Returns all running com proxies from the running object table there matched with the input parameters 
            WARNING: the method returns always the first com proxy from the running object table if multiple (match) proxies exists.
            </summary>
            <param name="componentName">component name, for example Excel, null is a wildcard </param>
            <param name="className">class name, for example Application, null is a wildcard </param>
            <returns>COM proxy enumerator</returns>
        </member>
        <member name="M:NetOffice.Running.RunningObjectTable.GetActiveProxyInformations(System.String,System.String)">
            <summary>
            Returns all running com proxies + add. information from the running object table there matched with the input parameters
            WARNING: the method returns always the first com proxy from the running object table if multiple (match) proxies exists.
            </summary>
            <param name="componentName">name of the target component</param>
            <param name="className">name of the target proxy class name</param>
            <returns>IDisposableEnumeration with proxy information</returns>
        </member>
        <member name="M:NetOffice.Running.RunningObjectTable.GetActiveProxyInformations">
            <summary>
            Returns all running com proxies + add. information from the running object table there matched with the input parameters
            WARNING: the method returns always the first com proxy from the running object table if multiple (match) proxies exists.
            </summary>
            <returns>IDisposableEnumeration with proxy information</returns>
        </member>
        <member name="T:NetOffice.Running.ChildWindowEnumerator">
            <summary>
            Enumerate all child windows for a window handle
            </summary>
        </member>
        <member name="M:NetOffice.Running.ChildWindowEnumerator.#ctor(System.IntPtr)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="handle">target window handle</param>
        </member>
        <member name="M:NetOffice.Running.ChildWindowEnumerator.#ctor(System.IntPtr,System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="handle">target window handle</param>
            <param name="textFilter">optional text filter to compare window text</param>
        </member>
        <member name="M:NetOffice.Running.ChildWindowEnumerator.EnumerateWindows(System.Int32)">
            <summary>
            Enumerates all child windows. WARNING: The method returns null if operation timeout is reached.
            </summary>
            <param name="milliSecondsTimeout">a timeout for the operation. when a window is busy or non responding these method freeze. you can handle this with the operation timeout</param>
            <returns>result array or null</returns>
        </member>
        <member name="T:NetOffice.Running.WindowEnumerator">
            <summary>
            Enumerate Top Level Windows on Desktop
            </summary>
        </member>
        <member name="T:NetOffice.Running.WindowEnumerator.FilterMode">
            <summary>
            Internal operation mode 
            </summary>
        </member>
        <member name="F:NetOffice.Running.WindowEnumerator.FilterMode.Full">
            <summary>
             Class name must match totally
            </summary>
        </member>
        <member name="F:NetOffice.Running.WindowEnumerator.FilterMode.Start">
            <summary>
            Class name must match in start
            </summary>
        </member>
        <member name="F:NetOffice.Running.WindowEnumerator.FilterMode.End">
            <summary>
            Class name must match in end
            </summary>
        </member>
        <member name="F:NetOffice.Running.WindowEnumerator.FilterMode.StartEnd">
            <summary>
            Class name must match in start and end of name
            </summary>
        </member>
        <member name="M:NetOffice.Running.WindowEnumerator.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="filter">optional class name filter or null</param>
        </member>
        <member name="M:NetOffice.Running.WindowEnumerator.#ctor(System.String,NetOffice.Running.WindowEnumerator.FilterMode)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="filter">optional class name filter or null</param>
            <param name="mode">current filter mode</param>
        </member>
        <member name="M:NetOffice.Running.WindowEnumerator.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="startsWithfilter">starts with class name filter</param>
            <param name="endsWithFilter">ends with class name filter</param>
        </member>
        <member name="M:NetOffice.Running.WindowEnumerator.#ctor(System.String,System.String,NetOffice.Running.WindowEnumerator.FilterMode)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="startsWithfilter">starts with class name filter</param>
            <param name="endsWithFilter">ends with class name filter</param>
            <param name="mode">current filter mode</param>
        </member>
        <member name="P:NetOffice.Running.WindowEnumerator.Filter">
            <summary>
            Optional class name filter or null
            </summary>
        </member>
        <member name="P:NetOffice.Running.WindowEnumerator.StartsWithFilter">
            <summary>
            Class name begin
            </summary>
        </member>
        <member name="P:NetOffice.Running.WindowEnumerator.EndsWithFilter">
            <summary>
            Class name end
            </summary>
        </member>
        <member name="P:NetOffice.Running.WindowEnumerator.Mode">
            <summary>
            Current Filter Mode
            </summary>
        </member>
        <member name="M:NetOffice.Running.WindowEnumerator.GetWindowRect(System.IntPtr)">
            <summary>
            Encapsulate WindowsAPI method GetWindowRect
            </summary>
            <param name="hwnd">target window handle</param>
            <returns>window coordinates dimensions to screen</returns>
        </member>
        <member name="M:NetOffice.Running.WindowEnumerator.EnumerateWindows(System.Int32)">
            <summary>
            Enumerates all top level windows on desktop. WARNING: The method returns null if operation timeout is reached.
            </summary>
            <param name="milliSecondsTimeout">a timeout for the operation. when a desktop windows is busy or non responding these method freeze. you can handle this with the operation timeout</param>
            <returns>result array or null</returns>
        </member>
        <member name="M:NetOffice.Running.WindowEnumerator.IsVisible(System.IntPtr)">
            <summary>
            Returns information a window is currently visible
            </summary>
            <param name="handle">target window handle</param>
            <returns>true if window is visible, otherwise false</returns>
        </member>
        <member name="T:NetOffice.Running.ExcelApplicationWindow">
            <summary>
            Encapsulate Excel Main Window Operations
            </summary>
        </member>
        <member name="M:NetOffice.Running.ExcelApplicationWindow.GetApplicationProxyFromHandle(System.IntPtr)">
            <summary>
            Try get the com application proxy from application window handle
            </summary>
            <param name="hwnd">excel application window handle</param>
            <returns>com proxy or null</returns>
        </member>
        <member name="M:NetOffice.Running.ExcelApplicationWindow.GetApplicationProxiesFromHandle(System.IntPtr[])">
            <summary>
            Returns a list with application proxies
            </summary>
            <param name="hwnds">main window handles</param>
            <returns>list of application proxies</returns>
        </member>
        <member name="T:NetOffice.Running.ProcessElevation">
            <summary>
            Find out another process has admin elevations
            </summary>
        </member>
        <member name="M:NetOffice.Running.ProcessElevation.ConvertToProcessElevation(System.Nullable{System.Boolean})">
            <summary>
            Converts nullable bool to <see cref="T:NetOffice.Running.ProcessElevation"/> value.
            </summary>
            <param name="value">target value to convert</param>
            <returns>process elevation</returns>
        </member>
        <member name="M:NetOffice.Running.ProcessElevation.IsProcessElevated(System.IntPtr)">
            <summary>
            Returns information about process elevation
            </summary>
            <param name="processHandle">target process id</param>
            <returns>true if elevated, null if unknown</returns>
        </member>
        <member name="T:NetOffice.ICOMObject">
            <summary>
            Represents a managed/wrapped COM proxy implementation 
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObject.SyncRoot">
            <summary>
            Monitor Lock
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObject.Factory">
            <summary>
            The associated factory
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObject.Invoker">
            <summary>
            The associated invoker
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObject.Settings">
            <summary>
            The associated settings
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObject.Console">
            <summary>
            The associated console
            </summary>
        </member>
        <member name="M:NetOffice.ICOMObject.To``1">
            <summary>
            Clone instance as target type of T
            </summary>
            <typeparam name="T">any other type to convert</typeparam>
            <returns>cloned instance</returns>
            <exception cref="T:NetOffice.Exceptions.CloneException">An unexpected error occurs.</exception>
        </member>
        <member name="T:NetOffice.OnDisposeEventArgs">
            <summary>
            OnDispose Event Arguments
            </summary>
        </member>
        <member name="M:NetOffice.OnDisposeEventArgs.#ctor(NetOffice.ICOMObject)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="sender">the target COM object</param>
        </member>
        <member name="P:NetOffice.OnDisposeEventArgs.Sender">
            <summary>
            Target COM object
            </summary>
        </member>
        <member name="P:NetOffice.OnDisposeEventArgs.Cancel">
            <summary>
            Skip flag, you can cancel the operation if you want
            </summary>
        </member>
        <member name="T:NetOffice.OnDisposeEventHandler">
            <summary>
            EventHandler delegate for <see cref="E:NetOffice.ICOMObjectDisposable.OnDispose"/>
            </summary>
            <param name="eventArgs">dispose arguments</param>
        </member>
        <member name="T:NetOffice.ICOMObjectDisposable">
            <summary>
            Represents various dispose possibilities
            </summary>
        </member>
        <member name="E:NetOffice.ICOMObjectDisposable.OnDispose">
            <summary>
            Occurs when the instance is on the way to dispose
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObjectDisposable.IsDisposed">
            <summary>
            Returns information the instance is already disposed
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObjectDisposable.IsCurrentlyDisposing">
            <summary>
            Returns information the instance is currently in dispose operation
            </summary>
        </member>
        <member name="M:NetOffice.ICOMObjectDisposable.Dispose(System.Boolean)">
            <summary>
            Dispose the instance and all child instances
            </summary>
            <param name="disposeEventBinding">dispose open event subscriptions</param>
            <exception cref="T:NetOffice.Exceptions.COMDisposeException">An unexpected error occurs.</exception>
        </member>
        <member name="T:NetOffice.ICOMObjectEvents">
            <summary>
            Represents information about the event state
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObjectEvents.IsEventBinding">
            <summary>
            Returns information the instance offers events
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObjectEvents.IsEventBridgeInitialized">
            <summary>
            Returns information the instance has been initialized the internal event bridge
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObjectEvents.IsWithEventRecipients">
            <summary>
            Returns the count of event subscriptions from the instance
            </summary>
        </member>
        <member name="T:NetOffice.ICOMObjectProxy">
            <summary>
            Represents a COM proxy wrapper with type information and access to the underlying proxy
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObjectProxy.UnderlyingObject">
            <summary>
            Underlying COM proxy
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObjectProxy.UnderlyingType">
            <summary>
            Type information of the <see cref="P:NetOffice.ICOMObjectProxy.UnderlyingObject"/>
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObjectProxy.UnderlyingTypeName">
            <summary>
            Full type name of the <see cref="P:NetOffice.ICOMObjectProxy.UnderlyingObject"/>
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObjectProxy.UnderlyingFriendlyTypeName">
            <summary>
            Friendly type name of the <see cref="P:NetOffice.ICOMObjectProxy.UnderlyingObject"/>
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObjectProxy.UnderlyingComponentName">
            <summary>
            Component name of the <see cref="P:NetOffice.ICOMObjectProxy.UnderlyingObject"/>
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObjectProxy.InstanceName">
            <summary>
            Full name of the NetOffice Wrapper class
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObjectProxy.InstanceFriendlyName">
            <summary>
            Full friendly name of the NetOffice Wrapper class
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObjectProxy.InstanceComponentName">
            <summary>
            Name of the hosting NetOffice component
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObjectProxy.InstanceType">
            <summary>
            Type information from <see cref="T:NetOffice.ICOMObject"/> instance
            </summary>
        </member>
        <member name="T:NetOffice.ICOMObjectTable">
            <summary>
            Represents an <see cref="T:NetOffice.ICOMObject"/> parent/child relationship in NetOffice proxy management.
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObjectTable.ParentObject">
            <summary>
            The parent object which this instance comes from or null.
            </summary>
        </member>
        <member name="P:NetOffice.ICOMObjectTable.ChildObjects">
            <summary>
            Associated children objects of this instance.
            </summary>
        </member>
        <member name="M:NetOffice.ICOMObjectTable.AddChildObject(NetOffice.ICOMObject)">
            <summary>
            Add a new child object to this instance.
            </summary>
            <param name="childObject">new child instance</param>
            <exception cref="T:NetOffice.Exceptions.COMChildRelationException">Unexpected error</exception>
        </member>
        <member name="M:NetOffice.ICOMObjectTable.RemoveChildObject(NetOffice.ICOMObject)">
            <summary>
            Remove a child object from this instance.
            </summary>
            <param name="childObject">child instance</param>
            <returns>true if childObject has been removed, otherwise false</returns>
            <exception cref="T:NetOffice.Exceptions.COMChildRelationException">Unexpected error</exception>
        </member>
        <member name="T:NetOffice.ICOMObjectTableDisposable">
            <summary>
            Represents various dispose possibilities to free child instances
            </summary>
        </member>
        <member name="M:NetOffice.ICOMObjectTableDisposable.DisposeChildInstances">
            <summary>
            Dispose all child instances
            </summary>
            <exception cref="T:NetOffice.Exceptions.COMDisposeException">An unexpected error occurs.</exception>
        </member>
        <member name="M:NetOffice.ICOMObjectTableDisposable.DisposeChildInstances(System.Boolean)">
            <summary>
            Dispose all child instances
            </summary>
            <param name="disposeEventBinding">dispose open event subscriptions</param>
            <exception cref="T:NetOffice.Exceptions.COMDisposeException">An unexpected error occurs.</exception>
        </member>
        <member name="T:NetOffice.IDispatch">
            <summary>
            Exposes objects, methods and properties to programming tools and other applications that support Automation. COM components implement the IDispatch interface to enable access by Automation clients, such as Visual Basic.
            </summary>
        </member>
        <member name="M:NetOffice.IDispatch.GetTypeInfoCount">
            <summary>
            Retrieves the number of type information interfaces that an object provides (either 0 or 1)
            </summary>
            <returns>
            This method can return one of these values
            S_OK - Success
            E_NOTIMPL - Failure
            </returns>
        </member>
        <member name="M:NetOffice.IDispatch.GetTypeInfo(System.Int32,System.Int32)">
            <summary>
            Retrieves the type information for an object, which can then be used to get the type information for an interface
            </summary>
            <param name="iTInfo">The type information to return. Pass 0 to retrieve type information for the IDispatch implementation</param>
            <param name="lcid">The locale identifier for the type information. An object may be able to return different type information for different languages. This is important for classes that support localized member names. For classes that do not support localized member names, this parameter can be ignored</param>
            <returns>The requested type information object</returns>
        </member>
        <member name="M:NetOffice.IDispatch.GetIDsOfNames(System.Guid@,System.String[],System.Int32,System.Int32,System.Int32[])">
            <summary>
            Maps a single member and an optional set of argument names to a corresponding set of integer DISPIDs, which can be used on subsequent calls to Invoke.
            </summary>
            <param name="riid">Reserved for future use. Must be IID_NULL</param>
            <param name="rgsNames">The array of names to be mapped</param>
            <param name="cNames">The count of the names to be mapped</param>
            <param name="lcid">The locale context in which to interpret the names</param>
            <param name="rgDispId">Caller-allocated array, each element of which contains an identifier (ID) corresponding to one of the names passed in the rgszNames array. The first element represents the member name. The subsequent elements represent each of the member's parameters</param>
            <returns>
            This method can return one of these values
            S_OK - Success
            E_OUTOFMEMORY - Out of memory
            DISP_E_UNKNOWNNAME - One or more of the specified names were not known. The returned array of DISPIDs contains DISPID_UNKNOWN for each entry that corresponds to an unknown name
            DISP_E_UNKNOWNLCID
            </returns> - The locale identifier (LCID) was not recognized
        </member>
        <member name="M:NetOffice.IDispatch.Invoke(System.Int32,System.Guid@,System.Int32,System.Int32,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.Object[],System.Runtime.InteropServices.ComTypes.EXCEPINFO@,System.IntPtr[])">
            <summary>
            Provides access to properties and methods exposed by an object
            </summary>
            <param name="dispIdMember">Identifies the member. Use GetIDsOfNames or the object's documentation to obtain the dispatch identifier.</param>
            <param name="riid">Reserved for future use. Must be IID_NULL</param>
            <param name="lcid">The locale context in which to interpret arguments. The lcid is used by the GetIDsOfNames function, and is also passed to Invoke to allow the object to interpret its arguments specific to a locale</param>
            <param name="dwFlags">Flags describing the context of the Invoke call</param>
            <param name="pDispParams">Pointer to a DISPPARAMS structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the array</param>
            <param name="pVarResult">Pointer to the location where the result is to be stored, or NULL if the caller expects no result. This argument is ignored if DISPATCH_PROPERTYPUT or DISPATCH_PROPERTYPUTREF is specified</param>
            <param name="pExcepInfo">Pointer to a structure that contains exception information. This structure should be filled in if DISP_E_EXCEPTION is returned. Can be NULL</param>
            <param name="pArgErr">The index within rgvarg of the first argument that has an error. Arguments are stored in pDispParams->rgvarg in reverse order, so the first argument is the one with the highest index in the array. This parameter is returned only when the resulting return value is DISP_E_TYPEMISMATCH or DISP_E_PARAMNOTFOUND. This argument can be set to null</param>
            <returns>
            See http://msdn.microsoft.com/de-de/library/windows/desktop/ms221479%28v=vs.85%29.aspx
            </returns>
        </member>
        <member name="T:NetOffice.Callers.QuitCaller">
            <summary>
            <see cref="T:NetOffice.ICOMObject"/> Quit method caller
            </summary>
        </member>
        <member name="M:NetOffice.Callers.QuitCaller.TryCall(NetOffice.ICOMObject)">
            <summary>
            Try call "Quit" method without arguments when EnableAutomaticQuit is enabled
            </summary>
            <param name="instance">target instance</param>
            <returns>true if quit call proceed, otherwise false</returns>
        </member>
        <member name="M:NetOffice.Callers.QuitCaller.TryCall(NetOffice.Settings,NetOffice.Invoker,NetOffice.ICOMObject)">
            <summary>
            Try call "Quit" method without arguments when EnableAutomaticQuit is enabled
            </summary>
            <param name="settings">settings to check EnableAutomaticQuit</param>
            <param name="invoker">invoker to call quit</param>
            <param name="instance">target instance</param>
            <returns>true if quit call proceed, otherwise false</returns>
        </member>
        <member name="M:NetOffice.Callers.QuitCaller.ForceTryCall(NetOffice.ICOMObject)">
            <summary>
            Try call "Quit" method without arguments even when EnableAutomaticQuit is disabled
            </summary>
            <param name="instance">target instance</param>
            <returns>true if quit call proceed, otherwise false</returns>
        </member>
        <member name="M:NetOffice.Callers.QuitCaller.ForceTryCall(NetOffice.Invoker,NetOffice.ICOMObject)">
            <summary>
            Try call "Quit" method without arguments even when EnableAutomaticQuit is disabled
            </summary>
            <param name="invoker">invoker to call quit</param>
            <param name="instance">target instance</param>
            <returns>true if quit call proceed, otherwise false</returns>
        </member>
        <member name="T:NetOffice.DebugConsoleMode">
            <summary>
            DebugConsole operation mode 
            </summary>
        </member>
        <member name="F:NetOffice.DebugConsoleMode.None">
            <summary>
            Debug log is disabled
            </summary>
        </member>
        <member name="F:NetOffice.DebugConsoleMode.Console">
            <summary>
            Debug log is redirected to System.Console
            </summary>
        </member>
        <member name="F:NetOffice.DebugConsoleMode.LogFile">
            <summary>
            Debug log append to a logfile
            </summary>
        </member>
        <member name="F:NetOffice.DebugConsoleMode.Trace">
            <summary>
            Debug log is redirected to System.Diagnostics.Trace
            </summary>
        </member>
        <member name="T:NetOffice.PerformanceTrace">
            <summary>
            Call Level Performance Tracer
            </summary>
        </member>
        <member name="T:NetOffice.PerformanceTrace.CallType">
            <summary>
            Specify the kind of call
            </summary>
        </member>
        <member name="F:NetOffice.PerformanceTrace.CallType.Method">
            <summary>
            Method without return value
            </summary>
        </member>
        <member name="F:NetOffice.PerformanceTrace.CallType.Function">
            <summary>
            Method with return value
            </summary>
        </member>
        <member name="F:NetOffice.PerformanceTrace.CallType.PropertyGet">
            <summary>
            Property Get
            </summary>
        </member>
        <member name="F:NetOffice.PerformanceTrace.CallType.PropertySet">
            <summary>
            Property Set
            </summary>
        </member>
        <member name="T:NetOffice.PerformanceTrace.PerformanceAlertEventArgs">
            <summary>
            Alert event arguments
            </summary>
        </member>
        <member name="P:NetOffice.PerformanceTrace.PerformanceAlertEventArgs.ComponentName">
            <summary>
            Name of the corresponding NetOffice component
            </summary>
        </member>
        <member name="P:NetOffice.PerformanceTrace.PerformanceAlertEventArgs.EntityName">
            <summary>
            Class name of the NetOffice wrapper
            </summary>
        </member>
        <member name="P:NetOffice.PerformanceTrace.PerformanceAlertEventArgs.MethodName">
            <summary>
            Method or property name
            </summary>
        </member>
        <member name="P:NetOffice.PerformanceTrace.PerformanceAlertEventArgs.TimeElapsedMS">
            <summary>
            The total elapsed time in milliseconds
            </summary>
        </member>
        <member name="P:NetOffice.PerformanceTrace.PerformanceAlertEventArgs.Ticks">
            <summary>
            The total elapsed ticks
            </summary>
        </member>
        <member name="P:NetOffice.PerformanceTrace.PerformanceAlertEventArgs.CallType">
            <summary>
            Calling type
            </summary>
        </member>
        <member name="P:NetOffice.PerformanceTrace.PerformanceAlertEventArgs.Arguments">
            <summary>
            Given arguments as any
            </summary>
        </member>
        <member name="M:NetOffice.PerformanceTrace.PerformanceAlertEventArgs.ToString">
            <summary>
            Returns a System.String that represents the instance
            </summary>
            <returns>System.String</returns>
        </member>
        <member name="T:NetOffice.PerformanceTrace.PerformanceAlertEventHandler">
            <summary>
            PerformanceTrace alert event handler
            </summary>
            <param name="sender">sender instance</param>
            <param name="args">alert information arguments</param>
        </member>
        <member name="E:NetOffice.PerformanceTrace.Alert">
            <summary>
            Occurs if a method or property need more time as specified
            </summary>
        </member>
        <member name="P:NetOffice.PerformanceTrace.Enabled">
            <summary>
            Enable or disable the performance trace system
            </summary>
        </member>
        <member name="P:NetOffice.PerformanceTrace.Item(System.String)">
            <summary>
            Returns performances settings instance for a NetOffice component
            </summary>
            <param name="componentName">name of the component. for example:ExcelApi</param>
            <returns>settings instance</returns>
        </member>
        <member name="P:NetOffice.PerformanceTrace.Item(System.String,System.String)">
            <summary>
            Returns performance settings instance for a NetOffice wrapper class
            </summary>
            <param name="componentName">name of the component. for example:ExcelApi</param>
            <param name="entityName">name of the class. for example:Range or Application</param>
            <returns>settings instance</returns>
        </member>
        <member name="P:NetOffice.PerformanceTrace.Item(System.String,System.String,System.String)">
            <summary>
            Returns performance settings instance for a NetOffice wrapper class
            </summary>
            <param name="componentName">name of the component. for example:ExcelApi</param>
            <param name="entityName">name of the class. for example:Range or Application</param>
            <param name="methodName">method or property name. for example: Visible or Activate</param>
            <returns>settings instance</returns>
        </member>
        <member name="P:NetOffice.PerformanceTrace.OnPropertyChanged">
            <summary>
            Occurs when a property value changes
            </summary>
        </member>
        <member name="M:NetOffice.PerformanceTrace.Clear">
            <summary>
            Clear all performance trace settings
            </summary>
        </member>
        <member name="M:NetOffice.PerformanceTrace.GetEnumerator">
            <summary>
            Sequence of all traces
            </summary>
            <returns>sequence</returns>
        </member>
        <member name="M:NetOffice.PerformanceTrace.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Sequence of all traces
            </summary>
            <returns>sequence</returns>
        </member>
        <member name="M:NetOffice.PerformanceTrace.ToString">
            <summary>
            Returns a System.String that represents the instance
            </summary>
            <returns>System.String</returns>
        </member>
        <member name="T:NetOffice.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NetOffice.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NetOffice.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:NetOffice.CacheOptions">
            <summary>
            Cache options for the <see cref="M:NetOffice.Core.Initialize"/> method.
            </summary>
        </member>
        <member name="F:NetOffice.CacheOptions.ClearExistingCache">
            <summary>
            Clear current information about existing types and loaded NetOffice assemblies.
            </summary>
        </member>
        <member name="F:NetOffice.CacheOptions.KeepExistingCacheAlive">
            <summary>
            Any new type or NetOffice assembly information will be added to the existing cache.
            </summary>
        </member>
        <member name="T:NetOffice.DebugConsole">
            <summary>
            Offers various debug, log and diagnostic functionality
            </summary>
        </member>
        <member name="T:NetOffice.DebugConsole.MessageKind">
            <summary>
            Console Message Kind
            </summary>
        </member>
        <member name="F:NetOffice.DebugConsole.MessageKind.Information">
            <summary>
            Information Message
            </summary>
        </member>
        <member name="F:NetOffice.DebugConsole.MessageKind.Warning">
            <summary>
            Warning Message
            </summary>
        </member>
        <member name="F:NetOffice.DebugConsole.MessageKind.Error">
            <summary>
            Error Message
            </summary>
        </member>
        <member name="T:NetOffice.DebugConsole.ConsoleMessage">
            <summary>
            Represents a debug console message
            </summary>
        </member>
        <member name="M:NetOffice.DebugConsole.ConsoleMessage.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given message as any</param>
        </member>
        <member name="M:NetOffice.DebugConsole.ConsoleMessage.#ctor(NetOffice.DebugConsole.MessageKind,System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="kind">kind of given message</param>
            <param name="message">given message as any</param>
        </member>
        <member name="P:NetOffice.DebugConsole.ConsoleMessage.Message">
            <summary>
            Given Message
            </summary>
        </member>
        <member name="P:NetOffice.DebugConsole.ConsoleMessage.Time">
            <summary>
            Message Time
            </summary>
        </member>
        <member name="P:NetOffice.DebugConsole.ConsoleMessage.Kind">
            <summary>
            Kind of given message
            </summary>
        </member>
        <member name="M:NetOffice.DebugConsole.ConsoleMessage.ToString">
            <summary>
            Returns a System.String that represents the instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetOffice.DebugConsole.PipeErrorEventArgs">
            <summary>
            Pipe Error Event Arguments
            </summary>
        </member>
        <member name="M:NetOffice.DebugConsole.PipeErrorEventArgs.#ctor(System.String,System.String,System.Exception,System.Boolean)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="pipeName">pipe name</param>
            <param name="text">message</param>
            <param name="error">error information</param>
            <param name="disableSharedOutput">disable shared output</param>
        </member>
        <member name="M:NetOffice.DebugConsole.PipeErrorEventArgs.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="pipeName">pipe name</param>
            <param name="text">message</param>
            <param name="error">error information</param>
        </member>
        <member name="P:NetOffice.DebugConsole.PipeErrorEventArgs.PipeName">
            <summary>
            Pipe Name
            </summary>
        </member>
        <member name="P:NetOffice.DebugConsole.PipeErrorEventArgs.Text">
            <summary>
            Message Text
            </summary>
        </member>
        <member name="P:NetOffice.DebugConsole.PipeErrorEventArgs.Error">
            <summary>
            Error Information
            </summary>
        </member>
        <member name="P:NetOffice.DebugConsole.PipeErrorEventArgs.DisableSharedOutput">
            <summary>
            Disable the shared output
            </summary>
        </member>
        <member name="T:NetOffice.DebugConsole.MessageAddedHandler">
            <summary>
            Message Added delegate
            </summary>
            <param name="sender">sender instance</param>
            <param name="message">new message</param>
        </member>
        <member name="T:NetOffice.DebugConsole.MessageRemovedHandler">
            <summary>
            Message Removed delegate
            </summary>
            <param name="sender">sender instance</param>
            <param name="message">removed message</param>
            <param name="index">former message index</param>
        </member>
        <member name="T:NetOffice.DebugConsole.MessageClearHandler">
            <summary>
            Message Clear delegate
            </summary>
            <param name="sender">sender instance</param>
        </member>
        <member name="E:NetOffice.DebugConsole.MessageAdded">
            <summary>
            Occurs when a message has been added
            </summary>
        </member>
        <member name="E:NetOffice.DebugConsole.MessageRemoved">
            <summary>
             Occurs when a message has been removed
            </summary>
        </member>
        <member name="E:NetOffice.DebugConsole.MessageClear">
            <summary>
            Occurs when the message list has been cleared
            </summary>
        </member>
        <member name="E:NetOffice.DebugConsole.PipeError">
            <summary>
            Occurs when Console failed to send shared output
            </summary>
        </member>
        <member name="P:NetOffice.DebugConsole.MessagesInternal">
            <summary>
            Direct access to messages
            </summary>
        </member>
        <member name="P:NetOffice.DebugConsole.Default">
            <summary>
            Shared Default Instance
            </summary>
        </member>
        <member name="P:NetOffice.DebugConsole.Name">
            <summary>
            Name of the Console instance
            </summary>
        </member>
        <member name="P:NetOffice.DebugConsole.AppendTimeInfoEnabled">
            <summary>
            append current time information in messages
            </summary>
        </member>
        <member name="P:NetOffice.DebugConsole.Mode">
            <summary>
            operation mode
            </summary>
        </member>
        <member name="P:NetOffice.DebugConsole.EnableSharedOutput">
            <summary>
            Send a all messages to a named pipe.
            </summary>
        </member>
        <member name="P:NetOffice.DebugConsole.FileName">
            <summary>
            Name full file path and name of a logfile, must be set if Mode == LogFile
            </summary>
        </member>
        <member name="P:NetOffice.DebugConsole.Messages">
            <summary>
            Returns all collected messages as a string enumerator
            </summary>
        </member>
        <member name="M:NetOffice.DebugConsole.ClearMessagesList">
            <summary>
            Clears message buffer
            </summary>
        </member>
        <member name="M:NetOffice.DebugConsole.WriteLine(System.String,System.Object[])">
            <summary>
            Write log message
            </summary>
            <param name="message">given message as any</param>
            <param name="args">message arguments</param>
        </member>
        <member name="M:NetOffice.DebugConsole.WriteLine(System.Object)">
            <summary>
            Write log message
            </summary>
            <param name="any">given object as any</param>
        </member>
        <member name="M:NetOffice.DebugConsole.WriteLine(System.String)">
            <summary>
            Write log message
            </summary>
            <param name="message">given message as any</param>
        </member>
        <member name="M:NetOffice.DebugConsole.WriteException(System.Exception)">
            <summary>
            Write exception log message
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:NetOffice.DebugConsole.AppendToLogFile(System.String)">
            <summary>
            Append message to logfile
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NetOffice.DebugConsole.CreateExecptionLog(System.Exception)">
            <summary>
            Convert an exception to a string
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:NetOffice.DebugConsole.AddToMessageList(System.String,NetOffice.DebugConsole.MessageKind)">
            <summary>
            Add a new item to the message list.
            </summary>
            <param name="text">text as any</param>
            <param name="kind">text kind</param>
        </member>
        <member name="M:NetOffice.DebugConsole.TryWritePipe(System.String)">
            <summary>
            Try write message to named pipe
            </summary>
            <param name="text">text to send</param>
        </member>
        <member name="M:NetOffice.DebugConsole.GetEnumerator">
            <summary>
            Returns an enumerable message sequence
            </summary>
            <returns>enumerator</returns>
        </member>
        <member name="M:NetOffice.DebugConsole.System#Collections#IEnumerable#GetEnumerator">
            <summary>
             Returns an enumerable message sequence
            </summary>
            <returns>enumerator</returns>
        </member>
        <member name="T:NetOffice.ExceptionMessageHandling">
            <summary>
            NetOffice wraps all thrown exceptions from MS Office applications in <see cref="T:NetOffice.Exceptions.NetOfficeCOMException"/>.
            This enum can be used to change the exception message.
            </summary>
        </member>
        <member name="F:NetOffice.ExceptionMessageHandling.Default">
            <summary>
            The standard message from <see cref="P:NetOffice.Settings.ExceptionDefaultMessage"/>.
            </summary>
        </member>
        <member name="F:NetOffice.ExceptionMessageHandling.CopyInnerExceptionMessageToTopLevelException">
            <summary>
            The message from the source exception.
            </summary>
        </member>
        <member name="F:NetOffice.ExceptionMessageHandling.CopyAllInnerExceptionMessagesToTopLevelException">
            <summary>
            All inner exception messages as a summary.
            </summary>
        </member>
        <member name="F:NetOffice.ExceptionMessageHandling.Diagnostics">
            <summary>
            The standard message from <see cref="P:NetOffice.Settings.ExceptionDiagnosticsMessage"/>.
            NetOffice will replace these placeholder strings in the diagnostics message (if they exist):
            {CallType}      - type of the call, such as method or property
            {CallInstance}  - friendly name of the COM object, using the <see cref="P:NetOffice.ICOMObjectProxy.InstanceFriendlyName"/>
            {Name}          - Name of the method or property
            {Args}          - given arguments
            </summary>
        </member>
        <member name="T:NetOffice.NetOfficeException">
            <summary>
            Indicates an exception occured in NetOffice.dll, not in corresponding NetOffice dependency assembly
            </summary>
        </member>
        <member name="M:NetOffice.NetOfficeException.#ctor(System.String)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
        </member>
        <member name="M:NetOffice.NetOfficeException.#ctor(System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:NetOffice.NetOfficeException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="message">given exception info</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="P:NetOffice.NetOfficeException.AppDomainIsDefault">
            <summary>
            Current app domain is default app domain
            </summary>
        </member>
        <member name="P:NetOffice.NetOfficeException.AppDomainId">
            <summary>
            Id from current app domain
            </summary>
        </member>
        <member name="P:NetOffice.NetOfficeException.AppDomainFriendlyName">
            <summary>
            Friendly name from current app domain
            </summary>
        </member>
        <member name="T:NetOffice.COMObject">
            <summary>
            Managed/wrapped COM Proxy and <see cref="T:NetOffice.ICOMObject"/> default implementation
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._createFromProgIdFailMessageHint">
            <summary>
            Create from ProgId Failed Message
            </summary>
        </member>
        <member name="F:NetOffice.COMObject.IID_IUnknown">
            <summary>
            the well know IUnknown Interface ID
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._parentObject">
            <summary>
            returns parent instance
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._underlyingType">
            <summary>
            returns Type of native proxy
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._proxyShare">
            <summary>
            Returns a shared access wrapper around the native wrapped RCW System._ComObject
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._isEnumerator">
            <summary>
            returns instance is an enumerator
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._callQuitInDispose">
            <summary>
            returns instance implement quit method and dispose call them automatically
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._isCurrentlyDisposing">
            <summary>
            returns instance is currently in disposing progress
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._isDisposed">
            <summary>
            returns instance is disposed (means unusable)
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._listChildObjects">
            <summary>
            child instance List
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._listSupportedEntities">
            <summary>
            list of runtime supported entities
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._disposeLock">
            <summary>
            monitor lock object for the main dispose method
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._childListLock">
            <summary>
            monitor lock object for accessing the child list
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._disposeChildLock">
            <summary>
            monitor lock object for dispose the child list
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._factory">
            <summary>
            associated factory
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._friendlyTypeName">
            <summary>
            FriendlyTypeName cache field
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._underlyingTypeName">
            <summary>
            UnderlyingTypeName cache field
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._underlyingComponentName">
            <summary>
            UnderlyingComponentName cache field
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._componentRootName">
            <summary>
            ComponentRootName cache field
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._instanceName">
            <summary>
            InstanceName cache field
            </summary>
        </member>
        <member name="F:NetOffice.COMObject._instanceType">
            <summary>
            InstanceType cache field
            </summary>
        </member>
        <member name="M:NetOffice.COMObject.#ctor(NetOffice.Core,NetOffice.ICOMObject)">
            <summary>
            Creates instance and replaces the given <paramref name="replacedObject"/> in proxy management.
            All children object created from <paramref name="replacedObject"/> are now children of the new instance.
            </summary>
            <param name="factory">current factory instance or null for default</param>
            <param name="replacedObject">the instance you want replace in current NetOffice proxy management</param>
        </member>
        <member name="M:NetOffice.COMObject.#ctor(NetOffice.ICOMObject)">
            <summary>
            Creates instance and replaces the given <paramref name="replacedObject"/> in proxy management.
            All children object created from <paramref name="replacedObject"/> are now children of the new instance.
            </summary>
            <param name="replacedObject">the instance you want replace in current NetOffice proxy management</param>
        </member>
        <member name="M:NetOffice.COMObject.#ctor(NetOffice.Core,System.Object)">
            <summary>
            Creates new instance with given proxy
            </summary>
            <param name="factory">current factory instance or null for default</param>
            <param name="comProxy">the now wrapped comProxy root instance</param>
        </member>
        <member name="M:NetOffice.COMObject.#ctor(NetOffice.ICOMObject,System.Object)">
            <summary>
            Creates new instance with given proxy and parent info
            </summary>
            <param name="parentObject">the parent instance where you have these instance from</param>
            <param name="comProxy">the now wrapped comProxy instance</param>
        </member>
        <member name="M:NetOffice.COMObject.#ctor(System.Object)">
            <summary>
            Creates new instance with given proxy
            </summary>
            <param name="comProxy">the now wrapped comProxy instance</param>
        </member>
        <member name="M:NetOffice.COMObject.#ctor(NetOffice.Core,NetOffice.ICOMObject,NetOffice.COMProxyShare)">
            <summary>
            Creates new instance with given proxy and parent info
            </summary>
            <param name="factory">current factory instance or null for default</param>
            <param name="parentObject">the parent instance where you have these instance from</param>
            <param name="proxyShare">proxy share instead of proxy</param>
        </member>
        <member name="M:NetOffice.COMObject.#ctor(NetOffice.Core,NetOffice.ICOMObject,System.Object)">
            <summary>
            Creates new instance with given proxy and parent info
            </summary>
            <param name="factory">current factory instance or null for default</param>
            <param name="parentObject">the parent instance where you have these instance from</param>
            <param name="comProxy">the now wrapped comProxy instance</param>
        </member>
        <member name="M:NetOffice.COMObject.#ctor(NetOffice.Core,NetOffice.ICOMObject,System.Object,System.Boolean)">
            <summary>
            Creates new instance with given proxy, parent info and info instance is an enumerator
            </summary>
            <param name="factory">current factory instance or null for default</param>
            <param name="parentObject">the parent instance where you have these instance from</param>
            <param name="comProxy">the now wrapped comProxy instance</param>
             <param name="isEnumerator"></param>
        </member>
        <member name="M:NetOffice.COMObject.#ctor(NetOffice.Core,NetOffice.ICOMObject,System.Object,System.Boolean,System.String)">
            <summary>
            Creates new instance with given proxy, parent info and info instance is an enumerator
            </summary>
            <param name="factory">current factory instance or null for default</param>
            <param name="parentObject">the parent instance where you have these instance from</param>
            <param name="comProxy">the now wrapped comProxy instance</param>
            <param name="isEnumerator">instance is an enumerator</param>
            <param name="name">custom instance name</param>
        </member>
        <member name="M:NetOffice.COMObject.#ctor(NetOffice.Core,NetOffice.ICOMObject,System.Object,System.Type)">
            <summary>
            Creates new instance with given proxy, type info and parent info
            </summary>
            <param name="factory">current factory instance or null for default</param>
            <param name="parentObject">the parent instance where you have these instance from</param>
            <param name="comProxy">the now wrapped <paramref name="comProxy"/> instance</param>
            <param name="comProxyType">type information of <paramref name="comProxy"/> or null</param>
        </member>
        <member name="M:NetOffice.COMObject.#ctor(NetOffice.ICOMObject,System.Object,System.Type)">
            <summary>
            Creates new instance with given proxy, type info and parent info
            </summary>
            <param name="parentObject">the parent instance where you have these instance from</param>
            <param name="comProxy">the now wrapped <paramref name="comProxy"/> instance</param>
            <param name="comProxyType">type information of <paramref name="comProxy"/> or null</param>
        </member>
        <member name="M:NetOffice.COMObject.#ctor(NetOffice.Core,System.String)">
            <summary>
            Creates a new instance for given ProgID value.
            </summary>
            <param name="factory">current factory instance</param>
            <param name="progId">ProgID of the object to create</param>
        </member>
        <member name="M:NetOffice.COMObject.#ctor(System.String)">
            <summary>
            Creates a new instance for given ProgID value.
            </summary>
            <param name="progId">ProgID of the object to create</param>
        </member>
        <member name="M:NetOffice.COMObject.#ctor">
            <summary>
            Stub
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.Empty">
            <summary>
            Always null (Nothing in Visual Basic)
            </summary>
        </member>
        <member name="M:NetOffice.COMObject.Create``1(System.Object)">
            <summary>
            Creates instance from proxy
            </summary>
            <typeparam name="T">result type</typeparam>
            <param name="comProxy">given proxy as any</param>
            <returns>new instance of T</returns>
            <exception cref="T:System.ArgumentNullException">argument is null(Nothing in Visual Basic)</exception>
            <exception cref="T:System.ArgumentException">given argument is not a proxy</exception>
            <exception cref="T:NetOffice.Exceptions.CreateInstanceException">unexpected error</exception>
        </member>
        <member name="M:NetOffice.COMObject.Create``1(NetOffice.Core,System.Object)">
            <summary>
            Creates instance from proxy
            </summary>
            <typeparam name="T">result type</typeparam>
            <param name="factory"></param>
            <param name="comProxy">given proxy as any</param>
            <returns>new instance of T</returns>
            <exception cref="T:System.ArgumentNullException">argument is null(Nothing in Visual Basic)</exception>
            <exception cref="T:System.ArgumentException">given argument is not a proxy</exception>
            <exception cref="T:NetOffice.Exceptions.CreateInstanceException">unexpected error</exception>
        </member>
        <member name="M:NetOffice.COMObject.CreateFromProxy(System.Object,System.Boolean)">
            <summary>
            NetOffice method: create object from proxy
            </summary>
            <param name="underlyingObject">given proxy as any</param>
            <param name="factoryAddObject">add instance to factory</param>
        </member>
        <member name="M:NetOffice.COMObject.CreateFromProgId(System.String,System.Boolean)">
            <summary>
            NetOffice method: create object from progid
            </summary>
            <param name="progId">registered progid</param>
            <param name="factoryAddObject">add instance to factory</param>
            <exception cref="T:System.Runtime.InteropServices.COMException">throws when its failed to resolve progId</exception>
        </member>
        <member name="M:NetOffice.COMObject.ReleaseCOMProxy(System.Collections.Generic.IEnumerable{NetOffice.ICOMObject})">
            <summary>
             NetOffice method: release com proxy
            </summary>
        </member>
        <member name="M:NetOffice.COMObject.OnCreate">
            <summary>
            Called from ctor at last as an inherited class service
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.SyncRoot">
            <summary>
            Monitor Lock
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.Factory">
            <summary>
            NetOffice property: the associated factory
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.Invoker">
            <summary>
            NetOffice property: the associated invoker
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.Settings">
            <summary>
            NetOffice property: the associated settings
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.Console">
            <summary>
            NetOffice property: the associated console
            </summary>
        </member>
        <member name="M:NetOffice.COMObject.To``1">
            <summary>
            Clone instance as target type
            </summary>
            <typeparam name="T">any other type to convert</typeparam>
            <exception cref="T:NetOffice.Exceptions.CloneException">An unexpected error occured. See inner exception(s) for details.</exception>
        </member>
        <member name="P:NetOffice.COMObject.UnderlyingObject">
            <summary>
            NetOffice property: Returns the native wrapped proxy
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.UnderlyingType">
            <summary>
            NetOffice property: Type information from UnderlyingObject
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.UnderlyingTypeName">
            <summary>
            NetOffice property: Full type name from UnderlyingObject
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.UnderlyingFriendlyTypeName">
            <summary>
            NetOffice property: Friendly type name from UnderlyingObject
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.UnderlyingComponentName">
            <summary>
            NetOffice property: Component name from UnderlyingObject
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.InstanceName">
            <summary>
            NetOffice property: Full Name of the NetOffice Wrapper class
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.InstanceFriendlyName">
            <summary>
            NetOffice property: Friendly Name of the NetOffice Wrapper class
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.InstanceComponentName">
            <summary>
            NetOffice property: Name of the hosting NetOffice component
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.InstanceType">
            <summary>
            NetOffice property: Current Instance Type
            </summary>
        </member>
        <member name="E:NetOffice.COMObject.OnDispose">
            <summary>
            NetOffice event: these event was called from Dispose and you can skip the dispose operation here if you want. the event can be helpful for troubleshooting if you don't know why your objects are being disposed
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.IsDisposed">
            <summary>
            NetOffice property: returns information the instance is already disposed
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.IsCurrentlyDisposing">
            <summary>
            NetOffice property: returns information the instance is currently in dispose operation
            </summary>
        </member>
        <member name="M:NetOffice.COMObject.Dispose">
            <summary>
            NetOffice method: dispose instance and all child instances
            </summary>
            <exception cref="T:NetOffice.Exceptions.COMDisposeException">An unexpected error occurs.</exception>
        </member>
        <member name="M:NetOffice.COMObject.Dispose(System.Boolean)">
            <summary>
            NetOffice method: dispose instance and all child instances
            </summary>
            <param name="disposeEventBinding">dispose event exported proxies with one or more event recipients</param>
            <exception cref="T:NetOffice.Exceptions.COMDisposeException">An unexpected error occurs.</exception>
        </member>
        <member name="M:NetOffice.COMObject.RaiseOnDispose">
            <summary>
            Call the OnDispose event as service for client callers.
            The method implementation ignore any exception in the event handler.
            </summary>
            <returns>true if cancel is requested</returns>
        </member>
        <member name="P:NetOffice.COMObject.ParentObject">
            <summary>
            NetOffice property: returns parent proxy object
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.ChildObjects">
            <summary>
            NetOffice property: Child instances
            </summary>
        </member>
        <member name="M:NetOffice.COMObject.AddChildObject(NetOffice.ICOMObject)">
            <summary>
             NetOffice method: add object to child list
            </summary>
            <param name="childObject">target child instance</param>
            <exception cref="T:NetOffice.Exceptions.COMChildRelationException">Unexpected error</exception>
        </member>
        <member name="M:NetOffice.COMObject.RemoveChildObject(NetOffice.ICOMObject)">
            <summary>
            NetOffice property: remove object from child list
            </summary>
            <param name="childObject">target child instance</param>
            <returns>true if childObject has been removed, otherwise false</returns>
            <exception cref="T:NetOffice.Exceptions.COMChildRelationException">Unexpected error</exception>
        </member>
        <member name="M:NetOffice.COMObject.DisposeChildInstances">
            <summary>
            NetOffice method: dispose all child instances
            </summary>
            <exception cref="T:NetOffice.Exceptions.COMDisposeException">An unexpected error occurs.</exception>
        </member>
        <member name="M:NetOffice.COMObject.DisposeChildInstances(System.Boolean)">
            <summary>
            NetOffice method: dispose all child instances
            </summary>
            <param name="disposeEventBinding">dispose proxies with events and one or more event recipients</param>
            <exception cref="T:NetOffice.Exceptions.COMDisposeException">An unexpected error occurs.</exception>
        </member>
        <member name="P:NetOffice.COMObject.IsEventBinding">
            <summary>
            NetOffice property: returns instance export events
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.IsEventBridgeInitialized">
            <summary>
            NetOffice property: returns true if event bridge is advised
            </summary>
        </member>
        <member name="P:NetOffice.COMObject.IsWithEventRecipients">
            <summary>
            NetOffice property: returns true if instance has one or more event recipients
            </summary>
        </member>
        <member name="M:NetOffice.COMObject.EntityIsAvailable(System.String)">
            <summary>
            NetOffice method: Returns information the proxy provides a method or property.
            Check want be made at runtime through IDispatch interface.
            </summary>
            <param name="name">name of the entity</param>
            <returns>true if available, otherwise false</returns>
            <exception cref="T:NetOffice.Exceptions.AvailabilityException">Unexpected error, see inner exception(s) for details.</exception>
        </member>
        <member name="M:NetOffice.COMObject.EntityIsAvailable(System.String,NetOffice.Availability.SupportedEntityType)">
            <summary>
            NetOffice method: Returns information the proxy provides a method or property.
            Check want be made at runtime through IDispatch interface.
            </summary>
            <param name="name">name of the entity</param>
            <param name="searchType">indicate the kind of entity the caller is looking for</param>
            <returns>true if available, otherwise false</returns>
            <exception cref="T:NetOffice.Exceptions.AvailabilityException">Unexpected error, see inner exception(s) for details.</exception>
        </member>
        <member name="M:NetOffice.COMObject.NetOffice#ICOMProxyShareProvider#GetProxyShare">
            <summary>
            NetOffice method: Returns the inner proxy shared access handler
            </summary>
            <returns>shared proxy</returns>
        </member>
        <member name="M:NetOffice.COMObject.NetOffice#ICOMProxyShareProvider#SetProxyShare(NetOffice.COMProxyShare)">
            <summary>
            NetOffice method: Set the inner proxy shared access handler.
            The method want acquire the share 1x times
            </summary>
            <param name="share">target share</param>
            <exception cref="T:System.ArgumentNullException">Throws when given share is null(Nothing in Visual Basic)</exception>
        </member>
        <member name="M:NetOffice.COMObject.Clone">
            <summary>
            NetOffice method: Creates a new object that is a copy of the current instance.
            </summary>
            <returns>a new object that is a copy of this instance</returns>
            <exception cref="T:NetOffice.Exceptions.CloneException">An unexpected error occured. See inner exception(s) for details.</exception>
        </member>
        <member name="M:NetOffice.COMObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>System.Int32 instance</returns>
        </member>
        <member name="M:NetOffice.COMObject.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>System.String instance</returns>
        </member>
        <member name="M:NetOffice.COMObject.Equals(System.Object)">
            <summary>
            Determines whether two Object instances are equal.
            </summary>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:NetOffice.COMObject.GetType">
            <summary>
            Gets a Type object that represents the specified type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetOffice.COMObject.EqualsOnServer(NetOffice.ICOMObject)">
            <summary>
            Determines whether two COMObject instances are equal.
            </summary>
            <param name="obj">target instance to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:NetOffice.COMObject.op_Equality(NetOffice.COMObject,NetOffice.COMObject)">
            <summary>
            Determines whether two COMObject instances are equal.
            </summary>
            <param name="objectA"></param>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="M:NetOffice.COMObject.op_Equality(NetOffice.COMObject,System.Object)">
            <summary>
            Determines whether two COMObject instances are equal.
            </summary>
            <param name="objectA"></param>
            <param name="objectB"></param>
            <returns></returns>
        </member>
        <member name="M:NetOffice.COMObject.op_Equality(System.Object,NetOffice.COMObject)">
            <summary>
            Determines whether two COMObject instances are equal.
            </summary>
            <param name="objectA">first instance</param>
            <param name="objectB">second instance</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:NetOffice.COMObject.op_Inequality(NetOffice.COMObject,NetOffice.COMObject)">
            <summary>
            Determines whether two COMObject instances are not equal.
            </summary>
            <param name="objectA">first instance</param>
            <param name="objectB">second instance</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:NetOffice.COMObject.op_Inequality(NetOffice.COMObject,System.Object)">
            <summary>
            Determines whether two COMObject instances are not equal.
            </summary>
            <param name="objectA">first instance</param>
            <param name="objectB">second instance</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:NetOffice.COMObject.op_Inequality(System.Object,NetOffice.COMObject)">
            <summary>
            Determines whether two COMObject instances are not equal.
            </summary>
            <param name="objectA">first instance</param>
            <param name="objectB">second instance</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="T:NetOffice.IFactoryInfo">
            <summary>
            Information about a NetOffice assembly
            </summary>
        </member>
        <member name="P:NetOffice.IFactoryInfo.AssemblyName">
            <summary>
            Simple name of the assembly and type exporter
            </summary>
        </member>
        <member name="P:NetOffice.IFactoryInfo.AssemblyNamespace">
            <summary>
            Namespace of the assembly
            </summary>
        </member>
        <member name="P:NetOffice.IFactoryInfo.ComponentGuid">
            <summary>
            Guid of component there represents the NetOfficeApi assembly
            </summary>
        </member>
        <member name="P:NetOffice.IFactoryInfo.Assembly">
            <summary>
            Native API assembly
            </summary>
        </member>
        <member name="P:NetOffice.IFactoryInfo.AssemblyAttribute">
            <summary>
            Assembly attribute - Core want check the version for compatibility while initialize
            </summary>
        </member>
        <member name="M:NetOffice.IFactoryInfo.Contains(System.String)">
            <summary>
            Returns info a class with given name exists in NetOfficeApi assembly
            </summary>
            <param name="className">target class name</param>
            <returns>true if exists, otherwise false</returns>
        </member>
        <member name="M:NetOffice.IFactoryInfo.Contains(System.Type)">
            <summary>
            Returns info a class with given type exists in NetOfficeApi assembly
            </summary>
            <param name="type">target type</param>
            <returns>true if exists, otherwise false</returns>
        </member>
        <member name="P:NetOffice.IFactoryInfo.Dependencies">
            <summary>
            Returns a name array of dependent NetOfficeApi assemblies
            </summary>
        </member>
        <member name="P:NetOffice.IFactoryInfo.IsDuck">
            <summary>
            Returns information the factory serves duck interfaces only
            </summary>
        </member>
        <member name="T:NetOffice.Invoker">
            <summary>
            Invokes <see cref="T:NetOffice.ICOMObject"/> instances
            </summary>
        </member>
        <member name="F:NetOffice.Invoker._lockInstance">
            <summary>
            lock field to perform thread safe operations
            </summary>
        </member>
        <member name="F:NetOffice.Invoker._default">
            <summary>
            Shared default invoker
            </summary>
        </member>
        <member name="M:NetOffice.Invoker.#ctor(NetOffice.Core)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="parentFactory">parent factory</param>
        </member>
        <member name="M:NetOffice.Invoker.#ctor">
            <summary>
            Creates an instance of the class
            </summary>
        </member>
        <member name="P:NetOffice.Invoker.Default">
            <summary>
            Shared Default Invoker
            </summary>
        </member>
        <member name="P:NetOffice.Invoker.IsDefault">
            <summary>
            Returns info this invoker is the default instance
            </summary>
        </member>
        <member name="P:NetOffice.Invoker.Parent">
            <summary>
            Parent Factory
            </summary>
        </member>
        <member name="P:NetOffice.Invoker.Console">
            <summary>
            Associated DebugConsole
            </summary>
        </member>
        <member name="P:NetOffice.Invoker.Settings">
            <summary>
            Associated Settings
            </summary>
        </member>
        <member name="M:NetOffice.Invoker.Method(NetOffice.ICOMObject,System.String)">
            <summary>
            Executes method as late bind call without parameters 
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
        </member>
        <member name="M:NetOffice.Invoker.Method(System.Object,System.String)">
            <summary>
            Executes method as late bind call without parameters 
            </summary>
            <param name="comObject">target proxy</param>
            <param name="name">name of method</param>
        </member>
        <member name="M:NetOffice.Invoker.Method(NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Executes method as late bind call with parameters
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
            <param name="paramsArray">array with parameters</param>
        </member>
        <member name="M:NetOffice.Invoker.Method(NetOffice.ICOMObject,System.String,System.Object[],System.Object)">
            <summary>
            Executes method as late bind call with parameters
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
            <param name="paramsArray">array with parameters</param> 
            <param name="value">value to be set</param>
        </member>
        <member name="M:NetOffice.Invoker.MethodWithoutSafeMode(NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Executes method as late bind call with parameters
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
            <param name="paramsArray">array with parameters</param>
        </member>
        <member name="M:NetOffice.Invoker.Method(System.Object,System.String,System.Object[])">
            <summary>
            Executes method as late bind call with parameters 
            </summary>
            <param name="comObject">target proxy</param>
            <param name="name">name of method</param>
            <param name="paramsArray">array with parameters</param>
        </member>
        <member name="M:NetOffice.Invoker.Method(NetOffice.ICOMObject,System.String,System.Object[],System.Reflection.ParameterModifier[])">
            <summary>
            Executes method as late bind call with parameters and parameter modifiers to use ref parameter(s)
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
            <param name="paramsArray">array with parameters</param>
            <param name="paramModifiers">array with modifiers correspond paramsArray</param>
        </member>
        <member name="M:NetOffice.Invoker.MethodReturn(NetOffice.ICOMObject,System.String)">
            <summary>
            Executes method as late bind call with return value
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
            <returns>any return value</returns>
        </member>
        <member name="M:NetOffice.Invoker.MethodReturn(NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Executes method as late bind call with return value
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
            <param name="paramsArray">array with parameters</param>
            <returns>any return value</returns>
        </member>
        <member name="M:NetOffice.Invoker.MethodReturnWithoutSafeMode(NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Executes method as late bind call with return value
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
            <param name="paramsArray">array with parameters</param>
            <returns>any return value</returns>
        </member>
        <member name="M:NetOffice.Invoker.MethodReturn(NetOffice.ICOMObject,System.String,System.Object[],System.Reflection.ParameterModifier[])">
            <summary>
            Executes method as late bind call with return value
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
            <param name="paramsArray">array with parameters</param>
            <param name="paramModifiers">array with modifiers correspond paramsArray</param>
            <returns>any return value</returns>
        </member>
        <member name="M:NetOffice.Invoker.SingleMethod(NetOffice.ICOMObject,System.String)">
            <summary>
            Executes method as late bind call without parameters 
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
        </member>
        <member name="M:NetOffice.Invoker.SingleMethod(System.Object,System.String)">
            <summary>
            Executes method as late bind call without parameters 
            </summary>
            <param name="comObject">target proxy</param>
            <param name="name">name of method</param>
        </member>
        <member name="M:NetOffice.Invoker.SingleMethod(NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Executes method as late bind call with parameters
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
            <param name="paramsArray">array with parameters</param>
        </member>
        <member name="M:NetOffice.Invoker.SingleMethodWithoutSafeMode(NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Executes method as late bind call with parameters
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
            <param name="paramsArray">array with parameters</param>
        </member>
        <member name="M:NetOffice.Invoker.SingleMethod(System.Object,System.String,System.Object[])">
            <summary>
            Executes method as late bind call with parameters 
            </summary>
            <param name="comObject">target proxy</param>
            <param name="name">name of method</param>
            <param name="paramsArray">array with parameters</param>
        </member>
        <member name="M:NetOffice.Invoker.SingleMethod(NetOffice.ICOMObject,System.String,System.Object[],System.Reflection.ParameterModifier[])">
            <summary>
            Executes method as late bind call with parameters and parameter modifiers to use ref parameter(s)
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
            <param name="paramsArray">array with parameters</param>
            <param name="paramModifiers">array with modifiers correspond paramsArray</param>
        </member>
        <member name="M:NetOffice.Invoker.SingleMethodReturn(NetOffice.ICOMObject,System.String)">
            <summary>
            Executes method as late bind call with return value
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
            <returns>any return value</returns>
        </member>
        <member name="M:NetOffice.Invoker.SingleMethodReturn(NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Executes method as late bind call with return value
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
            <param name="paramsArray">array with parameters</param>
            <returns>any return value</returns>
        </member>
        <member name="M:NetOffice.Invoker.SingleMethodReturnWithoutSafeMode(NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Executes method as late bind call with return value
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
            <param name="paramsArray">array with parameters</param>
            <returns>any return value</returns>
        </member>
        <member name="M:NetOffice.Invoker.SingleMethodReturn(NetOffice.ICOMObject,System.String,System.Object[],System.Reflection.ParameterModifier[])">
            <summary>
            Executes method as late bind call with return value
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of method</param>
            <param name="paramsArray">array with parameters</param>
            <param name="paramModifiers">array with modifiers correspond paramsArray</param>
            <returns>any return value</returns>
        </member>
        <member name="M:NetOffice.Invoker.PropertyGet(System.Object,System.String)">
            <summary>
            Perform property get as late bind call with return value
            </summary>
            <param name="comObject">target proxy</param>
            <param name="name">name of property</param>
            <returns>any return value</returns>
        </member>
        <member name="M:NetOffice.Invoker.PropertyGet(NetOffice.ICOMObject,System.String)">
            <summary>
            Perform property get as late bind call with return value
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of property</param>
            <returns>any return value</returns>
        </member>
        <member name="M:NetOffice.Invoker.PropertyGet(System.Object,System.String,System.Object[])">
            <summary>
            Perform property get as late bind call with return value
            </summary>
            <param name="comObject">target proxy</param>
            <param name="name">name of property</param>
            <param name="paramsArray">array with parameters</param>
            <returns>any return value</returns>
        </member>
        <member name="M:NetOffice.Invoker.PropertyGet(NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Perform property get as late bind call with return value
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of property</param>
            <param name="paramsArray">array with parameters</param>
            <returns>any return value</returns>
        </member>
        <member name="M:NetOffice.Invoker.PropertyGetWithoutSafeMode(NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Perform property get as late bind call with return value
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of property</param>
            <param name="paramsArray">array with parameters</param>
            <returns>any return value</returns>
        </member>
        <member name="M:NetOffice.Invoker.PropertyGet(NetOffice.ICOMObject,System.String,System.Object[],System.Reflection.ParameterModifier[])">
            <summary>
            Perform property get as late bind call with return value
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of property</param>
            <param name="paramsArray">array with parameters</param>
            <param name="paramModifiers">array with modifiers correspond paramsArray</param>
            <returns>any return value</returns>
        </member>
        <member name="M:NetOffice.Invoker.PropertySet(NetOffice.ICOMObject,System.String,System.Object[],System.Object)">
            <summary>
            Perform property set as late bind call
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of property</param>
            <param name="paramsArray">array with parameters</param> 
            <param name="value">value to be set</param>
        </member>
        <member name="M:NetOffice.Invoker.PropertySet(NetOffice.ICOMObject,System.String,System.Object[],System.Object,System.Reflection.ParameterModifier[])">
            <summary>
            Perform property set as late bind call
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of property</param>
            <param name="paramsArray">array with parameters</param> 
            <param name="value">value to be set</param>
            <param name="paramModifiers">array with modifiers correspond paramsArray</param>    
        </member>
        <member name="M:NetOffice.Invoker.PropertySet(NetOffice.ICOMObject,System.String,System.Object)">
            <summary>
            Perform property set as late bind call
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of property</param>
            <param name="value">value to be set</param>
        </member>
        <member name="M:NetOffice.Invoker.PropertySet(NetOffice.ICOMObject,System.String,System.Object,System.Reflection.ParameterModifier[])">
            <summary>
            Perform property set as late bind call
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of property</param>
            <param name="value">value to be set</param>
            <param name="paramModifiers">array with modifiers correspond paramsArray</param>
        </member>
        <member name="M:NetOffice.Invoker.PropertySet(NetOffice.ICOMObject,System.String,System.Object[],System.Reflection.ParameterModifier[])">
            <summary>
            Perform property set as late bind call
            </summary>
            <param name="comObject">target object</param>
            <param name="name">name of property</param>
            <param name="value">value array to be set</param>
            <param name="paramModifiers">array with modifiers correspond paramsArray</param>
        </member>
        <member name="M:NetOffice.Invoker.PropertySet(NetOffice.ICOMObject,System.String,System.Object[])">
            <summary>
            Perform property set as late bind call
            </summary>
            <param name="comObject"><see cref="T:NetOffice.ICOMObject"/> instance</param>
            <param name="name">name of the property</param>
            <param name="value">new value of the property</param>
        </member>
        <member name="M:NetOffice.Invoker.CreateParamModifiers(System.Boolean[])">
            <summary>
            Create parameter modifiers array
            </summary>
            <param name="isRef">parameter is given by reference</param>
            <returns>ParameterModifier array</returns>
        </member>
        <member name="M:NetOffice.Invoker.ValidateParam(System.Object)">
            <summary>
            Replace null with <see cref="F:System.Type.Missing"/>, replace <see cref="T:NetOffice.ICOMObject"/> with <see cref="P:NetOffice.ICOMObjectProxy.UnderlyingObject"/> object.
            </summary>
            <param name="param">value to check</param>
            <returns>validated value</returns>
        </member>
        <member name="M:NetOffice.Invoker.ValidateParamsArray(System.Object[])">
            <summary>
            Calls <see cref="M:NetOffice.Invoker.ValidateParam(System.Object)"/> for every array item
            </summary>
            <param name="paramsArray">array with parameters</param>
        </member>
        <member name="M:NetOffice.Invoker.ReleaseParam(System.Object)">
            <summary>
            Calls dispose in case if param is <see cref="T:NetOffice.ICOMObject"/>, calls <see cref="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)"/> in case of param is a COM proxy
            </summary>
        </member>
        <member name="M:NetOffice.Invoker.ReleaseParamsArray(System.Object[])">
            <summary>
            Calls <see cref="M:NetOffice.Invoker.ReleaseParam(System.Object)"/> for every array item
            </summary>
            <param name="paramsArray">any value array</param>
        </member>
        <member name="M:NetOffice.Invoker.CreateEventParamsArray(System.Object[])">
            <summary>
            Copy the param array or returns null if paramsArray not set
            </summary>
            <param name="paramsArray">array with parameters</param>
            <returns>array copy or null</returns>
        </member>
        <member name="M:NetOffice.Invoker.CreateEventParamsArray(System.Boolean[],System.Object[])">
            <summary>
            Copy the param array or returns null if paramsArray not set
            </summary>
            <param name="paramsModifier">array with modifiers correspond paramsArray</param>
            <param name="paramsArray">array with parameters</param>
            <returns>array copy or null</returns>
        </member>
        <member name="M:NetOffice.Invoker.ValidateComObjectIsAlive(NetOffice.ICOMObject)">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if given <see cref="T:NetOffice.ICOMObject"/> instance is already disposed.
            </summary>
            <param name="comObject"><see cref="T:NetOffice.ICOMObject"/> instance</param>
        </member>
        <member name="T:NetOffice.Settings">
            <summary>
            Core Settings
            </summary>
        </member>
        <member name="M:NetOffice.Settings.#ctor">
            <summary>
            Creates an instance of the class
            </summary>
        </member>
        <member name="M:NetOffice.Settings.#ctor(NetOffice.Settings)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="settings">settings to load from</param>
        </member>
        <member name="P:NetOffice.Settings.Default">
            <summary>
            Shared Default Settings
            </summary>
        </member>
        <member name="P:NetOffice.Settings.PerformanceTrace">
            <summary>
            Performance tracer to see how long its need to call and return all or specific actions
            </summary>
        </member>
        <member name="P:NetOffice.Settings.EnableProxyManagement">
            <summary>
            Enable the NetOffice COM proxy management. true by default
            </summary>
        </member>
        <member name="P:NetOffice.Settings.EnableDynamicObjects">
            <summary>
            Wrap proxy into COMDynamicObject if proxy has no wrapper class in current app domain. true by default
            </summary>
        </member>
        <member name="P:NetOffice.Settings.EnableKnownReferenceInspection">
            <summary>
            Analyze also known reference proxies to see proxy is may inherited type, false by default
            </summary>
        </member>
        <member name="P:NetOffice.Settings.EnableAutoDisposeEventArguments">
            <summary>
            Dispose event arguments automatically, false by default
            </summary>
        </member>
        <member name="P:NetOffice.Settings.EnableDynamicEventArguments">
            <summary>
            Wrap event arguments into COMDynamicObject if proxy has no wrapper class in current app domain. false by default
            </summary>
        </member>
        <member name="P:NetOffice.Settings.ExceptionMessageBehavior">
            <summary>
            NetOffice wrap all thrown exceptions from Office applications in a COMException.
            This option can be used to set the top level exception message or copy the inner message to top.
            </summary>
        </member>
        <member name="P:NetOffice.Settings.ExceptionDefaultMessage">
            <summary>
            NetOffice wrap all thrown exceptions from Office applications in a COMException.
            This is the default message for the top level exception when ExceptionMessageBehavior is Default.
            </summary>
        </member>
        <member name="P:NetOffice.Settings.ExceptionDiagnosticsMessage">
            <summary>
            NetOffice wrap all thrown exceptions from Office applications in a COMException.
            This is the default message for the top level exception when ExceptionMessageBehavior is Diagnostics.
            See ExceptionMessageHandling.Diagnostics for further information.
            </summary>
        </member>
        <member name="P:NetOffice.Settings.ThreadCulture">
            <summary>
            Used Thread Culture given in the invoke calls. en-US by default
            </summary>
        </member>
        <member name="P:NetOffice.Settings.EnableEvents">
            <summary>
            Get or set the Event support. true by default
            </summary>
        </member>
        <member name="P:NetOffice.Settings.MessageFilter">
            <summary>
            A predefined implementation of IMessageFilter
            </summary>
        </member>
        <member name="P:NetOffice.Settings.EnableAutomaticQuit">
            <summary>
            Get or set the Quit method for an application object was automatically called while Dispose. false by default
            </summary>
        </member>
        <member name="P:NetOffice.Settings.EnableSafeMode">
            <summary>
            Get or set the core api checks at runtime the target method or property is supported in current version. if it doesn't a EntityNotSupportedException is thrown. false by default
            </summary>
        </member>
        <member name="P:NetOffice.Settings.EnableAdHocLoading">
            <summary>
            Get or set Core.Initialize() try to load unloaded dependent assemblies to fetch type information. true by default
            </summary>
        </member>
        <member name="P:NetOffice.Settings.EnableDeepLoading">
            <summary>
            Get or set the Initialize method perform a deep level analyzing(may cause security issues). true by default
            </summary>
        </member>
        <member name="P:NetOffice.Settings.EnableMoreDebugOutput">
            <summary>
            Write extended diagnostics to console
            </summary>
        </member>
        <member name="P:NetOffice.Settings.EnableEventDebugOutput">
            <summary>
            Get or set NetOffice logs essential system steps for event operations in the DebugConsole(if enabled). false by default
            </summary>
        </member>
        <member name="P:NetOffice.Settings.CacheOptions">
            <summary>
            Get or set Core.Initialize() try to load non loaded dependent assemblies to fetch type information. KeepExistingCacheAlive by default
            </summary>
        </member>
        <member name="P:NetOffice.Settings.EnableOperatorOverloads">
            <summary>
            Get or set NetOffice should create custom overloads for the "==" and "!=" operators for semantic comparisons. true by default
            </summary>
        </member>
        <member name="P:NetOffice.Settings.LoadAssembliesUnsafe">
            <summary>
            Get or set NetOffice try load dependent assemblies unsafe(System.Reflection.Assembly.UnsafeLoadFrom). true by default
            </summary>
        </member>
        <member name="M:NetOffice.Settings.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NetOffice.Settings.Equals(NetOffice.Settings)">
            <summary>
            Indicates whether the current object is equal to another Settings object.
            </summary>
            <param name="other">An Settings object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:NetOffice.Settings.LoadFrom(NetOffice.Settings)">
            <summary>
            Load settings from another settings instance
            </summary>
            <param name="settings">settings to load from</param>
        </member>
        <member name="E:NetOffice.Settings.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:NetOffice.SinkHelper">
            <summary>
            SinkHelper is a base class for an event interface sink helper classes.
            </summary>
        </member>
        <member name="M:NetOffice.SinkHelper.#ctor(NetOffice.ICOMObject)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="eventClass">target CoClass instance</param>
        </member>
        <member name="P:NetOffice.SinkHelper.EventClass">
            <summary>
            CoClass Instance
            </summary>
        </member>
        <member name="P:NetOffice.SinkHelper.EventBinding">
            <summary>
            CoClass Instance EventBinding
            </summary>
        </member>
        <member name="P:NetOffice.SinkHelper.Factory">
            <summary>
            CoClass Factory Core
            </summary>
        </member>
        <member name="M:NetOffice.SinkHelper.FindConnectionPoint(NetOffice.ICOMObject,System.Runtime.InteropServices.ComTypes.IConnectionPointContainer,System.Runtime.InteropServices.ComTypes.IConnectionPoint@,System.String[])">
            <summary>
            Try to find connection point by FindConnectionPoint
            </summary>
        </member>
        <member name="M:NetOffice.SinkHelper.EnumConnectionPoint(NetOffice.ICOMObject,System.Runtime.InteropServices.ComTypes.IConnectionPointContainer,System.Runtime.InteropServices.ComTypes.IConnectionPoint@,System.String[])">
            <summary>
            try to find connection point by EnumConnectionPoints
            </summary>
        </member>
        <member name="M:NetOffice.SinkHelper.GetConnectionPoint(NetOffice.ICOMObject,System.Runtime.InteropServices.ComTypes.IConnectionPoint@,System.String[])">
            <summary>
            Get supported connection point from comProxy
            </summary>
        </member>
        <member name="M:NetOffice.SinkHelper.GetConnectionPoint2(NetOffice.ICOMObject,System.Runtime.InteropServices.ComTypes.IConnectionPoint@,System.String[])">
            <summary>
            Get supported connection point from comProxy in reverse order to GetConnectionPoint
            </summary>
        </member>
        <member name="M:NetOffice.SinkHelper.DisposeAll">
            <summary>
            Dispose all active event bridges
            </summary>
        </member>
        <member name="M:NetOffice.SinkHelper.SetupEventBinding(System.Runtime.InteropServices.ComTypes.IConnectionPoint)">
            <summary>
            Create event binding
            </summary>
            <param name="connectPoint">target connection point</param>
        </member>
        <member name="M:NetOffice.SinkHelper.RemoveEventBinding">
            <summary>
            Release event binding
            </summary>
        </member>
        <member name="M:NetOffice.SinkHelper.RemoveEventBinding(System.Boolean)">
            <summary>
            Release event binding
            </summary>
        </member>
        <member name="M:NetOffice.SinkHelper.Validate(System.String)">
            <summary>
            Validate to proceed event
            </summary>
            <param name="eventName">name of the event</param>
            <returns>true if event is ready, otherwise false</returns>
        </member>
        <member name="M:NetOffice.SinkHelper.ToString(System.Object)">
            <summary>
            Perform cast to System.String and suppresses any exception(s)
            </summary>
            <param name="value">value to cast</param>
            <returns>cast value or false if exception occurs</returns>
        </member>
        <member name="M:NetOffice.SinkHelper.ToBoolean(System.Object)">
            <summary>
            Perform cast to System.Boolean and suppresses any exception(s)
            </summary>
            <param name="value">value to cast</param>
            <returns>cast value or false if exception occurs</returns>
        </member>
        <member name="M:NetOffice.SinkHelper.ToInt16(System.Object)">
            <summary>
            Perform cast to System.Int16 and suppresses any exception(s)
            </summary>
            <param name="value">value to cast</param>
            <returns>cast value or 0 if exception occurs</returns>
        </member>
        <member name="M:NetOffice.SinkHelper.ToInt32(System.Object)">
            <summary>
            Perform cast to System.Int32 and suppresses any exception(s)
            </summary>
            <param name="value">value to cast</param>
            <returns>cast value or 0 if exception occurs</returns>
        </member>
        <member name="M:NetOffice.SinkHelper.ToDouble(System.Object)">
            <summary>
            Perform cast to System.Double and suppresses any exception(s)
            </summary>
            <param name="value">value to cast</param>
            <returns>cast value or 0 if exception occurs</returns>
        </member>
        <member name="M:NetOffice.SinkHelper.ToSingle(System.Object)">
            <summary>
            Perform cast to System.Single and suppresses any exception(s)
            </summary>
            <param name="value">value to cast</param>
            <returns>cast value or 0 if exception occurs</returns>
        </member>
        <member name="M:NetOffice.SinkHelper.ToEnum``1(System.Object)">
            <summary>
            Perform cast to System.Enum and suppresses any exception(s)
            </summary>
            <typeparam name="T">type of System.Enum</typeparam>
            <param name="value">value to cast</param>
            <returns>ast value or default(T) if exception occurs</returns>
        </member>
        <member name="M:NetOffice.SinkHelper.Dispose">
            <summary>
            Remove event binding
            </summary>
        </member>
        <member name="T:NetOffice.IEventBinding">
            <summary>
            EventBinding Interface
            </summary>
        </member>
        <member name="P:NetOffice.IEventBinding.EventBridgeInitialized">
            <summary>
            Event bridge is advised
            </summary>
        </member>
        <member name="M:NetOffice.IEventBinding.HasEventRecipients">
            <summary>
            Instance has one or more event recipients
            </summary>
            <returns>true if one or more event is active, otherwise false</returns>
        </member>
        <member name="M:NetOffice.IEventBinding.HasEventRecipients(System.String)">
            <summary>
            Instance has one or more event recipients
            </summary>
            <param name="eventName">name of the event</param>
            <returns>true if event is active, otherwise false</returns>
        </member>
        <member name="M:NetOffice.IEventBinding.GetEventRecipients(System.String)">
            <summary>
            Recipient delegates for an event
            </summary>
            <param name="eventName">name of the event</param>
            <returns>recipients delegates</returns>
        </member>
        <member name="M:NetOffice.IEventBinding.GetCountOfEventRecipients(System.String)">
            <summary>
            Instance has one or more event recipients for a specific event
            </summary>
            <param name="eventName">name of the event</param>
            <returns>the count of recipients</returns>
        </member>
        <member name="M:NetOffice.IEventBinding.RaiseCustomEvent(System.String,System.Object[]@)">
            <summary>
            Call a specific event for all recipients
            </summary>
            <param name="eventName">name of the event</param>
            <param name="paramsArray">argument array</param>
            <returns>count of recipients</returns>
        </member>
        <member name="M:NetOffice.IEventBinding.CreateEventBridge">
            <summary>
            Create the event bridge for the object
            </summary>
        </member>
        <member name="M:NetOffice.IEventBinding.DisposeEventBridge">
            <summary>
            Dispose the event bridge for the instance
            </summary>
        </member>
        <member name="T:NetOffice.PerformanceTraceSetting">
            <summary>
            Performance Trace Options
            </summary>
        </member>
        <member name="P:NetOffice.PerformanceTraceSetting.IntervalMS">
            <summary>
            Alert limit in milliseconds. Default:1000
            If a calling method or property need more(or equal) time as specified here, the alert event is fired
            </summary>
        </member>
        <member name="P:NetOffice.PerformanceTraceSetting.Enabled">
            <summary>
            Enable or disable trace alert
            </summary>
        </member>
        <member name="T:NetOffice.PerformanceTraceSettingCollection">
            <summary>
            Collect a sequence of performance trace settings
            </summary>
        </member>
        <member name="M:NetOffice.PerformanceTraceSettingCollection.#ctor">
            <summary>
            Creates an instance of the class
            </summary>
        </member>
        <member name="P:NetOffice.PerformanceTraceSettingCollection.WildCard">
            <summary>
            General wild card setting to trace everything
            </summary>
        </member>
        <member name="P:NetOffice.PerformanceTraceSettingCollection.Item(System.String)">
            <summary>
            Returns a performance trace setting by its entity name.
            Creates automatically a new performance trace setting if entity name not exists.
            </summary>
            <param name="entityName">target entity name</param>
            <returns>existing or new created performance trace settings</returns>
        </member>
        <member name="P:NetOffice.PerformanceTraceSettingCollection.Item(System.String,System.String)">
            <summary>
            Returns a performance trace setting by its entity name.
            Creates automatically a new performance trace setting if entity name/method name not exists.
            </summary>
            <param name="entityName">target entity name</param>
            <param name="methodName">target method name</param>
            <returns>existing or new created performance trace settings</returns>
        </member>
        <member name="M:NetOffice.PerformanceTraceSettingCollection.GetTargetEnabledSettings(System.String,System.String)">
            <summary>
            Get matched existing performance trace setting
            </summary>
            <param name="entityName">target entity name</param>
            <param name="methodName">target method</param>
            <returns>performance trace settings sequence</returns>
        </member>
        <member name="M:NetOffice.PerformanceTraceSettingCollection.TryStartMeasureTime(System.String,System.String,NetOffice.PerformanceTrace.CallType)">
            <summary>
            Start time measure if entityName/methodName match
            </summary>
            <param name="entityName">target entity name</param>
            <param name="methodName">target method name</param>
            <param name="callType">invoke call kind</param>
            <returns>true if started, otherwise false</returns>
        </member>
        <member name="T:NetOffice.Utils">
            <summary>
            Some helper methods (also for visual basic)
            The main purpose is accessing COM enumerators.
            </summary>
        </member>
        <member name="P:NetOffice.Utils.Default">
            <summary>
            Shared Default Invoker
            </summary>
        </member>
        <member name="M:NetOffice.Utils.IsNothing(System.Object)">
            <summary>
            Checks value is null (Nothing in Visual Basic) 
            </summary>
            <param name="value">check value</param>
            <returns>true if null</returns>
        </member>
        <member name="M:NetOffice.Utils.IsNullOrMissing(System.Object)">
            <summary>
             Checks value is null (Nothing in Visual Basic) or Type.Missing
            </summary>
            <param name="value">check value</param>
            <returns>true if null or missing</returns>
        </member>
        <member name="M:NetOffice.Utils.GetComObjectEnumeratorAsProperty(NetOffice.ICOMObject,NetOffice.ICOMObject,System.Boolean)">
            <summary>
            Creates a managed enumerator
            </summary>
             <param name="parent">parent instance or null in com proxy management</param>
            <param name="comObject"><see cref="T:NetOffice.ICOMObject"/> instance to access the enumerator</param>
            <param name="allowDynamicObject">allow to create a <see cref="T:NetOffice.COMDynamicObject"/> instance if its failed to resolve the wrapper type</param>
            <returns>managed enumerator</returns>
        </member>
        <member name="M:NetOffice.Utils.GetComObjectEnumeratorAsMethod(NetOffice.ICOMObject,NetOffice.ICOMObject,System.Boolean)">
            <summary>
            Creates a managed enumerator
            </summary>
             <param name="parent">parent instance or null in com proxy management</param>
            <param name="comObject"><see cref="T:NetOffice.ICOMObject"/> instance to access the enumerator</param>
            <param name="allowDynamicObject">allow to create a <see cref="T:NetOffice.COMDynamicObject"/> instance if its failed to resolve the wrapper type</param>
            <returns>managed enumerator</returns>
        </member>
        <member name="M:NetOffice.Utils.FetchVariantComObjectEnumerator(NetOffice.ICOMObject,NetOffice.ICOMObject,System.Boolean)">
            <summary>
            Fetch managed enumerator
            </summary>
            <param name="parent">parent instance or null in com proxy management</param>
            <param name="enumerator">enumerator to fetch</param>
            <param name="allowDynamicObject">allow to create a COMDynamicObject instance if its failed to resolve the wrapper type</param>
            <returns>IEnumerator instance</returns>
        </member>
        <member name="M:NetOffice.Utils.GetDuckVariantEnumeratorAsProperty(NetOffice.ICOMObject)">
            <summary>
            Returns an enumerator with com proxies
            </summary>
            <param name="comObject">COMObject instance as any</param>
            <returns>IEnumerator instance</returns>
        </member>
        <member name="M:NetOffice.Utils.GetDuckVariantEnumeratorAsMethod(NetOffice.ICOMObject)">
            <summary>
            Returns an enumerator with com proxies
            </summary>
            <param name="comObject">COMObject instance as any</param>
            <returns>IEnumerator instance</returns>
        </member>
        <member name="M:NetOffice.Utils.GetVariantEnumeratorAsProperty(NetOffice.ICOMObject,System.Boolean)">
            <summary>
            Returns an enumerator with variant items - that means item(s) can be proxy or scalar
            </summary>
            <param name="comObject"><see cref="T:NetOffice.ICOMObject"/> instance as any</param>
            <param name="allowDynamicObject">allow to create a <see cref="T:NetOffice.COMDynamicObject"/> instance if its failed to resolve the wrapper type</param>
            <returns>IEnumerator instance</returns>
        </member>
        <member name="M:NetOffice.Utils.GetVariantEnumeratorAsMethod(NetOffice.ICOMObject,System.Boolean)">
            <summary>
            Returns an enumerator with com proxies
            </summary>
            <param name="comObject">COMObject instance as any</param>
            <param name="allowDynamicObject">allow to create a COMDynamicObject instance if its failed to resolve the wrapper type</param>
            <returns>IEnumerator instance</returns>
        </member>
        <member name="M:NetOffice.Utils.GetProxyEnumeratorAsProperty(NetOffice.ICOMObject,System.Boolean)">
            <summary>
            Returns an enumerator with com proxies
            </summary>
            <param name="comObject">COMObject instance as any</param>
            <param name="allowDynamicObject">allow to create a COMDynamicObject instance if its failed to resolve the wrapper type</param>
            <returns>IEnumerator instance</returns>
        </member>
        <member name="M:NetOffice.Utils.GetProxyEnumeratorAsMethod(NetOffice.ICOMObject,System.Boolean)">
            <summary>
            Returns an enumerator with com proxies
            </summary>
            <param name="comObject">COMObject instance as any</param>
            <param name="allowDynamicObject">allow to create a COMDynamicObject instance if its failed to resolve the wrapper type</param>
            <returns>IEnumerator instance</returns>
        </member>
        <member name="M:NetOffice.Utils.GetScalarEnumeratorAsProperty(NetOffice.ICOMObject)">
            <summary>
            Returns an enumerator with scalar variables
            </summary>
            <param name="comObject">COMObject instance as any</param>
            <returns>IEnumerator instance</returns>
        </member>
        <member name="M:NetOffice.Utils.GetScalarEnumeratorAsMethod(NetOffice.ICOMObject)">
            <summary>
            Returns an enumerator with scalar variables
            </summary>
            <param name="comObject">COMObject instance as any</param>
            <returns>IEnumerator instance</returns>
        </member>
    </members>
</doc>
