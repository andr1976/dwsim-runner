<?xml version="1.0"?>
<doc>
<assembly>
<name>
DWSIM.Thermodynamics
</name>
</assembly>
<members>
<member name="T:DWSIM.Thermodynamics.My.Resources.Strings">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescBOPP">
<summary>
  Looks up a localized string similar to Um Pacote de Propriedades simplificado para cálculos rápidos de processo envolvendo fluidos de petróleo caracterizados por propriedades simples, tais como densidades e razão gás-óleo..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescCOPP">
<summary>
  Looks up a localized string similar to Um Pacote de Propriedades CAPE-OPEN é uma coleção completa, consistente e reutilizável de métodos, compostos e parâmetros do modelo de cálculo de qualquer de um conjunto de propriedades físicas conhecidas para as Phases de um material. Ele inclui todos os métodos e compostos puros dados, juntamente com as normas pertinentes à mistura e parâmetros de interação. Um Pacote de Propriedades normalmente cobre apenas um pequeno subconjunto dos compostos e métodos acessíveis através de um Sistema de Propriedades Fí [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescCPPP">
<summary>
  Looks up a localized string similar to CoolProp is an open-source database of fluid and humid air properties, formulated based on the most accurate formulations in open literature. It has been validated against the most accurate data available from the relevant references..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescCSLKPP">
<summary>
  Looks up a localized string similar to Pacote de Propriedades que usa o modelo empírico de Chao e Seader para o cálculo do coeficiente de partição K no equilíbrio líquido-vapor. Todas as outras propriedades termodinâmicas (entalpia, entropia, Cp/Cv, etc.) são calculadas pelo modelo de Lee e Kesler..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescCSPP">
<summary>
  Looks up a localized string similar to Pacote de Propriedades que utiliza o método COSMO-SAC implementado na biblioteca JCOSMO por Rafael Soares e Renan Gerber para a predição do coeficiente de atividade dos componentes na Phase líquida. As Entalpias, Entropias e Capacidades Caloríficas residuais são calculadas a partir do modelo de Lee-Kesler. A Phase vapor é modelada através da EDE Peng-Robinson..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescEUPP">
<summary>
  Looks up a localized string similar to This model is a combination of the extended UNIQUAC model for electrolytes and the Soave–Redlich–Kwong cubic equation of state. The model has been applied to aqueous systems containing ammonia and/or carbon dioxide along with various salts. Model parameters valid in the temperature range 0–110°C, the pressure range from 0–100 bar, and the concentration range up to approximately 80 molal ammonia are given. The model parameters were evaluated on the basis of more than 7000 experimental data points..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescFPP">
<summary>
  Looks up a localized string similar to FPROPS is a free open-source C-based library for high-accuracy evaluation of thermodynamic properties for a number of pure substances. It makes use of published data for the Helmholtz fundamental equation for those substances.

FPROPS is Copyright (C) 2011 - Carnegie Mellon University.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescGSLKPP">
<summary>
  Looks up a localized string similar to Pacote de Propriedades que usa o modelo empírico de Grayson e Streed para o cálculo do coeficiente de partição K no equilíbrio líquido-vapor. Todas as outras propriedades termodinâmicas (entalpia, entropia, Cp/Cv, etc.) são calculadas pelo modelo de Lee e Kesler..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescLKPPP">
<summary>
  Looks up a localized string similar to Neste Pacote de Propriedades, a Equação baseada na Teoria dos Estados Correspondentes desenvolvida por Lee e Kesler foi aprimorada por Plöcker para cálculo da fugacidade dos componentes em misturas assimétricas. Aqui, todas as propriedades são calculadas pela Equação LKP, incluindo os K-values..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescMUPP">
<summary>
  Looks up a localized string similar to Pacote de Propriedades que utiliza o método de Contribuição de Grupos UNIFAC Modificado (Dortmund) para a modelagem da Phase líquida. As Entalpias, Entropias e Capacidades Caloríficas residuais são calculadas a partir do modelo de Lee-Kesler..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescNRTLPP">
<summary>
  Looks up a localized string similar to Neste Pacote de Propriedades, o coeficiente de atividade da Phase líquida é calculado através do modelo NRTL (Non-Random Two-Liquid). Opcionalmente, a fugacidade da Phase vapor é calculada através da EDE Peng-Robinson. As entalpias de ambas as Phases são calculadas pela equação Lee-Kesler. Outras propriedades termodinâmicas são calculadas pela EDE Peng-Robinson. .
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescNUPP">
<summary>
  Looks up a localized string similar to Novos parâmetros do modelo de previsão de propriedade modificado UNIFAC são relatados para 89 grupos principais e 984 interações de grupo em grupo, utilizando dados de equilíbrio de Phases criticamente avaliados incluindo equilíbrio líquido-vapor (ELV), o equilíbrio líquido-líquido (ELL), equilíbrio sólido-líquido (ESL) , excesso de entalpia (HE), coeficiente de atividade infinita de diluição (AINF) e dados de excesso de capacidade de calor (CPE). Os parâmetros obtidos são recomendados principalmente para c [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescPCSAFTPP">
<summary>
  Looks up a localized string similar to The Perturbed Chain SAFT model is a state-of-the-art, engineering-like equation of state. It is designed for modelling mixtures of all types of substances: gases, solvents and polymers.

Perturbed-Chain SAFT is suitable for the calculation of phase equilibria and thermophysical properties of pure components and mixtures. It has been tested against experimental data for numerous systems and found to give excellent results. When compared to other equations of state, we find Perturbed-Chain SAFT to be more pre [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescPengRobinsonIWVTPP">
<summary>
  Looks up a localized string similar to Pacote de Propriedades que utiliza a EDE Peng-Robinson e considera água totalmente imiscível com hidrocarbonetos, separando-se em uma Phase isolada. Também utiliza translação no cálculo do volume molar para uma melhor predição da densidade de líquidos..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescPengRobinsonMP">
<summary>
  Looks up a localized string similar to Pacote de Propriedades com a EDE Peng-Robinson e suporte a mais de uma Phase líquida..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescPengRobinsonPP">
<summary>
  Looks up a localized string similar to Pacote de Propriedades que utiliza a EE Peng-Robinson. Indicado para uso com hidrocarbonetos e não-condensáveis..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescPRLK">
<summary>
  Looks up a localized string similar to Neste Pacote de Propriedades, as Entalpias, Entropias e Capacidades Caloríficas residuais são calculadas a partir do modelo de Lee-Kesler..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescPRSV2PP">
<summary>
  Looks up a localized string similar to PRSV2 EOS com três parâmetros por componente (k1, k2 e k3) e dois parâmetros de interação binária do tipo Margules (kij e kji).

A modificação para o termo atrativo na equação Peng-Robinson publicado por Stryjek e Vera em 1986 (PRSV) melhorou significativamente a precisão do modelo através da introdução de um parâmetro ajustável para o componente puro e modificando o ajuste polinomial do fator acêntrico. Uma modificação posterior, publicada em 1986 (PRSV2), melhorou a precisão dos modelos através da introdu [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescPRSV2VLPP">
<summary>
  Looks up a localized string similar to PRSV2 EOS com três parâmetros por componente (k1, k2 e k3) e dois parâmetros de interação binária do tipo Margules (kij e kji).

A modificação para o termo atrativo na equação Peng-Robinson publicado por Stryjek e Vera em 1986 (PRSV) melhorou significativamente a precisão do modelo através da introdução de um parâmetro ajustável para o componente puro e modificando o ajuste polinomial do fator acêntrico. Uma modificação posterior, publicada em 1986 (PRSV2), melhorou a precisão dos modelos através da introdu [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescPRWSPP">
<summary>
  Looks up a localized string similar to Utiliza a EE Peng-Robinson com a regra de mistura de Wong e Sandler. A EnergyFlow de Gibbs em excesso (GE/RT) é calculada pelo modelo UNIFAC.
Recomendada para uso com misturas binárias ou ternárias de substâncias polares em altas pressões e temperaturas. Para cálculo do ELV de hidrocarbonetos e/ou não-condensáveis, utilize a EE PR ou SRK..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.Descrio1">
<summary>
  Looks up a localized string similar to 1. Descrição.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescRPP">
<summary>
  Looks up a localized string similar to Pacote de Propriedades de referência, onde o equilíbrio termodinâmico é calculado pela Lei de Raoult. As Entalpias, Entropias e Capacidades Caloríficas residuais são consideradas iguais a zero. A Entalpia da Phase Líquida utiliza os valores de Delta-H de Vaporização experimentais ou calculados no caso dos Pseudo-componentes / Hipotéticos..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescSEAPP">
<summary>
  Looks up a localized string similar to Este Pacote de Propriedades contém rotinas para calcular propriedades da água do mar utilizando os procedimentos constantes na especificação IAPWS-08 (&quot;Release on the IAPWS Formulation 2008 for the Thermodynamic Properties of Seawater&quot;)..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescSoaveRedlichKwongSRK">
<summary>
  Looks up a localized string similar to Pacote de Propriedades que utiliza a EE Redlich-Kwong modificada por Soave. Indicado para uso com hidrocarbonetos e não-condensáveis.
As propriedades são calculadas diretamente através da equação de estado e/ou de dados experimentais, exceto:
Massa Específica da Phase Líquida: Método de Rackett
Condutividade Térmica da Phase Líquida: Método de Latini et al
Condutividade Térmica da Phase Vapor: Método de Ely e Hanley
Viscosidade da Phase Vapor: Método Jossi-Stiel-Thodos
Tensão Superficial da Phase Líquida: M [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescSourWaterPP">
<summary>
  Looks up a localized string similar to The Sour Water Property Package is based on the SWEQ model described in the USEPA Report EPA-600/2-80-067: &apos;A new correlation of NH3, CO2, and H2S volatility data from aqueous sour water systems&apos;, by Wilson, Grant M., available online at http://nepis.epa.gov/Exe/ZyPDF.cgi?Dockey=9101B309.PDF  

In this model, chemical and physical equilibria of NH3, CO2, and H2S in sour water systems including the effects of release by caustic (NaOH) addition are considered. The original model is applicable for temperatures [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescSRKMP">
<summary>
  Looks up a localized string similar to Pacote de Propriedades com suporte a flash multifásico utilizando a EDE SRK..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescSteamTablesPP">
<summary>
  Looks up a localized string similar to Pacote de Propriedades para uso exclusivo com Água (IAPWS-97).
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescUNIQUACPP">
<summary>
  Looks up a localized string similar to Neste Pacote de Propriedades, o coeficiente de atividade da Phase líquida é calculado através do modelo UNIQUAC. Opcionalmente, a fugacidade da Phase vapor é calculada através da EDE Peng-Robinson. As entalpias de ambas as Phases são calculadas pela equação Lee-Kesler. Outras propriedades termodinâmicas são calculadas pela EDE Peng-Robinson..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.DescUPP">
<summary>
  Looks up a localized string similar to Pacote de Propriedades que utiliza o método de Contribuição de Grupos UNIFAC para a modelagem da Phase líquida. As Entalpias, Entropias e Capacidades Caloríficas residuais são calculadas a partir do modelo de Lee-Kesler. A Phase vapor é modelada através da EDE Peng-Robinson. Recomendado para uso com os Componentes Hipotéticos..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.ErrorInvalidFlashSpecValue">
<summary>
  Looks up a localized string similar to Um ou ambos os valores das variáveis especificadas para o cálculo flash está (estão) inválido(s). Por favor verifique a Operação Unitária associada ou suas correntes de entrada para encontrar possíveis erros nas suas propriedades especificadas ou calculadas..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.MSTR_Desc">
<summary>
  Looks up a localized string similar to Carrega informações sobre substâncias e condições de fluxo de matéria.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.MSTR_Name">
<summary>
  Looks up a localized string similar to Corrente de Matéria.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.ParallelPInvokeError">
<summary>
  Looks up a localized string similar to O recurso de Aceleração em Paralelo da CPU foi desabilitado automaticamente para que uma biblioteca nativa (C++) possa ser utilizada pelo DWSIM. Agora você pode tentar realizar o cálculo novamente. Para reativar o recurso de Aceleração em paralelo da CPU, vá para &apos;Arquivo&apos; &gt; &apos;Configurações Globais&apos; &gt; &apos;Solver&apos; na nova interface ou &apos;Editar&apos; &gt; &apos;Configurações Gerais&apos; &gt; &apos;Solver&apos; na interface clássica. .
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_ENTH_CP_CALC_METHOD">
<summary>
  Looks up a localized string similar to Método de Cálculo Entalpia/Entropia/Cp/Cv (0 = Lee-Kesler, 1 = Ideal, 2 = Excesso, 3 = Experimental).
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_EXP_LIQDENS_PCORRECTION">
<summary>
  Looks up a localized string similar to Corrigir Densidade Experimental do Líquido com Pressão.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_FLASHALGORITHM">
<summary>
  Looks up a localized string similar to Algoritmo Flash (2 = Definição Global, 0 = LA ELV, 1 = IO ELV, 3 = IO ELLV, 4 = Gibbs ELV, 5 = Gibbs ELLV, 6 = NL ELLV, 7 = NL ESL, 8 = NL Imisc., 9 = LLE Simples).
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_FLASHALGORITHMFASTMODE">
<summary>
  Looks up a localized string similar to Algoritmo Flash no Modo Rápido.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_FLASHALGORITHMIDEALKFALLBACK">
<summary>
  Looks up a localized string similar to Utilizar K ideal na solução trivial.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_IDEAL_MIXRULE_LIQDENS">
<summary>
  Looks up a localized string similar to Usar Regra de Mistura Ideal para Densidade da Phase Líquida (0 = Desativar, 1 = Ativar).
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_IDEAL_VAPOR_PHASE_FUG">
<summary>
  Looks up a localized string similar to Usar Modelo Ideal para Fugacidade da Phase Vapor (0 = Desativar, 1 = Ativar).
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_IGNORE_MISSING_IPS">
<summary>
  Looks up a localized string similar to Ignorar ausência de parâmetros de interação binária (0 = Desativado, 1 = Ativado).
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_IGNORE_SALINITY_LIMIT">
<summary>
  Looks up a localized string similar to Ignorar limite máximo de salinidade.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_IGNORE_VAPOR_FRACTION_LIMIT">
<summary>
  Looks up a localized string similar to Remover limite da fração de vapor (VF &gt;= 0 e VF &lt;= 1) no cálculo flash.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_LIQVISC_PCORRECTION">
<summary>
  Looks up a localized string similar to Corrigir Viscosidade do Líquido com Pressão.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_PHFELT">
<summary>
  Looks up a localized string similar to Flash PH - Tolerância do Loop Externo.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_PHFILT">
<summary>
  Looks up a localized string similar to Flash PH - Tolerância do Loop Interno.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_PHFMEI">
<summary>
  Looks up a localized string similar to Flash PH - Número Máximo de Iterações no Loop Externo.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_PHFMII">
<summary>
  Looks up a localized string similar to Flash PH - Número Máximo de Iterações no Loop Interno.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_POYNTING">
<summary>
  Looks up a localized string similar to Usar fator de correção de Poynting para a fugacidade dos componentes na fase líquida (0 = Desativar, 1 = Ativar).
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_PSFELT">
<summary>
  Looks up a localized string similar to Flash PS - Tolerância do Loop Externo.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_PSFILT">
<summary>
  Looks up a localized string similar to Flash PS - Tolerância do Loop Interno.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_PSFMEI">
<summary>
  Looks up a localized string similar to Flash PS - Número Máximo de Iterações no Loop Externo.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_PSFMII">
<summary>
  Looks up a localized string similar to Flash PS - Número Máximo de Iterações no Loop Interno.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_PTFELT">
<summary>
  Looks up a localized string similar to Flash PT/PV - Tolerância do Loop Externo.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_PTFILT">
<summary>
  Looks up a localized string similar to Flash PT/PV - Tolerância do Loop Interno.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_PTFMEI">
<summary>
  Looks up a localized string similar to Flash PT/PV - Número Máximo de Iterações no Loop Externo.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_PTFMII">
<summary>
  Looks up a localized string similar to Flash PT/PV- Número Máximo de Iterações no Loop Interno.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_RIG_BUB_DEW_FLASH_INIT">
<summary>
  Looks up a localized string similar to Usar Cálculo Rigoroso de Pressões de Bolha e Orvalho para Inicializar o Flash PT (0 = Desativar, 1 = Ativar).
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_USE_EOS_LIQDENS">
<summary>
  Looks up a localized string similar to Usar EDE para o Cálculo da Massa Específica da Phase Líquida (0 = Desativar, 1 = Ativar).
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_USE_EOS_VOLUME_SHIFT">
<summary>
  Looks up a localized string similar to Usar correção de volume (Peneloux) (0 = Desativar, 1 = Ativar).
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_USE_IDEAL_SOLID_FUGACITY">
<summary>
  Looks up a localized string similar to Usar Fugacidade Ideal para Sólidos.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_USEEXPLIQDENS">
<summary>
  Looks up a localized string similar to Usar Curva Experimental para Cálculo da Densidade (Líquido) (0 = Desativar, 1 = Ativar).
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PP_USEEXPLIQTHERMALCOND">
<summary>
  Looks up a localized string similar to Usar Curva Experimental para Cálculo da Condutividade Térmica (Líquido) (0 = Desativar, 1 = Ativar).
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlashError">
<summary>
  Looks up a localized string similar to Erro no cálculo Flash..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlashMaxIt">
<summary>
  Looks up a localized string similar to O número máximo de iterações no cálculo Flash foi atingido..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlashMaxIt2">
<summary>
  Looks up a localized string similar to Flash PT: Máx Iterações Atingido..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlashPHInternalLoopError">
<summary>
  Looks up a localized string similar to Flash PH: Erro no loop interno..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlashPHMaxExtIt">
<summary>
  Looks up a localized string similar to Flash PH: Máximo de iterações no loop externo atingido..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlashPHMaxIntIt">
<summary>
  Looks up a localized string similar to Flash PH: Máximo de iterações no loop interno atingido..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlasHPHTempError">
<summary>
  Looks up a localized string similar to Flash PH: Erro ao calcular temperatura..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlashPSFError">
<summary>
  Looks up a localized string similar to O cálculo Flash PSF não é suportado..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlashPSInternalLoopError">
<summary>
  Looks up a localized string similar to Flash PS: Erro no loop interno..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlashPSMaxExtIt">
<summary>
  Looks up a localized string similar to Flash PS: Máximo de iterações no loop externo atingido..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlashPSMaxIntIt">
<summary>
  Looks up a localized string similar to Flash PS: Máximo de iterações no loop interno atingido..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlasHPSTempError">
<summary>
  Looks up a localized string similar to Flash PS: Erro ao calcular temperatura..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlashPVNotSupported">
<summary>
  Looks up a localized string similar to O cálculo Flash PV não é suportado..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlashTHNotSupported">
<summary>
  Looks up a localized string similar to O cálculo Flash TH não é suportado..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlashTPVapFracError">
<summary>
  Looks up a localized string similar to Flash PT: Erro ao calcular fração de vapor..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlashTrivialSolution">
<summary>
  Looks up a localized string similar to O algoritmo Flash convergiu para a solução trivial. Tente executar o cálculo em uma condição perturbada de temperatura e/ou pressão ou utilize outro Pacote de Propriedades similar ao atual..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_FlashTSNotSupported">
<summary>
  Looks up a localized string similar to O cálculo Flash TS não é suportado..
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Strings.PropPack_ZError">
<summary>
  Looks up a localized string similar to Erro no cálculo do fator de compressibilidade..
</summary>
</member>
<member name="T:DWSIM.Thermodynamics.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.accept">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.add">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.bullet_cross">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.bullet_green">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.bullet_sparkle">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.bullet_tick">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.cog">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.cog1">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.copy">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.cross">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.disconnect">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.DWSIM_ico_64">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.DWSIM4_icon">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.emblem_important">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.help">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.information">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.newspaper_go">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.stream_mat_16">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:DWSIM.Thermodynamics.My.Resources.Resources.stream_mat_32">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="T:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.FlashAlgorithms.SteamTables">
 <summary>
 The Flash algorithms in this class are based on the Nested Loops approach to solve equilibrium calculations.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.FlashAlgorithms.FlashAlgorithm">
 <summary>
 This is the base class for the flash algorithms.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.FlashAlgorithms.FlashAlgorithm.CalculateEquilibrium(DWSIM.Thermodynamics.PropertyPackages.FlashSpec,DWSIM.Thermodynamics.PropertyPackages.FlashSpec,System.Double,System.Double,DWSIM.Thermodynamics.PropertyPackages.PropertyPackage,System.Double[],System.Double[],System.Double)">
 <summary>
 Calculates Phase Equilibria for a given mixture at specified conditions.
 </summary>
 <param name="spec1">Flash state specification 1</param>
 <param name="spec2">Flash state specification 2</param>
 <param name="val1">Value of the first flash state specification (P in Pa, T in K, H in kJ/kg, S in kJ/[kg.K], VAP/SF in mole fraction from 0 to 1)</param>
 <param name="val2">Value of the second flash state specification (P in Pa, T in K, H in kJ/kg, S in kJ/[kg.K], VAP/SF in mole fraction from 0 to 1)</param>
 <param name="pp">Property Package instance</param>
 <param name="mixmolefrac">Vector of mixture mole fractions</param>
 <param name="initialKval">Vector containing initial estimates for the K-values (set to 'Nothing' (VB) or 'null' (C#) if none).</param>
 <param name="initialestimate">Initial estimate for Temperature (K) or Pressure (Pa), whichever will be calculated</param>
 <returns>A FlashCalculationResult instance with the results of the calculations</returns>
 <remarks>This function must be used instead of the older type-specific flash functions.
 Check if the 'ResultException' property of the result object is nothing/null before proceeding.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.FlashAlgorithms.FlashAlgorithm.Flash_VT(System.Double[],System.Double,System.Double,System.Double,DWSIM.Thermodynamics.PropertyPackages.PropertyPackage,System.Boolean,System.Double[])">
 <summary>
 Volume-Temperature Flash
 </summary>
 <param name="Vz">Mole fractions</param>
 <param name="Vspec">Molar Volume (m3/mol)</param>
 <param name="T">Temperature (K)</param>
 <param name="Pref">Pressure estimate (Pa)</param>
 <param name="PP"></param>
 <param name="ReuseKI"></param>
 <param name="PrevKi"></param>
 <returns></returns>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.FlashAlgorithms.FlashAlgorithm.IdentifyPhase(System.Double[],System.Double,System.Double,DWSIM.Thermodynamics.PropertyPackages.PropertyPackage,System.String)">
 <summary>
 This algorithm returns the state of a fluid given its composition and system conditions.
 </summary>
 <param name="Vx">Vector of mole fractions</param>
 <param name="P">Pressure in Pa</param>
 <param name="T">Temperature in K</param>
 <param name="pp">Property Package instance</param>
 <param name="eos">Equation of State: 'PR' or 'SRK'.</param>
 <returns>A string indicating the phase: 'V' or 'L'.</returns>
 <remarks>This algorithm is based on the method present in the following paper:
 G. Venkatarathnam, L.R. Oellrich, Identification of the phase of a fluid using partial derivatives of pressure, volume, and temperature
 without reference to saturation properties: Applications in phase equilibria calculations, Fluid Phase Equilibria, Volume 301, Issue 2, 
 25 February 2011, Pages 225-233, ISSN 0378-3812, http://dx.doi.org/10.1016/j.fluid.2010.12.001.
 (http://www.sciencedirect.com/science/article/pii/S0378381210005935)
 Keywords: Phase identification; Multiphase equilibria; Process simulators</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.FlashAlgorithms.FlashAlgorithm.CalcPIP(System.Double[],System.Double,System.Double,DWSIM.Thermodynamics.PropertyPackages.PropertyPackage,System.String)">
 <summary>
 This algorithm returns the Phase Identification (PI) parameter for a fluid given its composition and system conditions.
 </summary>
 <param name="Vx">Vector of mole fractions</param>
 <param name="P">Pressure in Pa</param>
 <param name="T">Temperature in K</param>
 <param name="pp">Property Package instance</param>
 <param name="eos">Equation of State: 'PR' or 'SRK'.</param>
 <returns>A string indicating the phase: 'V' or 'L'.</returns>
 <remarks>This algorithm is based on the method present in the following paper:
 G. Venkatarathnam, L.R. Oellrich, Identification of the phase of a fluid using partial derivatives of pressure, volume, and temperature
 without reference to saturation properties: Applications in phase equilibria calculations, Fluid Phase Equilibria, Volume 301, Issue 2, 
 25 February 2011, Pages 225-233, ISSN 0378-3812, http://dx.doi.org/10.1016/j.fluid.2010.12.001.
 (http://www.sciencedirect.com/science/article/pii/S0378381210005935)
 Keywords: Phase identification; Multiphase equilibria; Process simulators</remarks>
</member>
<member name="T:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.FlashAlgorithms.FlashCalculationResult">
 <summary>
 Class to store flash calculation results.
 </summary>
 <remarks></remarks>
 
</member>
<member name="P:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.FlashAlgorithms.FlashCalculationResult.BaseMoleAmount">
 <summary>
 Defines the base mole amount for determination of phase/compound fractions. Default is 1.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.FlashAlgorithms.BlackOil">
 <summary>
 The Flash algorithms in this class are based on the Nested Loops approach to solve equilibrium calculations.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.FlashAlgorithms.NestedLoops">
 <summary>
 The Flash algorithms in this class are based on the Nested Loops approach to solve equilibrium calculations.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.FlashAlgorithms.NestedLoops3PV3">
 <summary>
 The Flash algorithms in this class are based on the Nested Loops approach to solve equilibrium calculations.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.FlashAlgorithms.NestedLoopsImmiscible">
 <summary>
 The Flash algorithms in this class are based on the Nested Loops approach to solve equilibrium calculations.
 </summary>
 <remarks></remarks>
</member>
<member name="T:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.FlashAlgorithms.NestedLoopsSLE">
 <summary>
 The Flash algorithms in this class are based on the Nested Loops approach to solve equilibrium calculations.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.Seawater.air_molar_mass_si(System.Double)">
 <summary>
 returns the molar mass of humid air in kg mol-1 as a function of the air mass fraction, a_si, in kg/kg
 </summary>
 <param name="a_si"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.Seawater.air_molfraction_vap_si(System.Double)">
 <summary>
 returns the mole fraction of vapour in humid air in mol mol-1
 as a function of the air mass fraction, a_si, in kg/kg
 </summary>
 <param name="a_si"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.Seawater.air_molfraction_air_si(System.Double)">
 <summary>
 returns the mole fraction of air in humid air in mol mol-1
 as a function of the air mass fraction, a_si, in kg/kg
 </summary>
 <param name="a_si"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.Seawater.air_massfraction_air_si(System.Double)">
 <summary>
 returns the mass fraction a_si in kg/kg of air in humid air as a function of the mole fraction x_si in mol/mol of air in humid air
 </summary>
 <param name="x_si"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.Auxiliary.Seawater.air_massfraction_vap_si(System.Double)">
 <summary>
 returns the mass fraction of vapour in humid air in kg/kg as a function of the mole fraction of air, x_si, in mol mol-1
 </summary>
 <param name="x_si"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.ThermoPlugs.PR78.CheckRoot(System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
 <summary>
 This procedure checks if the compressibility factor is within the allowable region for the specified phase. 
 If not, it generates a pseudo-root cabable of generate properties for the specified phase in order to keep 
 the flash convergence process going forward.
 </summary>
 <param name="Z">The calculated compressibility factor, coming from the EOS</param>
 <param name="a">EOS 'a' mixture parameter</param>
 <param name="b">EOS 'b' mixture parameter</param>
 <param name="P">Pressure in Pa</param>
 <param name="T">Temperature in K</param>
 <param name="phaselabel">'L' for Liquid, 'V' for Vapor.</param>
 <returns>A vector containing the calculated compressibility factor and pressure, if required. 
 If the given compressibility factor is within the allowable range, it is returned together with 
 the specified pressure (no pseudoroot calculation is required).</returns>
 <remarks>This procedure is based on the paper: 
 Mathias, P. M., Boston, J. F. and Watanasiri, S. (1984), 
 Effective utilization of equations of state for thermodynamic properties in process simulation. 
 AIChE J., 30: 182–186. doi: 10.1002/aic.690300203</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.ThermoPlugs.PR.CheckRoot(System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
 <summary>
 This procedure checks if the compressibility factor is within the allowable region for the specified phase. 
 If not, it generates a pseudo-root cabable of generate properties for the specified phase in order to keep 
 the flash convergence process going forward.
 </summary>
 <param name="Z">The calculated compressibility factor, coming from the EOS</param>
 <param name="a">EOS 'a' mixture parameter</param>
 <param name="b">EOS 'b' mixture parameter</param>
 <param name="P">Pressure in Pa</param>
 <param name="T">Temperature in K</param>
 <param name="phaselabel">'L' for Liquid, 'V' for Vapor.</param>
 <returns>A vector containing the calculated compressibility factor and pressure, if required. 
 If the given compressibility factor is within the allowable range, it is returned together with 
 the specified pressure (no pseudoroot calculation is required).</returns>
 <remarks>This procedure is based on the paper: 
 Mathias, P. M., Boston, J. F. and Watanasiri, S. (1984), 
 Effective utilization of equations of state for thermodynamic properties in process simulation. 
 AIChE J., 30: 182–186. doi: 10.1002/aic.690300203</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.ThermoPlugs.SRK.CheckRoot(System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
 <summary>
 This procedure checks if the compressibility factor is within the allowable region for the specified phase. 
 If not, it generates a pseudo-root cabable of generate properties for the specified phase in order to keep 
 the flash convergence process going forward.
 </summary>
 <param name="Z">The calculated compressibility factor, coming from the EOS</param>
 <param name="a">EOS 'a' mixture parameter</param>
 <param name="b">EOS 'b' mixture parameter</param>
 <param name="P">Pressure in Pa</param>
 <param name="T">Temperature in K</param>
 <param name="phaselabel">'L' for Liquid, 'V' for Vapor.</param>
 <returns>A vector containing the calculated compressibility factor and pressure, if required. 
 If the given compressibility factor is within the allowable range, it is returned together with 
 the specified pressure (no pseudoroot calculation is required).</returns>
 <remarks>This procedure is based on the paper: 
 Mathias, P. M., Boston, J. F. and Watanasiri, S. (1984), 
 Effective utilization of equations of state for thermodynamic properties in process simulation. 
 AIChE J., 30: 182–186. doi: 10.1002/aic.690300203</remarks>
</member>
<member name="P:DWSIM.Thermodynamics.PropertyPackages.ElectrolyteBasePropertyPackage.FlashBase">
 <summary>
 Returns the FlashAlgorithm object instance for this property package.
 </summary>
 <value></value>
 <returns>A FlashAlgorithm object to be used in flash calculations.</returns>
 <remarks></remarks>
</member>
<member name="T:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage">
 <summary>
 The Property Package Class contains methods to do thermodynamic calculations for all supported phases in DWSIM.
 </summary>
 <remarks>The base class is inherited by each implemented property package, which contains its own methods.</remarks>
</member>
<member name="P:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.ParametersXMLString">
 <summary>
 ' For mobile compatibility only.
 </summary>
 <returns></returns>
</member>
<member name="P:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.FlashBase">
 <summary>
 Returns the FlashAlgorithm object instance for this property package.
 </summary>
 <value></value>
 <returns>A FlashAlgorithm object to be used in flash calculations.</returns>
 <remarks></remarks>
</member>
<member name="P:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.CurrentMaterialStream">
 <summary>
 Gets or sets the current material stream for this property package.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_CalcProp(System.String,DWSIM.Thermodynamics.PropertyPackages.Phase)">
 <summary>
 Provides a wrapper function for CAPE-OPEN CalcProp/CalcSingleProp functions.
 </summary>
 <param name="property">The property to be calculated.</param>
 <param name="phase">The phase where the property must be calculated for.</param>
 <remarks>This function is necessary since DWSIM's internal property calculation function calculates all properties at once,
 while the CAPE-OPEN standards require that only the property that was asked for to be calculated, leaving the others unchanged.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_CalcSolidPhaseProps">
 <summary>
 Provides a default implementation for solid phase property calculations in CAPE-OPEN mode. Should be used by all derived propety packages.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_CalcEnthalpy(System.Array,System.Double,System.Double,DWSIM.Thermodynamics.PropertyPackages.State)">
 <summary>
 Calculates the enthalpy of a mixture.
 </summary>
 <param name="Vx">Vector of doubles containing the molar composition of the mixture.</param>
 <param name="T">Temperature (K)</param>
 <param name="P">Pressure (Pa)</param>
 <param name="st">State enum indicating the state of the mixture (liquid or vapor).</param>
 <returns>The enthalpy of the mixture in kJ/kg.</returns>
 <remarks>The basis for the calculated enthalpy/entropy in DWSIM is zero at 25 C and 1 atm.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_CalcEnthalpyDeparture(System.Array,System.Double,System.Double,DWSIM.Thermodynamics.PropertyPackages.State)">
 <summary>
 Calculates the enthalpy departure of a mixture.
 </summary>
 <param name="Vx">Vector of doubles containing the molar composition of the mixture.</param>
 <param name="T">Temperature (K)</param>
 <param name="P">Pressure (Pa)</param>
 <param name="st">State enum indicating the state of the mixture (liquid or vapor).</param>
 <returns>The enthalpy departure of the mixture in kJ/kg.</returns>
 <remarks>The basis for the calculated enthalpy/entropy in DWSIM is zero at 25 C and 1 atm.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_CalcEntropy(System.Array,System.Double,System.Double,DWSIM.Thermodynamics.PropertyPackages.State)">
 <summary>
 Calculates the entropy of a mixture.
 </summary>
 <param name="Vx">Vector of doubles containing the molar composition of the mixture.</param>
 <param name="T">Temperature (K)</param>
 <param name="P">Pressure (Pa)</param>
 <param name="st">State enum indicating the state of the mixture (liquid or vapor).</param>
 <returns>The entropy of the mixture in kJ/kg.K.</returns>
 <remarks>The basis for the calculated enthalpy/entropy in DWSIM is zero at 25 C and 1 atm.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_CalcEntropyDeparture(System.Array,System.Double,System.Double,DWSIM.Thermodynamics.PropertyPackages.State)">
 <summary>
 Calculates the entropy departure of a mixture.
 </summary>
 <param name="Vx">Vector of doubles containing the molar composition of the mixture.</param>
 <param name="T">Temperature (K)</param>
 <param name="P">Pressure (Pa)</param>
 <param name="st">State enum indicating the state of the mixture (liquid or vapor).</param>
 <returns>The entropy departure of the mixture in kJ/kg.K.</returns>
 <remarks>The basis for the calculated enthalpy/entropy in DWSIM is zero at 25 C and 1 atm.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_CalcKvalue(System.Double[],System.Double[],System.Double,System.Double,System.String)">
 <summary>
 Calculates K-values of components in a mixture.
 </summary>
 <param name="Vx">Vector of doubles containing the molar composition of the liquid phase.</param>
 <param name="Vy">Vector of doubles containing the molar composition of the vapor phase.</param>
 <param name="T">Temperature of the system.</param>
 <param name="P">Pressure of the system.</param>
 <returns>An array containing K-values for all components in the mixture.</returns>
 <remarks>The composition vector must follow the same sequence as the components which were added in the material stream.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_CalcKvalue(System.Array,System.Double,System.Double)">
 <summary>
 Calculates K-values of components in a mixture.
 </summary>
 <param name="Vx">Vector of doubles containing the molar composition of the mixture.</param>
 <param name="T">Temperature of the system, in K.</param>
 <param name="P">Pressure of the system, in Pa.</param>
 <returns>An array containing K-values for all components in the mixture.</returns>
 <remarks>The composition vector must follow the same sequence as the components which were added in the material stream.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_CalcKvalue_Ideal_Wilson(System.Double,System.Double)">
 <summary>
 Calculates Ideal K-values using Critical Properties.
 </summary>
 <param name="T"></param>
 <param name="P"></param>
 <returns></returns>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_CalcKvalue_Ideal_VP(System.Double,System.Double)">
 <summary>
 Calculates Ideal K-values using Vapor Pressures.
 </summary>
 <param name="T"></param>
 <param name="P"></param>
 <returns></returns>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_CalcBubP(System.Array,System.Double,System.Double,System.Array,System.Boolean)">
 <summary>
 Does a Bubble Pressure calculation for the specified liquid composition at the specified temperature.
 </summary>
 <param name="Vx">Vector of doubles containing liquid phase molar composition for each component in the mixture.</param>
 <param name="T">Temperature in K</param>
 <param name="Pref">Initial estimate for Pressure, in Pa</param>
 <param name="K">Vector with initial estimates for K-values</param>
 <param name="ReuseK">Boolean indicating wether to use the initial estimates for K-values or not.</param>
 <returns>Returns the object vector {L, V, Vx, Vy, P, ecount, Ki} where L is the liquid phase molar fraction, 
 V is the vapor phase molar fraction, Vx is the liquid phase molar composition vector, Vy is the vapor phase molar 
 composition vector, P is the calculated Pressure in Pa, ecount is the number of iterations and Ki is a vector containing 
 the calculated K-values.</returns>
 <remarks>The composition vector must follow the same sequence as the components which were added in the material stream.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_CalcBubT(System.Array,System.Double,System.Double,System.Array,System.Boolean)">
 <summary>
 Does a Bubble Temperature calculation for the specified liquid composition at the specified pressure.
 </summary>
 <param name="Vx">Vector of doubles containing liquid phase molar composition for each component in the mixture.</param>
 <param name="P"></param>
 <param name="Tref"></param>
 <param name="K">Vector with initial estimates for K-values</param>
 <param name="ReuseK">Boolean indicating wether to use the initial estimates for K-values or not.</param>
 <returns>Returns the object vector {L, V, Vx, Vy, T, ecount, Ki} where L is the liquid phase molar fraction, 
 V is the vapor phase molar fraction, Vx is the liquid phase molar composition vector, Vy is the vapor phase molar 
 composition vector, T is the calculated Temperature in K, ecount is the number of iterations and Ki is a vector containing 
 the calculated K-values.</returns>
 <remarks>The composition vector must follow the same sequence as the components which were added in the material stream.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_CalcDewP(System.Array,System.Double,System.Double,System.Array,System.Boolean)">
 <summary>
 Does a Dew Pressure calculation for the specified vapor phase composition at the specified temperature.
 </summary>
 <param name="Vx">Vector of doubles containing vapor phase molar composition for each component in the mixture.</param>
 <param name="T">Temperature in K</param>
 <param name="Pref">Initial estimate for Pressure, in Pa</param>
 <param name="K">Vector with initial estimates for K-values</param>
 <param name="ReuseK">Boolean indicating wether to use the initial estimates for K-values or not.</param>
 <returns>Returns the object vector {L, V, Vx, Vy, P, ecount, Ki} where L is the liquid phase molar fraction, 
 V is the vapor phase molar fraction, Vx is the liquid phase molar composition vector, Vy is the vapor phase molar 
 composition vector, P is the calculated Pressure in Pa, ecount is the number of iterations and Ki is a vector containing 
 the calculated K-values.</returns>
 <remarks>The composition vector must follow the same sequence as the components which were added in the material stream.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_CalcDewT(System.Array,System.Double,System.Double,System.Array,System.Boolean)">
 <summary>
 Does a Dew Temperature calculation for the specified vapor composition at the specified pressure.
 </summary>
 <param name="Vx">Vector of doubles containing vapor phase molar composition for each component in the mixture.</param>
 <param name="P"></param>
 <param name="Tref"></param>
 <param name="K">Vector with initial estimates for K-values</param>
 <param name="ReuseK">Boolean indicating wether to use the initial estimates for K-values or not.</param>
 <returns>Returns the object vector {L, V, Vx, Vy, T, ecount, Ki} where L is the liquid phase molar fraction, 
 V is the vapor phase molar fraction, Vx is the liquid phase molar composition vector, Vy is the vapor phase molar 
 composition vector, T is the calculated Temperature in K, ecount is the number of iterations and Ki is a vector containing 
 the calculated K-values.</returns>
 <remarks>The composition vector must follow the same sequence as the components which were added in the material stream.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_CalcFugCoeff(System.Array,System.Double,System.Double,DWSIM.Thermodynamics.PropertyPackages.State)">
 <summary>
 Calculates fugacity coefficients for the specified composition at the specified conditions.
 </summary>
 <param name="Vx">Vector of doubles containing the molar composition of the mixture.</param>
 <param name="T">Temperature in K</param>
 <param name="P">Pressure in Pa</param>
 <param name="st">Mixture state (Liquid or Vapor)</param>
 <returns>A vector of doubles containing fugacity coefficients for the components in the mixture.</returns>
 <remarks>The composition vector must follow the same sequence as the components which were added in the material stream.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_ReturnPhaseEnvelope(DWSIM.Thermodynamics.PropertyPackages.PhaseEnvelopeOptions,System.ComponentModel.BackgroundWorker)">
 <summary>
 This function returns points to build the phase envelope.
 </summary>
 <param name="peoptions"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.DW_ReturnBinaryEnvelope(System.Object,System.ComponentModel.BackgroundWorker)">
 <summary>
 This function returns points to build the binary phase envelope.
 </summary>
 <param name="parameters"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.ComponentDescription">
 <summary>
 Gets the name of the component.
 </summary>
 <value></value>
 <returns>CapeString</returns>
 <remarks>Implements CapeOpen.ICapeIdentification.ComponentDescription</remarks>
</member>
<member name="P:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.ComponentName">
 <summary>
 Gets the description of the component.
 </summary>
 <value></value>
 <returns>CapeString</returns>
 <remarks>Implements CapeOpen.ICapeIdentification.ComponentName</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.CalcEquilibrium(System.Object,System.String,System.Object)">
 <summary>
 Method responsible for calculating/delegating phase equilibria.
 </summary>
 <param name="materialObject">The Material Object</param>
 <param name="flashType">Flash calculation type.</param>
 <param name="props">Properties to be calculated at equilibrium. UNDEFINED for no
 properties. If a list, then the property values should be set for each
 phase present at equilibrium. (not including the overall phase).</param>
 <remarks><para>On the Material Object the CalcEquilibrium method must set the amounts (phaseFraction) and compositions
 (fraction) for all phases present at equilibrium, as well as the temperature and pressure for the overall
 mixture, if these are not set as part of the calculation specifications. The CalcEquilibrium method must not
 set on the Material Object any other value - in particular it must not set any values for phases that do not
 exist. See 5.2.1 for more information.</para>
 <para>The available list of flashes is given in section 5.6.1.</para>
 <para>When calling this method, it is advised not to combine a flash calculation with a property calculation.
 Through the returned error one cannot see which has failed, plus the additional arguments available in a
 CalcProp call (such as calculation type) cannot be specified in a CalcEquilibrium call. Advice is to perform a
 CalcEquilibrium, get the phaseIDs and perform a CalcProp for the existing phases.</para></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.CalcProp(System.Object,System.Object,System.Object,System.String)">
 <summary>
 This method is responsible for doing all calculations on behalf of the Calculation Routine component.
 </summary>
 <param name="materialObject">The Material Object of the calculation.</param>
 <param name="props">The list of properties to be calculated.</param>
 <param name="phases">List of phases for which the properties are to be calculated.</param>
 <param name="calcType">Type of calculation: Mixture Property or Pure Compound Property. For
 partial property, such as fugacity coefficients of compounds in a
 mixture, use “Mixture” CalcType. For pure compound fugacity
 coefficients, use “Pure” CalcType.</param>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetComponentConstant(System.Object,System.Object)">
 <summary>
 Returns the values of the Constant properties of the compounds contained in the passed Material Object.
 </summary>
 <param name="materialObject">The Material Object.</param>
 <param name="props">The list of properties.</param>
 <returns>Compound Constant values.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetComponentList(System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@)">
 <summary>
 Returns the list of compounds of a given Property Package.
 </summary>
 <param name="compIds">List of compound IDs</param>
 <param name="formulae">List of compound formulae</param>
 <param name="names">List of compound names.</param>
 <param name="boilTemps">List of boiling point temperatures.</param>
 <param name="molWt">List of molecular weights.</param>
 <param name="casNo">List of CAS numbers .</param>
 <remarks>Compound identification could be necessary if the PME has internal knowledge of chemical compounds, or in case of
 use of multiple Property Packages. In order to identify the compounds of a Property Package, the PME will use the
 'casno’ argument instead of the compIds. The reason is that different PMEs may give different names to the same
 chemical compounds, whereas CAS Numbers are universal. Therefore, it is recommended to provide a value for the
 casno argument wherever available.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetPhaseList">
 <summary>
 Provides the list of the supported phases. When supported for one or more property calculations, the Overall
 phase and multiphase identifiers must be returned by this method.
 </summary>
 <returns>The list of phases supported by the Property Package.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetPropList">
 <summary>
 Returns list of properties supported by the Property Package.
 </summary>
 <returns>List of all supported Properties.</returns>
 <remarks>GetPropList should return identifiers for the non-constant properties calculated by CalcProp. Standard
 identifiers are listed in 3.10.1. Other non-standard properties that are supported by the Property Package can
 also be returned. GetPropList must not return identifiers for compound constant properties returned by
 GetComponentConstant.
 The properties temperature, pressure, fraction, flow, phaseFraction, totalFlow cannot be returned by
 GetPropList, since all thermodynamic software components must support them. Although the property
 identifier of derivative properties is formed from the identifier of another property, the GetPropList method
 must return the identifiers of all supported derivative and non-derivative properties. For instance, a Property
 Package could return the following list:
 enthalpy, enthalpy.Dtemperature, entropy, entropy.Dpressure.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetUniversalConstant(System.Object,System.Object)">
 <summary>
 Returns the values of the Universal Constants.
 </summary>
 <param name="materialObject">The Material Object.</param>
 <param name="props">List of requested Universal Constants;</param>
 <returns>Values of Universal Constants.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.PropCheck(System.Object,System.Object)">
 <summary>
 Check to see if properties can be calculated.
 </summary>
 <param name="materialObject">The Material Object for the calculations.</param>
 <param name="props">List of Properties to check.</param>
 <returns>The array of booleans for each property.</returns>
 <remarks>As it was unclear from the original specification what PropCheck should exactly be checking, and as the
 argument list does not include a phase specification, implementations vary. It is generally expected that
 PropCheck at least verifies that the Property is available for calculation in the property Package. However,
 this can also be verified with PropList. It is advised not to use PropCheck.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.ValidityCheck(System.Object,System.Object)">
 <summary>
 Checks the validity of the calculation. This method is deprecated.
 </summary>
 <param name="materialObject">The Material Object for the calculations.</param>
 <param name="props">The list of properties to check.</param>
 <returns>The properties for which reliability is checked.</returns>
 <remarks>The ValidityCheck method must not be used, since the ICapeThermoReliability interface is not yet defined.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.CalcEquilibrium2(System.Object,System.String,System.Object)">
 <summary>
 Method responsible for calculating phase equilibria.
 </summary>
 <param name="materialObject">Material Object of the calculation</param>
 <param name="flashType">Flash calculation type.</param>
 <param name="props">Properties to be calculated at equilibrium. UNDEFINED for no
 properties. If a list, then the property values should be set for each
 phase present at equilibrium. (not including the overall phase).</param>
 <remarks>The CalcEquilibrium method must set on the Material Object the amounts (phaseFraction) and compositions
 (fraction) for all phases present at equilibrium, as well as the temperature and pressure for the overall
 mixture, if not set as part of the calculation specifications. The CalcEquilibrium method must not set on the
 Material Object any other value - in particular it must not set any values for phases that do not exist. See
 5.2.1 for more information.
 The available list of flashes is given in section 5.6.1.
 It is advised not to combine a flash calculation with a property calculation. By the returned error one cannot
 see which has failed, plus the additional arguments to CalcProp (such as calculation type) cannot be
 specified. Advice is to perform a CalcEquilibrium, get the phaseIDs and perform a CalcProp for those
 phases.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.PropCheck1(System.Object,System.String,System.Object,System.Object@)">
 <summary>
 Checks to see if a given type of flash calculations can be performed and whether the properties can be
 calculated after the flash calculation.
 </summary>
 <param name="materialObject">The Material Object for the calculations.</param>
 <param name="flashType">Type of flash calculation to check</param>
 <param name="props">List of Properties to check. UNDEFINED for none.</param>
 <param name="valid">The array of booleans for flash and property. First element is reserved for flashType.</param>
 <remarks>As it was unclear from the original specification what PropCheck should exactly be checking, and as the
 argument list does not include a phase specification, implementations vary. It is generally expected that
 PropCheck at least verifies that the Property is available for calculation in the Material Object. However, this
 can also be verified with PropList. It is advised not to use PropCheck.
 DWSIM doesn't implement this interface.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.PropList(System.Object@,System.Object@,System.Object@,System.Object@)">
 <summary>
 Returns the flash types, properties, phases, and calculation types that are supported by a given Equilibrium Server Routine.
 </summary>
 <param name="flashType">Type of flash calculations supported.</param>
 <param name="props">List of supported properties.</param>
 <param name="phases">List of supported phases.</param>
 <param name="calcType">List of supported calculation types.</param>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetCompoundConstant(System.Object,System.Object)">
 <summary>
 Returns the values of constant Physical Properties for the specified Compounds.
 </summary>
 <param name="props">The list of Physical Property identifiers. Valid
 identifiers for constant Physical Properties are listed in section 7.5.2.</param>
 <param name="compIds">List of Compound identifiers for which constants are to
 be retrieved. Set compIds to UNDEFINED to denote all Compounds in the component that implements the ICapeThermoCompounds interface.</param>
 <returns>Values of constants for the specified Compounds.</returns>
 <remarks>The GetConstPropList method can be used in order to check which constant Physical
 Properties are available.
 If the number of requested Physical Properties is P and the number of Compounds is C, the
 propvals array will contain C*P variants. The first C variants will be the values for the first
 requested Physical Property (one variant for each Compound) followed by C values of constants
 for the second Physical Property, and so on. The actual type of values returned
 (Double, String, etc.) depends on the Physical Property as specified in section 7.5.2.
 Physical Properties are returned in a fixed set of units as specified in section 7.5.2.
 If the compIds argument is set to UNDEFINED this is a request to return property values for
 all compounds in the component that implements the ICapeThermoCompounds interface
 with the compound order the same as that returned by the GetCompoundList method. For
 example, if the interface is implemented by a Property Package component the property
 request with compIds set to UNDEFINED means all compounds in the Property Package
 rather than all compounds in the Material Object passed to the Property package.
 If any Physical Property is not available for one or more Compounds, then undefined values
 must be returned for those combinations and an ECapeThrmPropertyNotAvailable exception
 must be raised. If the exception is raised, the client should check all the values returned to
 determine which is undefined.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetCompoundList(System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@)">
 <summary>
 Returns the list of all Compounds. This includes the Compound identifiers recognised and extra
information that can be used to further identify the Compounds.
 </summary>
 <param name="compIds">List of Compound identifiers</param>
 <param name="formulae">List of Compound formulae</param>
 <param name="names">List of Compound names.</param>
 <param name="boilTemps">List of boiling point temperatures.</param>
 <param name="molwts">List of molecular weights.</param>
 <param name="casnos">List of Chemical Abstract Service (CAS) Registry numbers.</param>
 <remarks>If any item cannot be returned then the value should be set to UNDEFINED. The same information
 can also be extracted using the GetCompoundConstant method. The equivalences
 between GetCompoundList arguments and Compound constant Physical Properties, as
 specified in section 7.5.2, is given in the table below.
 When the ICapeThermoCompounds interface is implemented by a Material Object, the list
 of Compounds returned is fixed when the Material Object is configured.
 For a Property Package component, the Property Package will normally contain a limited set
 of Compounds selected for a particular application, rather than all possible Compounds that
 could be available to a proprietary Properties System.
 The compIds returned by the GetCompoundList method must be unique within the
 component that implements the ICapeThermoCompounds interface. There is no restriction
 on the length of the strings returned in compIds. However, it should be recognised that a
 PME may restrict the length of Compound identifiers internally. In such a case the PME’s
 CAPE-OPEN socket must maintain a method of mapping the, potentially long, identifiers
 used by a CAPE-OPEN Property package component to the identifiers used within the PME.
 In order to identify the Compounds of a Property Package, the PME, or other client, will use
 the casnos argument rather than the compIds. This is because different PMEs and different
 Property Packages may give different names to the same Compounds and the casnos is
 (almost always) unique. If the casnos is not available (e.g. for petroleum fractions), or not
 unique, the other pieces of information returned by GetCompoundList can be used to
 distinguish the Compounds. It should be noted, however, that for communication with a
 Property Package a client must use the Compound identifiers returned in the compIds
 argument. It is the responsibility of the client to maintain appropriate data structures that
 allow it to reconcile the different Compound identifiers used by different Property Packages
 and any native property system.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetConstPropList">
 <summary>
 Returns the list of supported constant Physical Properties.
 </summary>
 <returns>List of identifiers for all supported constant Physical Properties. The standard constant property identifiers are listed in section 7.5.2.</returns>
 <remarks>GetConstPropList returns identifiers for all the constant Physical Properties that can be
 retrieved by the GetCompoundConstant method. If no properties are supported,
 UNDEFINED should be returned. The CAPE-OPEN standards do not define a minimum list
 of Physical Properties to be made available by a software component that implements the
 ICapeThermoCompounds interface.
 A component that implements the ICapeThermoCompounds interface may return constant
 Physical Property identifiers which do not belong to the list defined in section 7.5.2.
 However, these proprietary identifiers may not be understood by most of the clients of this
 component.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetNumCompounds">
 <summary>
 Returns the number of Compounds supported.
 </summary>
 <returns>Number of Compounds supported.</returns>
 <remarks>The number of Compounds returned by this method must be equal to the number of
 Compound identifiers that are returned by the GetCompoundList method of this interface. It
 must be zero or a positive number.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetPDependentProperty(System.Object,System.Double,System.Object,System.Object@)">
 <summary>
 Returns the values of pressure-dependent Physical Properties for the specified pure Compounds.
 </summary>
 <param name="props">The list of Physical Property identifiers. Valid identifiers for pressure-dependent 
 Physical Properties are listed in section 7.5.4</param>
 <param name="pressure">Pressure (in Pa) at which Physical Properties are evaluated</param>
 <param name="compIds">List of Compound identifiers for which Physical Properties are to be retrieved. 
 Set compIds to UNDEFINED to denote all Compounds in the component that implements the ICapeThermoCompounds interface.</param>
 <param name="propVals">Property values for the Compounds specified.</param>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetPDependentPropList">
 <summary>
 Returns the list of supported pressure-dependent properties.
 </summary>
 <returns>The list of Physical Property identifiers for all supported pressure-dependent properties. The standard identifiers are listed in section 7.5.4</returns>
 <remarks>GetPDependentPropList returns identifiers for all the pressure-dependent properties that can
 be retrieved by the GetPDependentProperty method. If no properties are supported
 UNDEFINED should be returned. The CAPE-OPEN standards do not define a minimum list
 of Physical Properties to be made available by a software component that implements the
 ICapeThermoCompounds interface.
 A component that implements the ICapeThermoCompounds interface may return identifiers
 which do not belong to the list defined in section 7.5.4. However, these proprietary
 identifiers may not be understood by most of the clients of this component.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetTDependentProperty(System.Object,System.Double,System.Object,System.Object@)">
 <summary>
 Returns the values of temperature-dependent Physical Properties for the specified pure Compounds.
 </summary>
 <param name="props">The list of Physical Property identifiers. Valid identifiers for 
 temperature-dependent Physical Properties are listed in section 7.5.3</param>
 <param name="temperature">Temperature (in K) at which properties are evaluated</param>
 <param name="compIds">List of Compound identifiers for which Physical Properties are to be retrieved. 
 Set compIds to UNDEFINED to denote all Compounds in the component that implements the ICapeThermoCompounds interface.</param>
 <param name="propVals">Physical Property values for the Compounds specified.</param>
 <remarks>The GetTDependentPropList method can be used in order to check which Physical
 Properties are available.
 If the number of requested Physical Properties is P and the number of Compounds is C, the
 propvals array will contain C*P values. The first C will be the values for the first requested
 Physical Property followed by C values for the second Physical Property, and so on.
 Properties are returned in a fixed set of units as specified in section 7.5.3.
 If the compIds argument is set to UNDEFINED this is a request to return property values for
 all compounds in the component that implements the ICapeThermoCompounds interface
 with the compound order the same as that returned by the GetCompoundList method. For
 example, if the interface is implemented by a Property Package component the property
 request with compIds set to UNDEFINED means all compounds in the Property Package
 rather than all compounds in the Material Object passed to the Property package.
 If any Physical Property is not available for one or more Compounds, then undefined values
 must be returned for those combinations and an ECapeThrmPropertyNotAvailable exception
 must be raised. If the exception is raised, the client should check all the values returned to
 determine which is undefined.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetTDependentPropList">
 <summary>
 Returns the list of supported temperature-dependent Physical Properties.
 </summary>
 <returns>The list of Physical Property identifiers for all supported temperature-dependent 
 properties. The standard identifiers are listed in section 7.5.3</returns>
 <remarks>GetTDependentPropList returns identifiers for all the temperature-dependent Physical
 Properties that can be retrieved by the GetTDependentProperty method. If no properties are
 supported UNDEFINED should be returned. The CAPE-OPEN standards do not define a
 minimum list of properties to be made available by a software component that implements
 the ICapeThermoCompounds interface.
 A component that implements the ICapeThermoCompounds interface may return identifiers
 which do not belong to the list defined in section 7.5.3. However, these proprietary identifiers
 may not be understood by most of the clients of this component.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetPhaseInfo(System.String,System.String)">
 <summary>
 Returns information on an attribute associated with a Phase for the purpose of understanding 
 what lies behind a Phase label.
 </summary>
 <param name="phaseLabel">A (single) Phase label. This must be one of the values returned by GetPhaseList method.</param>
 <param name="phaseAttribute">One of the Phase attribute identifiers from the table below.</param>
 <returns>The value corresponding to the Phase attribute identifier – see table below.</returns>
 <remarks>GetPhaseInfo is intended to allow a PME, or other client, to identify a Phase with an arbitrary
 label. A PME, or other client, will need to do this to map stream data into a Material
 Object, or when importing a Property Package. If the client cannot identify the Phase, it can
 ask the user to provide a mapping based on the values of these properties.
 The list of supported Phase attributes is defined in the following table:
 
 Phase attribute identifier            Supported values
 
 StateOfAggregation                    One of the following strings:
                                       Vapor
                                       Liquid
                                       Solid
                                       Unknown
 
 KeyCompoundId                         The identifier of the Compound (compId as returned by GetCompoundList) 
                                       that is expected to be present in highest concentration in the Phase. 
                                       May be undefined in which case UNDEFINED should be returned.
 
 ExcludedCompoundId                    The identifier of the Compound (compId as returned by
                                       GetCompoundList) that is expected to be present in low or zero
                                       concentration in the Phase. May not be defined in which case
                                       UNDEFINED should be returned.
 
 DensityDescription                    A description that indicates the density range expected for the Phase.
                                       One of the following strings or UNDEFINED:
                                       Heavy
                                       Light
 
 UserDescription                       A description that helps the user or PME to identify the Phase.
                                       It can be any string or UNDEFINED.
 
 TypeOfSolid                           A description that provides more information about a solid Phase. For
                                       Phases with a “Solid” state of aggregation it may be one of the
                                       following standard strings or UNDEFINED:
                                       PureSolid
                                       SolidSolution
                                       HydrateI
                                       HydrateII
                                       HydrateH
                                       Other values may be returned for solid Phases but these may not be
                                       understood by most clients.
                                       For Phases with any other state of aggregation it must be
                                       UNDEFINED.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetPhaseList1(System.Object@,System.Object@,System.Object@)">
 <summary>
 Returns Phase labels and other important descriptive information for all the Phases supported.
 </summary>
 <param name="phaseLabels">he list of Phase labels for the Phases supported. A Phase label can 
 be any string but each Phase must have a unique label. If, for some reason, no Phases are 
 supported an UNDEFINED value should be returned for the phaseLabels. The number of Phase labels 
 must also be equal to the number of Phases returned by the GetNumPhases method.</param>
 <param name="stateOfAggregation">The physical State of Aggregation associated with each of the 
 Phases. This must be one of the following strings: ”Vapor”, “Liquid”, “Solid” or “Unknown”. Each 
 Phase must have a single State of Aggregation. The value must not be left undefined, but may be 
 set to “Unknown”.</param>
 <param name="keyCompoundId">The key Compound for the Phase. This must be the Compound identifier 
 (as returned by GetCompoundList), or it may be undefined in which case a UNDEFINED value is returned. 
 The key Compound is an indication of the Compound that is expected to be present in high concentration 
 in the Phase, e.g. water for an aqueous liquid phase. Each Phase can have a single key Compound.</param>
 <remarks>The Phase label allows the phase to be uniquely identified in methods of the ICapeThermo-
 Phases interface and other CAPE-OPEN interfaces. The State of Aggregation and key
 Compound provide a way for the PME, or other client, to interpret the meaning of a Phase
 label in terms of the physical characteristics of the Phase.
 All arrays returned by this method must be of the same length, i.e. equal to the number of
 Phase labels.
 To get further information about a Phase, use the GetPhaseInfo method.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.CalcAndGetLnPhi(System.String,System.Double,System.Double,System.Object,System.Int32,System.Object@,System.Object@,System.Object@,System.Object@)">
 <summary>
 This method is used to calculate the natural logarithm of the fugacity coefficients (and
 optionally their derivatives) in a single Phase mixture. The values of temperature, pressure
 and composition are specified in the argument list and the results are also returned through
 the argument list.
 </summary>
 <param name="phaseLabel">Phase label of the Phase for which the properties are to be calculated. 
 The Phase label must be one of the strings returned by the GetPhaseList method on the ICapeThermoPhases interface.</param>
 <param name="temperature">The temperature (K) for the calculation.</param>
 <param name="pressure">The pressure (Pa) for the calculation.</param>
 <param name="moleNumbers">Number of moles of each Compound in the mixture.</param>
 <param name="fFlags">Code indicating whether natural logarithm of the fugacity coefficients and/or derivatives 
 should be calculated (see notes).</param>
 <param name="lnPhi">Natural logarithm of the fugacity coefficients (if requested).</param>
 <param name="lnPhiDT">Derivatives of natural logarithm of the fugacity coefficients w.r.t. temperature (if requested).</param>
 <param name="lnPhiDP">Derivatives of natural logarithm of the fugacity coefficients w.r.t. pressure (if requested).</param>
 <param name="lnPhiDn">Derivatives of natural logarithm of the fugacity coefficients w.r.t. mole numbers (if requested).</param>
 <remarks>This method is provided to allow the natural logarithm of the fugacity coefficient, which is
 the most commonly used thermodynamic property, to be calculated and returned in a highly
 efficient manner.
 The temperature, pressure and composition (mole numbers) for the calculation are specified
 by the arguments and are not obtained from the Material Object by a separate request. Likewise,
 any quantities calculated are returned through the arguments and are not stored in the
 Material Object. The state of the Material Object is not affected by calling this method. It
 should be noted however, that prior to calling CalcAndGetLnPhi a valid Material Object
 must have been defined by calling the SetMaterial method on the
 ICapeThermoMaterialContext interface of the component that implements the
 ICapeThermoPropertyRoutine interface. The compounds in the Material Object must have
 been identified and the number of values supplied in the moleNumbers argument must be
 equal to the number of Compounds in the Material Object.
 The fugacity coefficient information is returned as the natural logarithm of the fugacity
 coefficient. This is because thermodynamic models naturally provide the natural logarithm
 of this quantity and also a wider range of values may be safely returned.
 The quantities actually calculated and returned by this method are controlled by an integer
 code fFlags. The code is formed by summing contributions for the property and each
 derivative required using the enumerated constants eCapeCalculationCode (defined in the
 Thermo version 1.1 IDL) shown in the following table. For example, to calculate log
 fugacity coefficients and their T-derivatives the fFlags argument would be set to
 CAPE_LOG_FUGACITY_COEFFICIENTS + CAPE_T_DERIVATIVE.
 
                                       code                            numerical value
 no calculation                        CAPE_NO_CALCULATION             0
 log fugacity coefficients             CAPE_LOG_FUGACITY_COEFFICIENTS  1
 T-derivative                          CAPE_T_DERIVATIVE               2
 P-derivative                          CAPE_P_DERIVATIVE               4
 mole number derivatives               CAPE_MOLE_NUMBERS_DERIVATIVES   8
 
 If CalcAndGetLnPhi is called with fFlags set to CAPE_NO_CALCULATION no property
 values are returned.
 A typical sequence of operations for this method when implemented by a Property Package
 component would be:
 - Check that the phaseLabel specified is valid.
 - Check that the moleNumbers array contains the number of values expected
 (should be consistent with the last call to the SetMaterial method).
 - Calculate the requested properties/derivatives at the T/P/composition specified in
 the argument list.
 - Store values for the properties/derivatives in the corresponding arguments.
 Note that this calculation can be carried out irrespective of whether the Phase actually exists
 in the Material Object.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.CalcSinglePhaseProp(System.Object,System.String)">
 <summary>
 CalcSinglePhaseProp is used to calculate properties and property derivatives of a mixture in
 a single Phase at the current values of temperature, pressure and composition set in the
 Material Object. CalcSinglePhaseProp does not perform phase Equilibrium Calculations.
 </summary>
 <param name="props">The list of identifiers for the single-phase properties or derivatives to 
 be calculated. See sections 7.5.5 and 7.6 for the standard identifiers.</param>
 <param name="phaseLabel">Phase label of the Phase for which the properties are to be calculated. 
 The Phase label must be one of the strings returned by the GetPhaseList method on the 
 ICapeThermoPhases interface and the phase must be present in the Material Object.</param>
 <remarks>CalcSinglePhaseProp calculates properties, such as enthalpy or viscosity that are defined for
 a single Phase. Physical Properties that depend on more than one Phase, for example surface
 tension or K-values, are handled by CalcTwoPhaseProp method.
 Components that implement this method must get the input specification for the calculation
 (temperature, pressure and composition) from the associated Material Object and set the
 results in the Material Object.
 Thermodynamic and Physical Properties Components, such as a Property Package or Property
 Calculator, must implement the ICapeThermoMaterialContext interface so that an
 ICapeThermoMaterial interface can be passed via the SetMaterial method.
 The component that implements the ICapeThermoPropertyRoutine interface (e.g. a Property
 Package or Property Calculator) must also implement the ICapeThermoPhases interface so
 that it is possible to get a list of supported phases. The phaseLabel passed to this method
 must be one of the phase labels returned by the GetPhaseList method of the
 ICapeThermoPhases interface and it must also be present in the Material Object, ie. one of
 the phase labels returned by the GetPresentPhases method of the ICapeThermoMaterial
 interface. This latter condition will be satisfied if the phase is made present explicitly by
 calling the SetPresentPhases method or if any phase properties have been set by calling the
 SetSinglePhaseProp or SetTwoPhaseProp methods.
 A typical sequence of operations for CalcSinglePhaseProp when implemented by a Property
 Package component would be:
 - Check that the phaseLabel specified is valid.
 - Use the GetTPFraction method (of the Material Object specified in the last call to the
 SetMaterial method) to get the temperature, pressure and composition of the
 specified Phase.
 - Calculate the properties.
 - Store values for the properties of the Phase in the Material Object using the
 SetSinglePhaseProp method of the ICapeThermoMaterial interface.
 CalcSinglePhaseProp will request the input Property values it requires from the Material
 Object through GetSinglePhaseProp calls. If a requested property is not available, the
 exception raised will be ECapeThrmPropertyNotAvailable. If this error occurs then the
 Property Package can return it to the client, or request a different property. Material Object
 implementations must be able to supply property values using the client’s choice of basis by
 implementing conversion from one basis to another.
 Clients should not assume that Phase fractions and Compound fractions in a Material Object
 are normalised. Fraction values may also lie outside the range 0 to 1. If fractions are not
 normalised, or are outside the expected range, it is the responsibility of the Property Package
 to decide how to deal with the situation.
 It is recommended that properties are requested one at a time in order to simplify error
 handling. However, it is recognised that there are cases where the potential efficiency gains
 of requesting several properties simultaneously are more important. One such example
 might be when a property and its derivatives are required.
 If a client uses multiple properties in a call and one of them fails then the whole call should
 be considered to have failed. This implies that no value should be written back to the Material
 Object by the Property Package until it is known that the whole request can be satisfied.
 It is likely that a PME might request values of properties for a Phase at conditions of temperature,
 pressure and composition where the Phase does not exist (according to the
 mathematical/physical models used to represent properties). The exception
 ECapeThrmPropertyNotAvailable may be raised or an extrapolated value may be returned.
 It is responsibility of the implementer to decide how to handle this circumstance.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.CalcTwoPhaseProp(System.Object,System.Object)">
 <summary>
 CalcTwoPhaseProp is used to calculate mixture properties and property derivatives that depend on
 two Phases at the current values of temperature, pressure and composition set in the Material Object.
 It does not perform Equilibrium Calculations.
 </summary>
 <param name="props">The list of identifiers for properties to be calculated. This must be one or more 
 of the supported two-phase properties and derivatives (as given by the GetTwoPhasePropList method). 
 The standard identifiers for two-phase properties are given in section 7.5.6 and 7.6.</param>
 <param name="phaseLabels">Phase labels of the phases for which the properties are to be calculated. 
 The phase labels must be two of the strings returned by the GetPhaseList method on the ICapeThermoPhases 
 interface and the phases must also be present in the Material Object.</param>
 <remarks>CalcTwoPhaseProp calculates the values of properties such as surface tension or K-values.
 Properties that pertain to a single Phase are handled by the CalcSinglePhaseProp method of
 the ICapeThermoPropertyRoutine interface.Components that implement this method must
 get the input specification for the calculation (temperature, pressure and composition) from
 the associated Material Object and set the results in the Material Object.
 Components such as a Property Package or Property Calculator must implement the
 ICapeThermoMaterialContext interface so that an ICapeThermoMaterial interface can be
 passed via the SetMaterial method.
 The component that implements the ICapeThermoPropertyRoutine interface (e.g. a Property
 Package or Property Calculator) must also implement the ICapeThermoPhases interface so
 that it is possible to get a list of supported phases. The phaseLabels passed to this method
 must be in the list of phase labels returned by the GetPhaseList method of the
 ICapeThermoPhases interface and they must also be present in the Material Object, ie. in the
 list of phase labels returned by the GetPresentPhases method of the ICapeThermoMaterial
 interface. This latter condition will be satisfied if the phases are made present explicitly by
 calling the SetPresentPhases method or if any phase properties have been set by calling the
 SetSinglePhaseProp or SetTwoPhaseProp methods.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.CheckSinglePhasePropSpec(System.String,System.String)">
 <summary>
 Checks whether it is possible to calculate a property with the CalcSinglePhaseProp method for a given Phase.
 </summary>
 <param name="property">The identifier of the property to check. To be valid this must be one of the supported 
 single-phase properties or derivatives (as given by the GetSinglePhasePropList method).</param>
 <param name="phaseLabel">The Phase label for the calculation check. This must be one of the labels 
 returned by the GetPhaseList method on the ICapeThermoPhases interface.</param>
 <returns>Set to True if the combination of property and phaseLabel is supported or False if 
 not supported.</returns>
 <remarks>The result of the check should only depend on the capabilities and configuration
 (Compounds and Phases supported) of the component that implements the
 ICapeThermoPropertyRoutine interface (e.g. a Property Package). It should not depend on
 whether a Material Object has been set nor on the state (temperature, pressure, composition
 etc.), or configuration of a Material Object that might be set.
 It is expected that the PME, or other client, will use this method to check whether the properties
 it requires are supported by the Property Package when the package is imported. If any
 essential properties are not available, the import process should be aborted.
 If either the property or the phaseLabel arguments are not recognised by the component that
 implements the ICapeThermoPropertyRoutine interface this method should return False.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.CheckTwoPhasePropSpec(System.String,System.Object)">
 <summary>
 Checks whether it is possible to calculate a property with the CalcTwoPhaseProp method for a given set of Phases.
 </summary>
 <param name="property">The identifier of the property to check. To be valid this must be one of the supported 
 two-phase properties (including derivatives), as given by the GetTwoPhasePropList method.</param>
 <param name="phaseLabels">Phase labels of the Phases for which the properties are to be calculated. The Phase 
 labels must be two of the identifiers returned by the GetPhaseList method on the ICapeThermoPhases interface.</param>
 <returns>Set to True if the combination of property and phaseLabels is supported, or False if not supported.</returns>
 <remarks>The result of the check should only depend on the capabilities and configuration
 (Compounds and Phases supported) of the component that implements the
 ICapeThermoPropertyRoutine interface (e.g. a Property Package). It should not depend on
 whether a Material Object has been set nor on the state (temperature, pressure, composition
 etc.), or configuration of a Material Object that might be set.
 It is expected that the PME, or other client, will use this method to check whether the
 properties it requires are supported by the Property Package when the Property Package is
 imported. If any essential properties are not available, the import process should be aborted.
 If either the property argument or the values in the phaseLabels arguments are not
 recognised by the component that implements the ICapeThermoPropertyRoutine interface
 this method should return False.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetSinglePhasePropList">
 <summary>
 Returns the list of supported non-constant single-phase Physical Properties.
 </summary>
 <returns>List of all supported non-constant single-phase property identifiers. 
 The standard single-phase property identifiers are listed in section 7.5.5.</returns>
 <remarks>A non-constant property depends on the state of the Material Object.
 Single-phase properties, e.g. enthalpy, only depend on the state of one phase.
 GetSinglePhasePropList must return all the single-phase properties that can be calculated by
 CalcSinglePhaseProp. If derivatives can be calculated these must also be returned. The list
 of standard property identifiers in section 7.5.5 also contains properties such as temperature,
 pressure, fraction, phaseFraction, flow and totalFlow that are not usually calculated by the
 CalcSinglePhaseProp method and hence these property identifiers would not be returned by
 GetSinglePhasePropList. These properties would normally be used in calls to the
 Set/GetSinglePhaseProp methods of the ICapeThermoMaterial interface.
 If no single-phase properties are supported this method should return UNDEFINED.
 To get the list of supported two-phase properties, use GetTwoPhasePropList.
 A component that implements this method may return non-constant single-phase property
 identifiers which do not belong to the list defined in section 7.5.5. However, these
 proprietary identifiers may not be understood by most of the clients of this component.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetTwoPhasePropList">
 <summary>
 Returns the list of supported non-constant two-phase properties.
 </summary>
 <returns>List of all supported non-constant two-phase property identifiers. The standard two-phase 
 property identifiers are listed in section 7.5.6.</returns>
 <remarks>A non-constant property depends on the state of the Material Object. Two-phase properties
 are those that depend on more than one co-existing phase, e.g. K-values.
 GetTwoPhasePropList must return all the properties that can be calculated by
 CalcTwoPhaseProp. If derivatives can be calculated, these must also be returned.
 If no two-phase properties are supported this method should return UNDEFINED.
 To check whether a property can be evaluated for a particular set of phase labels use the
 CheckTwoPhasePropSpec method.
 A component that implements this method may return non-constant two-phase property
 identifiers which do not belong to the list defined in section 7.5.6. However, these
 proprietary identifiers may not be understood by most of the clients of this component.
 To get the list of supported single-phase properties, use GetSinglePhasePropList.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetUniversalConstant1(System.String)">
 <summary>
 Retrieves the value of a Universal Constant.
 </summary>
 <param name="constantId">Identifier of Universal Constant. The list of constants supported should be 
 obtained by using the GetUniversalConstantList method.</param>
 <returns>Value of Universal Constant. This could be a numeric or a string value. For numeric values 
 the units of measurement are specified in section 7.5.1.</returns>
 <remarks>Universal Constants (often called fundamental constants) are quantities like the gas constant,
 or the Avogadro constant.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.GetUniversalConstantList">
 <summary>
 Returns the identifiers of the supported Universal Constants.
 </summary>
 <returns>List of identifiers of Universal Constants. The list of standard identifiers is given in section 7.5.1.</returns>
 <remarks>A component may return Universal Constant identifiers that do not belong to the list defined
 in section 7.5.1. However, these proprietary identifiers may not be understood by most of the
 clients of this component.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.CalcEquilibrium1(System.Object,System.Object,System.String)">
 <summary>
 CalcEquilibrium is used to calculate the amounts and compositions of Phases at equilibrium.
 CalcEquilibrium will calculate temperature and/or pressure if these are not among the two
 specifications that are mandatory for each Equilibrium Calculation considered.
 </summary>
 <param name="specification1">First specification for the Equilibrium Calculation. The 
 specification information is used to retrieve the value of the specification from the 
 Material Object. See below for details.</param>
 <param name="specification2">Second specification for the Equilibrium Calculation in 
 the same format as specification1.</param>
 <param name="solutionType">The identifier for the required solution type. The
 standard identifiers are given in the following list:
 Unspecified
 Normal
 Retrograde
 The meaning of these terms is defined below in the notes. Other identifiers may be supported 
 but their interpretation is not part of the CO standard.</param>
 <remarks>The specification1 and specification2 arguments provide the information necessary to
 retrieve the values of two specifications, for example the pressure and temperature, for the
 Equilibrium Calculation. The CheckEquilibriumSpec method can be used to check for
 supported specifications. Each specification variable contains a sequence of strings in the
 order defined in the following table (hence, the specification arguments may have 3 or 4
 items):
 
 item                        meaning
 
 property identifier         The property identifier can be any of the identifiers listed in section 7.5.5 but
                             only certain property specifications will normally be supported by any
                             Equilibrium Routine.
 
 basis                       The basis for the property value. Valid settings for basis are given in section
                             7.4. Use UNDEFINED as a placeholder for a property for which basis does
                             not apply. For most Equilibrium Specifications, the result of the calculation
                             is not dependent on the basis, but, for example, for phase fraction
                             specifications the basis (Mole or Mass) does make a difference.
 
 phase label                 The phase label denotes the Phase to which the specification applies. It must
                             either be one of the labels returned by GetPresentPhases, or the special value
                             “Overall”.
 
 compound identifier         The compound identifier allows for specifications that depend on a particular
                             Compound. This item of the specification array is optional and may be
                             omitted. In case of a specification without compound identifier, the array
                             element may be present and empty, or may be absent.
                             The values corresponding to the specifications in the argument list and the overall
                             composition of the mixture must be set in the associated Material Object before a call to
                             CalcEquilibrium.
 
 Components such as a Property Package or an Equilibrium Calculator must implement the
 ICapeThermoMaterialContext interface, so that an ICapeThermoMaterial interface can be
 passed via the SetMaterial method. It is the responsibility of the implementation of
 CalcEquilibrium to validate the Material Object before attempting a calculation.
 The Phases that will be considered in the Equilibrium Calculation are those that exist in the
 Material Object, i.e. the list of phases specified in a SetPresentPhases call. This provides a
 way for a client to specify whether, for example, a vapour-liquid, liquid-liquid, or vapourliquid-
 liquid calculation is required. CalcEquilibrium must use the GetPresentPhases method
 to retrieve the list of Phases and the associated Phase status flags. The Phase status flags may
 be used by the client to provide information about the Phases, for example whether estimates
 of the equilibrium state are provided. See the description of the GetPresentPhases and
 SetPresentPhases methods of the ICapeThermoMaterial interface for details. When the
 Equilibrium Calculation has been completed successfully, the SetPresentPhases method
 must be used to specify which Phases are present at equilibrium and the Phase status flags
 for the phases should be set to Cape_AtEquilibrium. This must include any Phases that are
 present in zero amount such as the liquid Phase in a dew point calculation.
 Some types of Phase equilibrium specifications may result in more than one solution. A
 common example of this is the case of a dew point calculation. However, CalcEquilibrium
 can provide only one solution through the Material Object. The solutionType argument
 allows the “Normal” or “Retrograde” solution to be explicitly requested. When none of the
 specifications includes a phase fraction, the solutionType argument should be set to
 “Unspecified”.
 
 CalcEquilibrium must set the amounts (phase fractions), compositions, temperature and
 pressure for all Phases present at equilibrium, as well as the temperature and pressure for the
 overall mixture if not set as part of the calculation specifications. It must not set any other
 values – in particular it must not set any values for phases that are not present.
 
 As an example, the following sequence of operations might be performed by
 CalcEquilibrium in the case of an Equilibrium Calculation at fixed pressure and temperature:
 
 - With the ICapeThermoMaterial interface of the supplied Material Object:
 
 -- Use the GetPresentPhases method to find the list of Phases that the Equilibrium
 Calculation should consider.
 
 -- With the ICapeThermoCompounds interface of the Material Object use the
 GetCompoundList method to find which Compounds are present.
 
 -- Use the GetOverallProp method to get the temperature, pressure and composition
 for the overall mixture.
 
 - Perform the Equilibrium Calculation.
 
 -- Use SetPresentPhases to specify the Phases present at equilibrium and set the
 Phase status flags to Cape_AtEquilibrium.
 
 -- Use SetSinglePhaseProp to set pressure, temperature, Phase amount (or Phase
 fraction) and composition for all Phases present.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.CheckEquilibriumSpec(System.Object,System.Object,System.String)">
 <summary>
 Checks whether the Property Package can support a particular type of Equilibrium Calculation.
 </summary>
 <param name="specification1">First specification for the Equilibrium Calculation.</param>
 <param name="specification2">Second specification for the Equilibrium Calculation.</param>
 <param name="solutionType">The required solution type.</param>
 <returns>Set to True if the combination of specifications and solutionType is supported 
 for a particular combination of present phases or False if not supported.</returns>
 <remarks>The meaning of the specification1, specification2 and solutionType arguments is the same as
 for the CalcEquilibrium method. If solutionType, specification1 and specification2
 arguments appear valid but the actual specifications are not supported or not recognised a
 False value should be returned.
 The result of the check should depend primarily on the capabilities and configuration
 (compounds and phases supported) of the component that implements the ICapeThermo-
 EquilibriumRoutine interface (egg. a Property package). A component that supports
 calculation specifications for any combination of supported phases is capable of checking
 the specification without any reference to a Material Object. However, it is possible that
 there may be restrictions on the combinations of phases supported in an equilibrium
 calculation. For example a component may support vapor-liquid and liquid-liquid
 calculations but not vapor-liquid-liquid calculations. In general it is therefore a necessary
 prerequisite that a Material Object has been set (using the SetMaterial method of the
 ICapeThermoMaterialContext interface) and that the SetPresentPhases method of the
 ICapeThermoMaterial interface has been called to specify the combination of phases for the
 equilibrium calculation. The result of the check should not depend on the state (temperature,
 pressure, composition etc.) of the Material Object.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.SetMaterial(System.Object)">
 <summary>
 Allows the client of a component that implements this interface to pass an ICapeThermoMaterial 
 interface to the component, so that it can access the properties of a Material.
 </summary>
 <param name="material">The Material interface.</param>
 <remarks>The SetMaterial method allows a Thermodynamic and Physical Properties component, such
 as a Property Package, to be given the ICapeThermoMaterial interface of a Material Object.
 This interface gives the component access to the description of the Material for which
 Property Calculations or Equilibrium Calculations are required. The component can access
 property values directly using this interface. A client can also use the ICapeThermoMaterial
 interface to query a Material Object for its ICapeThermoCompounds and ICapeThermo-
 Phases interfaces, which provide access to Compound and Phase information, respectively.
 It is envisaged that the SetMaterial method will be used to check that the Material Interface
 supplied is valid and useable. For example, a Property Package may check that there are
 some Compounds in a Material Object and that those Compounds can be identified by the
 Property Package. In addition a Property Package may perform any initialisation that
 depends on the configuration of a Material Object. A Property Calculator component might
 typically use this method to query the Material Object for any required information
 concerning the Compounds.
 Calling the UnsetMaterial method of the ICapeThermoMaterialContext interface has the
 effect of removing the interface set by the SetMaterial method.
 After a call to SetMaterial() has been received, the object implementing the ICapeThermo-
 MaterialContext interface can assume that the number, name and order of compounds for
 that Material Object will remain fixed until the next call to SetMaterial() or UnsetMaterial().</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.UnsetMaterial">
 <summary>
 Removes any previously set Material interface.
 </summary>
 <remarks>The UnsetMaterial method removes any Material interface previously set by a call to the
 SetMaterial method of the ICapeThermoMaterialContext interface. This means that any
 methods of other interfaces that depend on having a valid Material Interface, for example
 methods of the ICapeThermoPropertyRoutine or ICapeThermoEquilibriumRoutine
 interfaces, should behave in the same way as if the SetMaterial method had never been
 called.
 If UnsetMaterial is called before a call to SetMaterial it has no effect and no exception
 should be raised.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.COMaterialtoDWMaterial(System.Object)">
 <summary>
 Converts a COM Material Object into a DWSIM Material Stream.
 </summary>
 <param name="material">The Material Object to convert from</param>
 <returns>A DWSIM Material Stream</returns>
 <remarks>This function is called by SetMaterial when DWSIM Property Packages are working in outside environments (CAPE-OPEN COSEs) like COCO/COFE.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.Edit">
 <summary>
 The PMC displays its user interface and allows the Flowsheet User to interact with it. If no user interface is
 available it returns an error.</summary>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.Initialize">
 <summary>
 Initially, this method was only present in the ICapeUnit interface. Since ICapeUtilities.Initialize is now
 available for any kind of PMC, ICapeUnit. Initialize is deprecated.
 The PME will order the PMC to get initialized through this method. Any initialisation that could fail must be
 placed here. Initialize is guaranteed to be the first method called by the client (except low level methods such
 as class constructors or initialization persistence methods). Initialize has to be called once when the PMC is
 instantiated in a particular flowsheet.
 When the initialization fails, before signalling an error, the PMC must free all the resources that were
 allocated before the failure occurred. When the PME receives this error, it may not use the PMC anymore.
 The method terminate of the current interface must not either be called. Hence, the PME may only release
 the PMC through the middleware native mechanisms.
 </summary>
 <remarks></remarks>
</member>
<member name="P:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.parameters1">
 <summary>
 Returns an ICapeCollection interface.
 </summary>
 <value></value>
 <returns>CapeInterface (ICapeCollection)</returns>
 <remarks>This interface will contain a collection of ICapeParameter interfaces.
 This method allows any client to access all the CO Parameters exposed by a PMC. Initially, this method was
 only present in the ICapeUnit interface. Since ICapeUtilities.GetParameters is now available for any kind of
 PMC, ICapeUnit.GetParameters is deprecated. Consult the “Open Interface Specification: Parameter
 Common Interface” document for more information about parameter. Consult the “Open Interface
 Specification: Collection Common Interface” document for more information about collection.
 If the PMC does not support exposing its parameters, it should raise the ECapeNoImpl error, instead of
 returning a NULL reference or an empty Collection. But if the PMC supports parameters but has for this call
 no parameters, it should return a valid ICapeCollection reference exposing zero parameters.</remarks>
</member>
<member name="P:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.simulationContext">
 <summary>
 Allows the PME to convey the PMC a reference to the former’s simulation context. 
 </summary>
 <value>The reference to the PME’s simulation context class. For the PMC to
 use this class, this reference will have to be converted to each of the
 defined CO Simulation Context interfaces.</value>
 <remarks>The simulation context
 will be PME objects which will expose a given set of CO interfaces. Each of these interfaces will allow the
 PMC to call back the PME in order to benefit from its exposed services (such as creation of material
 templates, diagnostics or measurement unit conversion). If the PMC does not support accessing the
 simulation context, it is recommended to raise the ECapeNoImpl error.
 Initially, this method was only present in the ICapeUnit interface. Since ICapeUtilities.SetSimulationContext
 is now available for any kind of PMC, ICapeUnit. SetSimulationContext is deprecated.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.Terminate">
 <summary>
 Initially, this method was only present in the ICapeUnit interface. Since ICapeUtilities.Terminate is now
 available for any kind of PMC, ICapeUnit.Terminate is deprecated.
 The PME will order the PMC to get destroyed through this method. Any uninitialization that could fail must
 be placed here. ‘Terminate’ is guaranteed to be the last method called by the client (except low level methods
 such as class destructors). ‘Terminate’ may be called at any time, but may be only called once.
 When this method returns an error, the PME should report the user. However, after that the PME is not
 allowed to use the PMC anymore.
 The Unit specification stated that “Terminate may check if the data has been saved and return an error if
 not.” It is suggested not to follow this recommendation, since it’s the PME responsibility to save the state of
 the PMC before terminating it. In the case that a user wants to close a simulation case without saving it, it’s
 better to leave the PME to handle the situation instead of each PMC providing a different implementation.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PropertyPackages.PropertyPackage.SetPhaseEquilibriaCalculationMode(System.String)">
 <summary>
 Sets the Phase Equilibria Calculation mode for this instance. Default behavior is SVLLE. 
 </summary>
 <param name="mode">Recognized values: 'Default', 'VLE', 'VLLE', 'SVLE' and 'SVLLE'.</param>
</member>
<member name="T:DWSIM.Thermodynamics.PropertyPackages.PhaseInfo">
 <summary>
 Class to store Phase Info and mapping for CAPE-OPEN Property Packages
 </summary>
 <remarks>Used only in the context of CAPE-OPEN Objects.</remarks>
</member>
<member name="T:DWSIM.Thermodynamics.PropertyPackages.ComStreamWrapper">
 <summary>
 COM IStream Class Implementation
 </summary>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.BaseClasses.ReactionSet.GetBaseReactant(System.String)">
 <summary>
 Returns the name of the base reactant for a particular reaction.
 </summary>
 <param name="reacId">The reaction identifier</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.BaseClasses.ReactionSet.GetNumberOfReactionCompounds(System.String)">
 <summary>
 Gets the number of compounds occurring in a particular reaction within a Reactions Package.
 </summary>
 <param name="reacID">The reaction identifier</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.BaseClasses.ReactionSet.GetNumberOfReactions">
 <summary>
 Gets the number of reactions contained in the Reactions Package.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.BaseClasses.ReactionSet.GetPhaseCompounds(System.String,System.Int32@,System.Object@)">
 <summary>
 Returns the number and ids of the compounds in the specified phase.
 </summary>
 <param name="reacID">Label of the required phase</param>
 <param name="compNo"></param>
 <param name="compIds">The ids of the compounds present in the specified phase.</param>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.BaseClasses.ReactionSet.GetReactionCompoundIds(System.String,System.Object@,System.Object@,System.Object@)">
 <summary>
 Get the identifiers of the components participating in the specified reaction within the reaction set defined in the
 Reactions Package.
 </summary>
 <param name="reacId">The reaction identifier</param>
 <param name="compIds">List of compound IDs</param>
 <param name="compCharge">The charge for each compound</param>
 <param name="compCASNumber">The CAS Registry numbers for the compounds</param>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.BaseClasses.ReactionSet.GetReactionConcBasis(System.String)">
 <summary>
 Gets the concentration basis required that will be used by a particular reaction in its rate equation.
 Qualifiers defined in the THRM spec can be used here (i.e. “fugacity”, “moleFraction”, etc)
 </summary>
 <param name="reacId">The reaction identifier</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.BaseClasses.ReactionSet.GetReactionParameters(System.String)">
 <summary>
 Returns a collection containing the rate expression parameters for a particular reaction.
 </summary>
 <param name="reacId">Identifier of a particular reaction</param>
 <returns></returns>
 <remarks>GetReactionParameters returns a collection of CAPE-OPEN parameters [6] that characterize the rate expression
 used by the reaction model in a Reaction Package. For a PowerLaw model this collection would contain
 parameters for activation energy, pre-exponential factor and compound exponents for example. It is up to the
 Reactions Package implementor to decide whether a client can update the values of these parameters. If this
 operation is allowed, then the implementor must also provide support for persistence [5] interfaces, so that the
 updated values can be saved and restored. In this case the COSE is also responsible for calling the persistence
 methods.
 Deliberately, the standard does not define the names of the parameters that may appear in such a collection, even
 for well-known reaction models, such as PowerLaw and Langmuir – Hinshelwood – Hougen – Watson
 (LHHW). This is because the formulation of well-known models is not fixed, and because the standard needs to
 support custom models as well as the well-known models.
 This decision is not expected to be restrictive: in most cases the (software) client of a Reactions Package does
 not need to know what model the package implements and what parameters it has. However, the parameters may
 be of interest to an end-user who wants to adjust or estimate the parameter values. In these cases the COSE can
 invoke the Reaction Package’s own GUI, or, if it doesn’t have one, present the parameters in a generic grid. It is
 the Reaction Package implementor’s responsibility to provide documentation for the parameters so that an enduser
 can understand how they are used.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.BaseClasses.ReactionSet.GetReactionPhase(System.String)">
 <summary>
 Gets the phase on which a particular reaction contained in the Reactions Package will take place.
 </summary>
 <param name="reacId">The reaction identifier</param>
 <returns></returns>
 <remarks>The string returned by this method must match one of the phase labels known to the Property Package.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.BaseClasses.ReactionSet.GetReactionRateBasis(System.String)">
 <summary>
 Gets the phase on which the reactions contained in the package will take place. 
 </summary>
 <param name="reacId">The reaction identifier</param>
 <returns></returns>
 <remarks>The reaction rate basis (i.e.
 “Homogeneous” or “Heterogeneous”) Homogeneous reactions will be provided in kgmole/h/m3 and
 heterogeneous will be provided in kgmole/h/kg-cat.
 CapeReactionRateBasis:
 CAPE_HOMOGENEOUS = 0,
 CAPE_HETEROGENEOUS = 1,</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.BaseClasses.ReactionSet.GetReactionsIds">
 <summary>
 Returns the identifiers of all the reactions contained within the Reactions Package.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.BaseClasses.ReactionSet.GetReactionType(System.String)">
 <summary>
 Returns the type of a particular reaction contained in the Reactions Package.
 </summary>
 <param name="reacID">The reaction identifier</param>
 <returns>Returns the type of a particular reaction contained in the Reactions Package. CapeReactionType constants for the
 various reaction:
 CAPE_EQUILIBRIUM = 0,
 CAPE_KINETIC = 1,</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.BaseClasses.ReactionSet.GetStoichiometricCoefficients(System.String)">
 <summary>
 Returns the stoichiometric coefficients of the specified reaction (positive numbers indicate products, negative
 numbers indicate reactants)
 </summary>
 <param name="reacId">The reaction identifier</param>
 <returns></returns>
 <remarks>The array of coefficients returned by this method is parallel to the array returned by calling
 GetReactionCompuoundIds meaning that the first coefficient corresponds to the first compound and so on.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.BaseClasses.ReactionSet.GetReactionProp(System.String,System.String,System.Object,System.String)">
 <summary>
 Gets the value of the specified reaction property within a reactions object.\</summary>
 <param name="property">The Reaction Property to be got.</param>
 <param name="phase">The qualified phase for the Reaction Property.</param>
 <param name="reacIds">The qualified reactions for the Reaction Property. NULL to specify all reactions in the set.</param>
 <param name="basis">Qualifies the basis of the Reaction Property (i.e., mass /mole). Default is mole. Use NULL only 
 as a placeholder for property for which basis does not apply. This qualifier could be extended with values such as 
 activity, fugacity, fractions, molality…This way when an equilibrium constant is requested its basis can be specified</param>
 <returns></returns>
 <remarks>The qualifiers passed in determine the reactions, phase and calculation basis for 
 which the property will be got. The order of the array is the same as in the passed in reacIds 
 array (i.e. property value for reaction reacIds[1] will be stored in property[1])</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.BaseClasses.ReactionSet.SetReactionProp(System.String,System.String,System.Object,System.String,System.Object)">
 <summary>
 Sets the values of the specified reaction property within a reactions object. The qualifiers passed in determine the
 reactions, phase and calculation basis for which the property will be got
 </summary>
 <param name="property">The Reaction Property to be got.</param>
 <param name="phase">The qualified phase for the Reaction Property.</param>
 <param name="reacIds">The qualified reactions for the Reaction Property. NULL to specify all reactions in the set.</param>
 <param name="basis">Qualifies the basis of the Reaction Property (i.e., mass /mole).
 Default is mole. Use NULL only as a placeholder for property
 for which basis does not apply.
 This qualifier could be extended with values such as activity,
 fugacity, fractions, molality…This way when an equilibrium
 constant is requested its basis can be specified</param>
 <param name="propVals">The values of the requested reaction property. The order of the
 array is the same as in the passed in reacIds array (i.e. property
 value for reaction reacIds[1] will be stored in property[1])</param>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.BaseClasses.ReactionSet.CalcReactionProp(System.Object,System.String,System.Object,System.String)">
 <summary>
 The Reactions Package is passed a list of reaction properties to be calculated.
 </summary>
 <param name="props">The Reaction Properties to be calculated.</param>
 <param name="phase">The qualified phase for the results.</param>
 <param name="reacIds">The qualified reactions for the results. NULL to specify all 
 reactions in the set.</param>
 <param name="basis">Qualifies the basis of the result (i.e., mass /mole). Default is
 mole. Use NULL only as a placeholder for properties for which
 basis does not apply.</param>
 <remarks>The Reactions Package is passed a list of reaction properties to be calculated, the reaction IDS for which the
 properties are required, and the calculation basis for the reaction properties (i.e. mole or mass). A material object
 containing the thermodynamic state variables that need to be used for calculating the reaction properties (e.g. T,
 P and compositions) is passed separately via a call to the setMaterial method of the Reaction Package’s
 ICapeThermoContext interface.
 The results of the calculation will be written to the reaction object passed to the Reactions Package via either the
 ICapeKineticReactionContext interface for a kinetic reaction package, or the ICapeElectrolyteReactionContext
 interface for an Electrolyte Property Package.</remarks>
</member>
<member name="T:DWSIM.Thermodynamics.Databases.UserIPDB">
 <summary>
 Interaction Parameter user database class
 </summary>
 <remarks></remarks>
</member>
<member name="F:DWSIM.Thermodynamics.IPOPTLoader.DLL1Name">
 <summary>
 DLL Name
 </summary>
</member>
<member name="M:DWSIM.Thermodynamics.IPOPTLoader.Load">
 <summary>
 Preload the DLL
 </summary>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.Initialize">
 <summary>
 Initializes the calculator and loads the compound databases into memory.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.Initialize(System.String[])">
 <summary>
 Initializes the calculator and loads the compound databases into memory, including the specified user databases.
 </summary>
 <param name="userdbs">A string array containing the full path of DWSIM-generated user databases to load.</param>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.EnableParallelProcessing">
 <summary>
 Enables CPU parallel processing for some tasks.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.DisableParallelProcessing">
 <summary>
 Disables CPU parallel processing.
 </summary>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.SetDebugLevel(System.Int32)">
 <summary>
 Sets the debug level, which controls the amount of information which is written to the screen.
 </summary>
 <param name="level">Debug level: 0 = none, 1 = low, 2 = medium, 3 = high</param>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.EnableSIMDExtensions">
 <summary>
 Activates CPU-accelerated SIMD vector operations.
 </summary>
 <remarks>This uses the routines implemented in the Yeppp! (http://www.yeppp.info) library, which must be in the same directory as DTL's.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.DisableSIMDExtensions">
 <summary>
 Deactivates CPU-accelerated SIMD vector operations.
 </summary>
 <remarks>This uses the routines implemented in the Yeppp! (http://www.yeppp.info) library, which must be in the same directory as DTL's.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.GetCompoundConstProp(System.String,System.String)">
 <summary>
 Returns a single constant property value for a compound.
 </summary>
 <param name="compound">Compound name.</param>
 <param name="prop">Property identifier.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.GetCompoundTDepProp(System.String,System.String,System.Double)">
 <summary>
 Returns a single temperature-dependent property value for a compound.
 </summary>
 <param name="compound">Compound name.</param>
 <param name="prop">Property identifier.</param>
 <param name="temperature">Temperature in K.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.GetCompoundPDepProp(System.String,System.String,System.Double)">
 <summary>
 Returns a single pressure-dependent property value for a compound.
 </summary>
 <param name="compound">Compound name.</param>
 <param name="prop">Property identifier.</param>
 <param name="pressure">Pressure in Pa.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.GetCompoundConstPropList">
 <summary>
 Returns a list of the available single compound constant properties.
 </summary>
 <returns>A list of the available single compound properties</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.GetCompoundTDepPropList">
 <summary>
 Returns a list of the available single compound temperature-dependent properties.
 </summary>
 <returns>A list of the available single compound properties</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.GetCompoundPDepPropList">
 <summary>
 Returns a list of the available single compound pressure-dependent properties.
 </summary>
 <returns>A list of the available single compound properties</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.CalcProp(System.String,System.String,System.String,System.String,System.String[],System.Double,System.Double,System.Double[],System.Object,System.Object,System.Object,System.Object)">
 <summary>
 Calculates properties using the selected Property Package.
 </summary>
 <param name="proppack">The name of the Property Package to use.</param>
 <param name="prop">The property to calculate.</param>
 <param name="basis">The returning basis of the properties: Mole, Mass or UNDEFINED.</param>
 <param name="phaselabel">The name of the phase to calculate properties from.</param>
 <param name="compounds">The list of compounds to include.</param>
 <param name="temperature">Temperature in K.</param>
 <param name="pressure">Pressure in Pa.</param>
 <param name="molefractions">*Normalized* mole fractions of the compounds in the mixture.</param>
 <param name="ip1">Interaction Parameters Set #1.</param>
 <param name="ip2">Interaction Parameters Set #2.</param>
 <param name="ip3">Interaction Parameters Set #3.</param>
 <param name="ip4">Interaction Parameters Set #4.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.CalcProp(DWSIM.Thermodynamics.PropertyPackages.PropertyPackage,System.String,System.String,System.String,System.String[],System.Double,System.Double,System.Double[],System.Object,System.Object,System.Object,System.Object)">
 <summary>
 Calculates properties using the selected Property Package.
 </summary>
 <param name="proppack">The Property Package instance to use.</param>
 <param name="prop">The property to calculate.</param>
 <param name="basis">The returning basis of the properties: Mole, Mass or UNDEFINED.</param>
 <param name="phaselabel">The name of the phase to calculate properties from.</param>
 <param name="compounds">The list of compounds to include.</param>
 <param name="temperature">Temperature in K.</param>
 <param name="pressure">Pressure in Pa.</param>
 <param name="molefractions">*Normalized* mole fractions of the compounds in the mixture.</param>
 <param name="ip1">Interaction Parameters Set #1.</param>
 <param name="ip2">Interaction Parameters Set #2.</param>
 <param name="ip3">Interaction Parameters Set #3.</param>
 <param name="ip4">Interaction Parameters Set #4.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.CalcTwoPhaseProp(System.String,System.String,System.String,System.String,System.String,System.String[],System.Double,System.Double,System.Double[],System.Double[],System.Object,System.Object,System.Object,System.Object)">
 <summary>
 Calculates two phase properties (K-values, Ln(K-values) or Surface Tension) using the selected Property Package.
 </summary>
 <param name="proppack">The name of the Property Package to use.</param>
 <param name="prop">The property to calculate.</param>
 <param name="basis">The returning basis of the properties: Mole, Mass or UNDEFINED.</param>
 <param name="phaselabel1">The name of the first phase.</param>
 <param name="phaselabel2">The name of the second phase.</param>
 <param name="compounds">The list of compounds to include.</param>
 <param name="temperature">Temperature in K.</param>
 <param name="pressure">Pressure in Pa.</param>
 <param name="molefractions1">*Normalized* mole fractions of the compounds in the first phase.</param>
 <param name="molefractions2">*Normalized* mole fractions of the compounds in the second phase.</param>
 <param name="ip1">Interaction Parameters Set #1.</param>
 <param name="ip2">Interaction Parameters Set #2.</param>
 <param name="ip3">Interaction Parameters Set #3.</param>
 <param name="ip4">Interaction Parameters Set #4.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.CalcTwoPhaseProp(DWSIM.Thermodynamics.PropertyPackages.PropertyPackage,System.String,System.String,System.String,System.String,System.String[],System.Double,System.Double,System.Double[],System.Double[],System.Object,System.Object,System.Object,System.Object)">
 <summary>
 Calculates two phase properties (K-values, Ln(K-values) or Surface Tension) using the selected Property Package.
 </summary>
 <param name="proppack">The Property Package instance to use.</param>
 <param name="prop">The property to calculate.</param>
 <param name="basis">The returning basis of the properties: Mole, Mass or UNDEFINED.</param>
 <param name="phaselabel1">The name of the first phase.</param>
 <param name="phaselabel2">The name of the second phase.</param>
 <param name="compounds">The list of compounds to include.</param>
 <param name="temperature">Temperature in K.</param>
 <param name="pressure">Pressure in Pa.</param>
 <param name="molefractions1">*Normalized* mole fractions of the compounds in the first phase.</param>
 <param name="molefractions2">*Normalized* mole fractions of the compounds in the second phase.</param>
 <param name="ip1">Interaction Parameters Set #1.</param>
 <param name="ip2">Interaction Parameters Set #2.</param>
 <param name="ip3">Interaction Parameters Set #3.</param>
 <param name="ip4">Interaction Parameters Set #4.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.GetPropPackList">
 <summary>
 Returns a list of the available Property Packages.
 </summary>
 <returns>A list of the available Property Packages</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.GetPropPackInstance(System.String)">
 <summary>
 Returns a Property Package instance that can be reused on multiple function calls.
 </summary>
 <returns>A Property Package instance.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.GetPropList">
 <summary>
 Returns a list of the available single-phase properties.
 </summary>
 <returns>A list of the available single-phase properties</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.GetTwoPhasePropList">
 <summary>
 Returns a list of the available two-phase properties.
 </summary>
 <returns>A list of the available two-phase properties</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.GetPhaseList">
 <summary>
 Returns a list of the available phases.
 </summary>
 <returns>A list of the available phases</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.GetCompoundList">
 <summary>
 Returns a list of the available compounds.
 </summary>
 <returns>A list of the available compounds</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.PTFlash(System.String,System.Int32,System.Double,System.Double,System.String[],System.Double[],System.Object,System.Object,System.Object,System.Object)">
 <summary>
 Calculates a PT Flash using the selected Property Package.
 </summary>
 <param name="proppack">The name of the Property Package to use.</param>
 <param name="flashalg">[DEPRECATED] Flash Algorithm (2 = Global Def., 0 = NL VLE, 1 = IO VLE, 3 = IO VLLE, 4 = Gibbs VLE, 5 = Gibbs VLLE, 6 = NL VLLE, 7 = NL SLE, 8 = NL Immisc., 9 = Simple LLE, 10 = Nested Loops SVLLE, 11 = Gibbs Minimization SVLLE)</param>
 <param name="P">Pressure in Pa.</param>
 <param name="T">Temperature in K.</param>
 <param name="compounds">Compound names.</param>
 <param name="molefractions">Compound mole fractions.</param>
 <param name="ip1">Interaction Parameters Set #1.</param>
 <param name="ip2">Interaction Parameters Set #2.</param>
 <param name="ip3">Interaction Parameters Set #3.</param>
 <param name="ip4">Interaction Parameters Set #4.</param>
 <returns>A matrix containing phase fractions and compound distribution in mole fractions.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.PHFlash(System.String,System.Int32,System.Double,System.Double,System.String[],System.Double[],System.Object,System.Object,System.Object,System.Object,System.Double)">
 <summary>
 Calculates a PH Flash using the selected Property Package.
 </summary>
 <param name="proppack">The name of the Property Package to use.</param>
 <param name="flashalg">[DEPRECATED] Flash Algorithm (2 = Global Def., 0 = NL VLE, 1 = IO VLE, 3 = IO VLLE, 4 = Gibbs VLE, 5 = Gibbs VLLE, 6 = NL VLLE, 7 = NL SLE, 8 = NL Immisc., 9 = Simple LLE, 10 = Nested Loops SVLLE, 11 = Gibbs Minimization SVLLE)</param>
 <param name="P">Pressure in Pa.</param>
 <param name="H">Mixture Mass Enthalpy in kJ/kg.</param>
 <param name="compounds">Compound names.</param>
 <param name="molefractions">Compound mole fractions.</param>
 <param name="ip1">Interaction Parameters Set #1.</param>
 <param name="ip2">Interaction Parameters Set #2.</param>
 <param name="ip3">Interaction Parameters Set #3.</param>
 <param name="ip4">Interaction Parameters Set #4.</param>
 <param name="InitialTemperatureEstimate">Initial estimate for the temperature, in K.</param>
 <returns>A matrix containing phase fractions and compound distribution in mole fractions.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.PSFlash(System.String,System.Int32,System.Double,System.Double,System.String[],System.Double[],System.Object,System.Object,System.Object,System.Object,System.Double)">
 <summary>
 Calculates a PH Flash using the selected Property Package.
 </summary>
 <param name="proppack">The name of the Property Package to use.</param>
 <param name="flashalg">[DEPRECATED] Flash Algorithm (2 = Global Def., 0 = NL VLE, 1 = IO VLE, 3 = IO VLLE, 4 = Gibbs VLE, 5 = Gibbs VLLE, 6 = NL VLLE, 7 = NL SLE, 8 = NL Immisc., 9 = Simple LLE, 10 = Nested Loops SVLLE, 11 = Gibbs Minimization SVLLE)</param>
 <param name="P">Pressure in Pa.</param>
 <param name="S">Mixture Mass Entropy in kJ/[kg.K].</param>
 <param name="compounds">Compound names.</param>
 <param name="molefractions">Compound mole fractions.</param>
 <param name="ip1">Interaction Parameters Set #1.</param>
 <param name="ip2">Interaction Parameters Set #2.</param>
 <param name="ip3">Interaction Parameters Set #3.</param>
 <param name="ip4">Interaction Parameters Set #4.</param>
 <param name="InitialTemperatureEstimate">Initial estimate for the temperature, in K.</param>
 <returns>A matrix containing phase fractions and compound distribution in mole fractions.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.PVFFlash(System.String,System.Int32,System.Double,System.Double,System.Object[],System.Double[],System.Object,System.Object,System.Object,System.Object,System.Double)">
 <summary>
 Calculates a PVF Flash using the selected Property Package.
 </summary>
 <param name="proppack">The name of the Property Package to use.</param>
 <param name="flashalg">[DEPRECATED] Flash Algorithm (2 = Global Def., 0 = NL VLE, 1 = IO VLE, 3 = IO VLLE, 4 = Gibbs VLE, 5 = Gibbs VLLE, 6 = NL VLLE, 7 = NL SLE, 8 = NL Immisc., 9 = Simple LLE, 10 = Nested Loops SVLLE, 11 = Gibbs Minimization SVLLE)</param>
 <param name="P">Pressure in Pa.</param>
 <param name="VF">Mixture Mole Vapor Fraction.</param>
 <param name="compounds">Compound names.</param>
 <param name="molefractions">Compound mole fractions.</param>
 <param name="ip1">Interaction Parameters Set #1.</param>
 <param name="ip2">Interaction Parameters Set #2.</param>
 <param name="ip3">Interaction Parameters Set #3.</param>
 <param name="ip4">Interaction Parameters Set #4.</param>
 <param name="InitialTemperatureEstimate">Initial estimate for the temperature, in K.</param>
 <returns>A matrix containing phase fractions and compound distribution in mole fractions.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.TVFFlash(System.String,System.Int32,System.Double,System.Double,System.String[],System.Double[],System.Object,System.Object,System.Object,System.Object,System.Double)">
 <summary>
 Calculates a TVF Flash using the selected Property Package.
 </summary>
 <param name="proppack">The name of the Property Package to use.</param>
 <param name="flashalg">[DEPRECATED] Flash Algorithm (2 = Global Def., 0 = NL VLE, 1 = IO VLE, 3 = IO VLLE, 4 = Gibbs VLE, 5 = Gibbs VLLE, 6 = NL VLLE, 7 = NL SLE, 8 = NL Immisc., 9 = Simple LLE, 10 = Nested Loops SVLLE, 11 = Gibbs Minimization SVLLE)</param>
 <param name="T">Temperature in K.</param>
 <param name="VF">Mixture Mole Vapor Fraction.</param>
 <param name="compounds">Compound names.</param>
 <param name="molefractions">Compound mole fractions.</param>
 <param name="ip1">Interaction Parameters Set #1.</param>
 <param name="ip2">Interaction Parameters Set #2.</param>
 <param name="ip3">Interaction Parameters Set #3.</param>
 <param name="ip4">Interaction Parameters Set #4.</param>
<param name="InitialPressureEstimate">Initial estimate for the pressure, in Pa.</param>
 <returns>A matrix containing phase fractions and compound distribution in mole fractions.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.PTFlash(DWSIM.Thermodynamics.PropertyPackages.PropertyPackage,System.Int32,System.Double,System.Double,System.String[],System.Double[],System.Object,System.Object,System.Object,System.Object)">
 <summary>
 Calculates a PT Flash using the referenced Property Package.
 </summary>
 <param name="proppack">A reference to the Property Package object to use.</param>
 <param name="flashalg">[DEPRECATED] Flash Algorithm (2 = Global Def., 0 = NL VLE, 1 = IO VLE, 3 = IO VLLE, 4 = Gibbs VLE, 5 = Gibbs VLLE, 6 = NL VLLE, 7 = NL SLE, 8 = NL Immisc., 9 = Simple LLE, 10 = Nested Loops SVLLE, 11 = Gibbs Minimization SVLLE)</param>
 <param name="T">Temperature in K.</param>
 <param name="P">Pressure in Pa.</param>
 <param name="compounds">Compound names.</param>
 <param name="molefractions">Compound mole fractions.</param>
 <param name="ip1">Interaction Parameters Set #1.</param>
 <param name="ip2">Interaction Parameters Set #2.</param>
 <param name="ip3">Interaction Parameters Set #3.</param>
 <param name="ip4">Interaction Parameters Set #4.</param>
 <returns>A matrix containing phase fractions and compound distribution in mole fractions.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.PHFlash(DWSIM.Thermodynamics.PropertyPackages.PropertyPackage,System.Int32,System.Double,System.Double,System.String[],System.Double[],System.Object,System.Object,System.Object,System.Object,System.Double)">
 <summary>
 Calculates a PH Flash using the referenced Property Package.
 </summary>
 <param name="proppack">A reference to the Property Package object to use.</param>
 <param name="flashalg">[DEPRECATED] Flash Algorithm (2 = Global Def., 0 = NL VLE, 1 = IO VLE, 3 = IO VLLE, 4 = Gibbs VLE, 5 = Gibbs VLLE, 6 = NL VLLE, 7 = NL SLE, 8 = NL Immisc., 9 = Simple LLE, 10 = Nested Loops SVLLE, 11 = Gibbs Minimization SVLLE)</param>
 <param name="P">Pressure in Pa.</param>
 <param name="H">Mixture Mass Enthalpy in kJ/kg.</param>
 <param name="compounds">Compound names.</param>
 <param name="molefractions">Compound mole fractions.</param>
 <param name="ip1">Interaction Parameters Set #1.</param>
 <param name="ip2">Interaction Parameters Set #2.</param>
 <param name="ip3">Interaction Parameters Set #3.</param>
 <param name="ip4">Interaction Parameters Set #4.</param>
 <param name="InitialTemperatureEstimate">Initial estimate for the temperature, in K.</param>
 <returns>A matrix containing phase fractions and compound distribution in mole fractions.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.PSFlash(DWSIM.Thermodynamics.PropertyPackages.PropertyPackage,System.Int32,System.Double,System.Double,System.String[],System.Double[],System.Object,System.Object,System.Object,System.Object,System.Double)">
 <summary>
 Calculates a PS Flash using the referenced Property Package.
 </summary>
 <param name="proppack">A reference to the Property Package object to use.</param>
 <param name="flashalg">[DEPRECATED] Flash Algorithm (2 = Global Def., 0 = NL VLE, 1 = IO VLE, 3 = IO VLLE, 4 = Gibbs VLE, 5 = Gibbs VLLE, 6 = NL VLLE, 7 = NL SLE, 8 = NL Immisc., 9 = Simple LLE, 10 = Nested Loops SVLLE, 11 = Gibbs Minimization SVLLE)</param>
 <param name="P">Pressure in Pa.</param>
 <param name="S">Mixture Mass Entropyin kJ/[kg.K].</param>
 <param name="compounds">Compound names.</param>
 <param name="molefractions">Compound mole fractions.</param>
 <param name="ip1">Interaction Parameters Set #1.</param>
 <param name="ip2">Interaction Parameters Set #2.</param>
 <param name="ip3">Interaction Parameters Set #3.</param>
 <param name="ip4">Interaction Parameters Set #4.</param>
 <param name="InitialTemperatureEstimate">Initial estimate for the temperature, in K.</param>
 <returns>A matrix containing phase fractions and compound distribution in mole fractions.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.PVFFlash(DWSIM.Thermodynamics.PropertyPackages.PropertyPackage,System.Int32,System.Double,System.Double,System.String[],System.Double[],System.Object,System.Object,System.Object,System.Object,System.Double)">
 <summary>
 Calculates a PVF Flash using the referenced Property Package.
 </summary>
 <param name="proppack">A reference to the Property Package object to use.</param>
 <param name="flashalg">[DEPRECATED] Flash Algorithm (2 = Global Def., 0 = NL VLE, 1 = IO VLE, 3 = IO VLLE, 4 = Gibbs VLE, 5 = Gibbs VLLE, 6 = NL VLLE, 7 = NL SLE, 8 = NL Immisc., 9 = Simple LLE, 10 = Nested Loops SVLLE, 11 = Gibbs Minimization SVLLE)</param>
 <param name="P">Pressure in Pa.</param>
 <param name="VF">Mixture Mole Vapor Fraction.</param>
 <param name="compounds">Compound names.</param>
 <param name="molefractions">Compound mole fractions.</param>
 <param name="ip1">Interaction Parameters Set #1.</param>
 <param name="ip2">Interaction Parameters Set #2.</param>
 <param name="ip3">Interaction Parameters Set #3.</param>
 <param name="ip4">Interaction Parameters Set #4.</param>
 <param name="InitialTemperatureEstimate">Initial estimate for the temperature, in K.</param>
 <returns>A matrix containing phase fractions and compound distribution in mole fractions.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.TVFFlash(DWSIM.Thermodynamics.PropertyPackages.PropertyPackage,System.Int32,System.Double,System.Double,System.String[],System.Double[],System.Object,System.Object,System.Object,System.Object,System.Double)">
 <summary>
 Calculates a TVF Flash using the referenced Property Package.
 </summary>
 <param name="proppack">A reference to the Property Package object to use.</param>
 <param name="flashalg">[DEPRECATED] Flash Algorithm (2 = Global Def., 0 = NL VLE, 1 = IO VLE, 3 = IO VLLE, 4 = Gibbs VLE, 5 = Gibbs VLLE, 6 = NL VLLE, 7 = NL SLE, 8 = NL Immisc., 9 = Simple LLE, 10 = Nested Loops SVLLE, 11 = Gibbs Minimization SVLLE)</param>
 <param name="T">Temperature in K.</param>
 <param name="VF">Mixture Mole Vapor Fraction.</param>
 <param name="compounds">Compound names.</param>
 <param name="molefractions">Compound mole fractions.</param>
 <param name="ip1">Interaction Parameters Set #1.</param>
 <param name="ip2">Interaction Parameters Set #2.</param>
 <param name="ip3">Interaction Parameters Set #3.</param>
 <param name="ip4">Interaction Parameters Set #4.</param>
<param name="InitialPressureEstimate">Initial estimate for the pressure, in Pa.</param>
 <returns>A matrix containing phase fractions and compound distribution in mole fractions.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.GetModelList">
 <summary>
 Returns a list of the thermodynamic models.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.GetInteractionParameterSet(System.String,System.String,System.String)">
 <summary>
 "Returns the interaction parameters stored in DWSIM's database for a given binary/model combination.
 </summary>
 <param name="Model">Thermodynamic Model (use 'GetModelList' to get a list of available models).</param>
 <param name="Compound1">The name of the first compound.</param>
 <param name="Compound2">The name of the second compound.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.CalcEquilibrium(DWSIM.Thermodynamics.CalculatorInterface.Calculator.FlashCalculationType,System.Int32,System.Double,System.Double,DWSIM.Thermodynamics.PropertyPackages.PropertyPackage,System.String[],System.Double[],System.Double[],System.Double,System.Object,System.Object,System.Object,System.Object)">
 <summary>
 Calculates Phase Equilibria for a given mixture at specified conditions.
 </summary>
 <param name="flashtype">The type of the flash algorithm to calculate</param>
 <param name="flashalg">[DEPRECATED] The flash algorithm to use (set to -1 to use the current instance)</param>
 <param name="val1">Value of the first flash state specification (P in Pa, T in K, H in kJ/kg, S in kJ/[kg.K], VAP/SF in mole fraction from 0 to 1)</param>
 <param name="val2">Value of the second flash state specification (P in Pa, T in K, H in kJ/kg, S in kJ/[kg.K], VAP/SF in mole fraction from 0 to 1)</param>
 <param name="pp">Property Package instance</param>
 <param name="compounds">Compound names</param>
 <param name="molefractions">Vector of mixture mole fractions</param>
 <param name="initialKval">Vector containing initial estimates for the K-values (set to 'Nothing' (VB) or 'null' (C#) if none).</param>
 <param name="initialestimate">Initial estimate for Temperature (K) or Pressure (Pa), whichever will be calculated</param>
 <param name="ip1">Interaction Parameters Set #1.</param>
 <param name="ip2">Interaction Parameters Set #2.</param>
 <param name="ip3">Interaction Parameters Set #3.</param>
 <param name="ip4">Interaction Parameters Set #4.</param>
 <returns>A FlashCalculationResult instance with the results of the calculations</returns>
 <remarks>This function must be used instead of the older type-specific flash functions.
 Check if the 'ResultException' property of the result object is nothing/null before proceeding.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.SetupPropertyPackage(DWSIM.Thermodynamics.PropertyPackages.PropertyPackage,System.String[],System.Double[])">
 <summary>
 Setups a Material Stream with the specified compounds and associated it with the property package.
 </summary>
 <param name="proppack">Property Package instance</param>
 <param name="compounds">Compounds to add</param>
 <param name="molefractions">Compound mole fractions</param>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.CreateMaterialStream(System.String[],System.Double[])">
 <summary>
 Setups a Material Stream with the specified compounds.
 </summary>
 <param name="compounds">Compounds to add</param>
 <param name="molefractions">Compound mole fractions</param>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.CalculatorInterface.Calculator.Link(DWSIM.Thermodynamics.Streams.MaterialStream,DWSIM.Thermodynamics.PropertyPackages.PropertyPackage)">
 <summary>
 Links/Associates a Material Stream with a Property Package and vice-versa.
 </summary>
 <param name="stream">Material Stream instance</param>
 <param name="pp">Property Package instance</param>
</member>
<member name="P:DWSIM.Thermodynamics.Streams.MaterialStream.OverrideSingleCompoundFlashBehavior">
 <summary>
 Use this property to disable automatic PH-Flash for single-compound streams connected to unit operations. Default is 'False'.
 </summary>
 <returns></returns>
</member>
<member name="P:DWSIM.Thermodynamics.Streams.MaterialStream.AtEquilibrium">
 <summary>
 Gets or sets if this stream is at thermodynamic equilbirium or not.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DWSIM.Thermodynamics.Streams.MaterialStream.PropertyPackage">
 <summary>
 Gets or sets the associated Property Package for this stream.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DWSIM.Thermodynamics.Streams.MaterialStream.Phases">
 <summary>
 Gets the collection of phases in this stream.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.Calculate(System.Boolean,System.Boolean)">
 <summary>
 Calculates equilibrium and/or properties for this stream.
 </summary>
 <param name="equilibrium"></param>
 <param name="properties"></param>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.Assign(DWSIM.Interfaces.IMaterialStream)">
 <summary>
 Copies basic properties from another stream.
 </summary>
 <param name="ASource">Stream to be used as the source</param>
 <remarks>Properties copied: phase temperature, pressure, enthalpy and mole/mass flows.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.AssignProps(DWSIM.Interfaces.IMaterialStream)">
 <summary>
 Copies phase properties from another stream.
 </summary>
 <param name="ASource">Source stream</param>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.Clear">
 <summary>
 Clears the basic phase properties of this stream.
 </summary>
 <remarks>Properties cleared: phase temperature, pressure, enthalpy and mole/mass flows/fractions.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.ClearCalculatedProps">
 <summary>
 Clear all calculated props on this stream.
 </summary>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetOverallComposition(System.Array)">
 <summary>
 Sets the overall molar composition of the mixture.
 </summary>
 <param name="Vx"></param>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetPhaseComposition(System.Array,DWSIM.Thermodynamics.PropertyPackages.Phase)">
 <summary>
 Sets the molar composition of a phase.
 </summary>
 <param name="Vx">Molar composition array</param>
 <param name="phase">Phase to set composition of</param>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetPhaseComposition(System.Int32)">
 <summary>
 Returns the molar composition of a phase.
 </summary>
 <param name="phs">Phase code (0 = mixture, 1 = overall liquid, 2 = vapor, 3 = liquid1, 4 = liquid2, 7 = solid</param>
 <returns></returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetOverallComposition">
 <summary>
 Returns an array with the overall molar composition.
 </summary>
 <returns>Array with mole fractions.</returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.AvailableProps">
 <summary>
 Gets a list of properties that have been calculated.
 </summary>
 <returns>Properties for which results are available.</returns>
 <remarks>Not implemented in DWSIM.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.CalcEquilibrium(System.String,System.Object)">
 <summary>
 This method is responsible for calculating a flash or delegating flash calculations to the associated Property Package or Equilibrium Server.
 </summary>
 <param name="flashType">Flash calculation type.</param>
 <param name="props">Properties to be calculated at equilibrium. UNDEFINED for no properties. If a list, then the 
 property values should be set for each phase present at equilibrium (not including the overall phase).</param>
 <remarks>The CalcEquilibrium method must set on the Material Object the amounts (phaseFraction) and compositions
 (fraction) for all phases present at equilibrium, as well as the temperature and pressure for the overall
 mixture, if not set as part of the calculation specifications. The CalcEquilibrium method must not set on the
 Material Object any other value - in particular it must not set any values for phases that do not exist. See
 5.2.1 for more information.
 The available list of flashes is given in section 5.6.1.
 It is advised not to combine a flash calculation with a property calculation. Although by the returned error
 one cannot see which has failed, plus the additional arguments to CalcProp (such as calculation type) cannot
 be specified. Advice is to perform a CalcEquilibrium, get the phaseIDs and perform a CalcProp on the
 existing phases.
 The Material Object may or may not delegate this call to a Property Package.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.CalcProp(System.Object,System.Object,System.String)">
 <summary>
 This method is responsible for doing all property calculations or delegating these calculations to the
 associated Property Package.
 </summary>
 <param name="props">The List of Properties to be calculated.</param>
 <param name="phases">List of phases for which the Properties are to be calculated.</param>
 <param name="calcType">Type of calculation: Mixture Property or Pure Compound Property. For
 partial property, such as fugacity coefficients of compounds in a
 mixture, use “Mixture” CalcType. For pure compound fugacity
 coefficients, use “Pure” CalcType.</param>
 <remarks>"Pure" calctype is not implemented in DWSIM.</remarks>
</member>
<member name="P:DWSIM.Thermodynamics.Streams.MaterialStream.ComponentIds">
 <summary>
 Returns the list of compound IDs of a given Material Object.
 </summary>
 <value></value>
 <returns>Compound IDs</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.CreateMaterialObject">
 <summary>
 Create a Material Object from the parent Material Template of the current Material Object.
 </summary>
 <returns>The created and initialized Material Object.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.Duplicate">
 <summary>
 Creates a duplicate of the current Material Object.
 </summary>
 <returns>The duplicated Material Object.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetComponentConstant(System.Object,System.Object)">
 <summary>
 Retrieve pure compound constants from the Property Package.
 </summary>
 <param name="props">List of pure compound constants</param>
 <param name="compIds">List of compound IDs for which constants are to be retrieved.
UNDEFINED is to be used when the call applied to all compounds in
the Material Object.</param>
 <returns>Compound Constant values returned from the Property Package for the
 specified compounds.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetIndependentVar(System.Object)">
 <summary>
 Returns the independent variables of a Material Object. This method is deprecated.
 </summary>
 <param name="indVars">Independent variables to be set</param>
 <returns>Values of independent variables.</returns>
 <remarks>This method should not be used.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetNumComponents">
 <summary>
 Returns number of chemical compounds in Material Object.
 </summary>
 <returns>Number of compounds in the Material Object.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetProp(System.String,System.String,System.Object,System.String,System.String)">
 <summary>
 This method is responsible for retrieving the results from calculations from the Material Object.
 </summary>
 <param name="property">The Property for which results are requested from the Material Object.</param>
 <param name="phase">The qualified phase for the results.</param>
 <param name="compIds">The qualified compounds for the results. UNDEFINED to specify all
 compounds in the Material Object. For scalar mixture properties such
 as liquid enthalpy, this qualifier must not be specified. Use
 UNDEFINED as place holder.</param>
 <param name="calcType">The qualified type of calculation for the results. (valid Calculation Types: Pure and Mixture)</param>
 <param name="basis">Qualifies the basis of the result (i.e., mass /mole). Use UNDEFINED
 for default or as place holder for property for which basis does not apply (see also 3.3.1).</param>
 <returns>Results vector containing property values in SI units arranged by the defined qualifiers.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetPropList">
 <summary>
 Returns list of properties that can be calculated by the Material Object.
 </summary>
 <returns>List of all supported properties of the Material Object.</returns>
 <remarks>DWSIM passes this call to the Property Package currently associated to the stream.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetUniversalConstant(System.Object)">
 <summary>
 Retrieves values of universal constants from the Property Package.
 </summary>
 <param name="props">List of universal constants to be retrieved</param>
 <returns>Values of universal constants</returns>
 <remarks>DWSIM passes this call to the Property Package currently associated to the stream.</remarks>
</member>
<member name="P:DWSIM.Thermodynamics.Streams.MaterialStream.PhaseIds">
 <summary>
 It returns the phases existing in the Material Object at that moment.
 </summary>
 <value></value>
 <returns>List of phases</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.PropCheck(System.Object)">
 <summary>
 Checks to see if a list of given properties can be calculated.
 </summary>
 <param name="props">Properties to check.</param>
 <returns>Returns Boolean List associated to list of properties to be checked.</returns>
 <remarks>Not implemented in DWSIM. As it was unclear from the original specification what PropCheck should exactly be checking, and as the
 argument list does not include a phase specification, implementations vary. It is generally expected that
 PropCheck at least verifies that the Property is available for calculation in the Material Object. However, this
 can also be verified with PropList. It is advised not to use PropCheck.
 The Material Object may or may not delegate this call to a Property Package.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.RemoveResults(System.Object)">
 <summary>
 RemoveResults
 </summary>
 <param name="props">Properties to be removed. UNDEFINED to remove all properties.</param>
 <remarks>Not implemented.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetIndependentVar(System.Object,System.Object)">
 <summary>
 SetIndependentVar
 </summary>
 <param name="indVars">Sets the independent variable for a given Material Object. This method is deprecated.</param>
 <param name="values">Independent variables to be set</param>
 <remarks>Values of independent variables.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetProp(System.String,System.String,System.Object,System.String,System.String,System.Object)">
 <summary>
 This method is responsible for setting the values for properties of the Material Object.
 </summary>
 <param name="property">The property for which the values need to be set.</param>
 <param name="phase">Phase for which the property is to be set.</param>
 <param name="compIds">Compounds for which values are to be set. UNDEFINED to specify all
 compounds in the Material Object. For scalar mixture properties such
 as liquid enthalpy, this qualifier should not be specified. Use
 UNDEFINED as place holder.</param>
 <param name="calcType">The calculation type. (valid Calculation Types: Pure and Mixture)</param>
 <param name="basis">Qualifies the basis (mole / mass). See also 3.3.2.</param>
 <param name="values">Values to set for the property.</param>
 <remarks>DWSIM doesn't implement "Pure" calculation type.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.ValidityCheck(System.Object)">
 <summary>
 Checks the validity of the calculation. This method is deprecated.
 </summary>
 <param name="props">The properties for which reliability is checked.</param>
 <returns>Returns the reliability scale of the calculation.</returns>
 <remarks>The ValidityCheck method must not be used, since the ICapeThermoReliability interface is not yet defined.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetCompoundConstant(System.Object,System.Object)">
 <summary>
 Returns the values of constant Physical Properties for the specified Compounds.
 </summary>
 <param name="props">The list of Physical Property identifiers. Valid
 identifiers for constant Physical Properties are listed in section 7.5.2.</param>
 <param name="compIds">List of Compound identifiers for which constants are to
 be retrieved. Set compIds to UNDEFINED to denote all Compounds in the component that implements the ICapeThermoCompounds interface.</param>
 <returns>Values of constants for the specified Compounds.</returns>
 <remarks>The GetConstPropList method can be used in order to check which constant Physical
 Properties are available.
 If the number of requested Physical Properties is P and the number of Compounds is C, the
 propvals array will contain C*P variants. The first C variants will be the values for the first
 requested Physical Property (one variant for each Compound) followed by C values of constants
 for the second Physical Property, and so on. The actual type of values returned
 (Double, String, etc.) depends on the Physical Property as specified in section 7.5.2.
 Physical Properties are returned in a fixed set of units as specified in section 7.5.2.
 If the compIds argument is set to UNDEFINED this is a request to return property values for
 all compounds in the component that implements the ICapeThermoCompounds interface
 with the compound order the same as that returned by the GetCompoundList method. For
 example, if the interface is implemented by a Property Package component the property
 request with compIds set to UNDEFINED means all compounds in the Property Package
 rather than all compounds in the Material Object passed to the Property package.
 If any Physical Property is not available for one or more Compounds, then undefined values
 must be returned for those combinations and an ECapeThrmPropertyNotAvailable exception
 must be raised. If the exception is raised, the client should check all the values returned to
 determine which is undefined.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetCompoundList(System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@)">
 <summary>
 Returns the list of all Compounds. This includes the Compound identifiers recognised and extra
information that can be used to further identify the Compounds.
 </summary>
 <param name="compIds">List of Compound identifiers</param>
 <param name="formulae">List of Compound formulae</param>
 <param name="names">List of Compound names.</param>
 <param name="boilTemps">List of boiling point temperatures.</param>
 <param name="molwts">List of molecular weights.</param>
 <param name="casnos">List of Chemical Abstract Service (CAS) Registry numbers.</param>
 <remarks>If any item cannot be returned then the value should be set to UNDEFINED. The same information
 can also be extracted using the GetCompoundConstant method. The equivalences
 between GetCompoundList arguments and Compound constant Physical Properties, as
 specified in section 7.5.2, is given in the table below.
 When the ICapeThermoCompounds interface is implemented by a Material Object, the list
 of Compounds returned is fixed when the Material Object is configured.
 For a Property Package component, the Property Package will normally contain a limited set
 of Compounds selected for a particular application, rather than all possible Compounds that
 could be available to a proprietary Properties System.
 The compIds returned by the GetCompoundList method must be unique within the
 component that implements the ICapeThermoCompounds interface. There is no restriction
 on the length of the strings returned in compIds. However, it should be recognised that a
 PME may restrict the length of Compound identifiers internally. In such a case the PME’s
 CAPE-OPEN socket must maintain a method of mapping the, potentially long, identifiers
 used by a CAPE-OPEN Property package component to the identifiers used within the PME.
 In order to identify the Compounds of a Property Package, the PME, or other client, will use
 the casnos argument rather than the compIds. This is because different PMEs and different
 Property Packages may give different names to the same Compounds and the casnos is
 (almost always) unique. If the casnos is not available (e.g. for petroleum fractions), or not
 unique, the other pieces of information returned by GetCompoundList can be used to
 distinguish the Compounds. It should be noted, however, that for communication with a
 Property Package a client must use the Compound identifiers returned in the compIds
 argument. It is the responsibility of the client to maintain appropriate data structures that
 allow it to reconcile the different Compound identifiers used by different Property Packages
 and any native property system.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetConstPropList">
 <summary>
 Returns the list of supported constant Physical Properties.
 </summary>
 <returns>List of identifiers for all supported constant Physical Properties. The standard constant property identifiers are listed in section 7.5.2.</returns>
 <remarks>GetConstPropList returns identifiers for all the constant Physical Properties that can be
 retrieved by the GetCompoundConstant method. If no properties are supported,
 UNDEFINED should be returned. The CAPE-OPEN standards do not define a minimum list
 of Physical Properties to be made available by a software component that implements the
 ICapeThermoCompounds interface.
 A component that implements the ICapeThermoCompounds interface may return constant
 Physical Property identifiers which do not belong to the list defined in section 7.5.2.
 However, these proprietary identifiers may not be understood by most of the clients of this
 component.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetNumCompounds">
 <summary>
 Returns the number of Compounds supported.
 </summary>
 <returns>Number of Compounds supported.</returns>
 <remarks>The number of Compounds returned by this method must be equal to the number of
 Compound identifiers that are returned by the GetCompoundList method of this interface. It
 must be zero or a positive number.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetPDependentProperty(System.Object,System.Double,System.Object,System.Object@)">
 <summary>
 Returns the values of pressure-dependent Physical Properties for the specified pure Compounds.
 </summary>
 <param name="props">The list of Physical Property identifiers. Valid identifiers for pressure-dependent 
 Physical Properties are listed in section 7.5.4</param>
 <param name="pressure">Pressure (in Pa) at which Physical Properties are evaluated</param>
 <param name="compIds">List of Compound identifiers for which Physical Properties are to be retrieved. 
 Set compIds to UNDEFINED to denote all Compounds in the component that implements the ICapeThermoCompounds interface.</param>
 <param name="propVals">Property values for the Compounds specified.</param>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetPDependentPropList">
 <summary>
 Returns the list of supported pressure-dependent properties.
 </summary>
 <returns>The list of Physical Property identifiers for all supported pressure-dependent properties. The standard identifiers are listed in section 7.5.4</returns>
 <remarks>GetPDependentPropList returns identifiers for all the pressure-dependent properties that can
 be retrieved by the GetPDependentProperty method. If no properties are supported
 UNDEFINED should be returned. The CAPE-OPEN standards do not define a minimum list
 of Physical Properties to be made available by a software component that implements the
 ICapeThermoCompounds interface.
 A component that implements the ICapeThermoCompounds interface may return identifiers
 which do not belong to the list defined in section 7.5.4. However, these proprietary
 identifiers may not be understood by most of the clients of this component.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetTDependentProperty(System.Object,System.Double,System.Object,System.Object@)">
 <summary>
 Returns the values of temperature-dependent Physical Properties for the specified pure Compounds.
 </summary>
 <param name="props">The list of Physical Property identifiers. Valid identifiers for 
 temperature-dependent Physical Properties are listed in section 7.5.3</param>
 <param name="temperature">Temperature (in K) at which properties are evaluated</param>
 <param name="compIds">List of Compound identifiers for which Physical Properties are to be retrieved. 
 Set compIds to UNDEFINED to denote all Compounds in the component that implements the ICapeThermoCompounds interface.</param>
 <param name="propVals">Physical Property values for the Compounds specified.</param>
 <remarks>The GetTDependentPropList method can be used in order to check which Physical
 Properties are available.
 If the number of requested Physical Properties is P and the number of Compounds is C, the
 propvals array will contain C*P values. The first C will be the values for the first requested
 Physical Property followed by C values for the second Physical Property, and so on.
 Properties are returned in a fixed set of units as specified in section 7.5.3.
 If the compIds argument is set to UNDEFINED this is a request to return property values for
 all compounds in the component that implements the ICapeThermoCompounds interface
 with the compound order the same as that returned by the GetCompoundList method. For
 example, if the interface is implemented by a Property Package component the property
 request with compIds set to UNDEFINED means all compounds in the Property Package
 rather than all compounds in the Material Object passed to the Property package.
 If any Physical Property is not available for one or more Compounds, then undefined values
 must be returned for those combinations and an ECapeThrmPropertyNotAvailable exception
 must be raised. If the exception is raised, the client should check all the values returned to
 determine which is undefined.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetTDependentPropList">
 <summary>
 Returns the list of supported temperature-dependent Physical Properties.
 </summary>
 <returns>The list of Physical Property identifiers for all supported temperature-dependent 
 properties. The standard identifiers are listed in section 7.5.3</returns>
 <remarks>GetTDependentPropList returns identifiers for all the temperature-dependent Physical
 Properties that can be retrieved by the GetTDependentProperty method. If no properties are
 supported UNDEFINED should be returned. The CAPE-OPEN standards do not define a
 minimum list of properties to be made available by a software component that implements
 the ICapeThermoCompounds interface.
 A component that implements the ICapeThermoCompounds interface may return identifiers
 which do not belong to the list defined in section 7.5.3. However, these proprietary identifiers
 may not be understood by most of the clients of this component.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.ClearAllProps">
 <summary>
 Remove all stored Physical Property values.
 </summary>
 <remarks>ClearAllProps removes all stored Physical Properties that have been set using the
 SetSinglePhaseProp, SetTwoPhaseProp or SetOverallProp methods. This means that any
 subsequent call to retrieve Physical Properties will result in an exception until new values
 have been stored using one of the Set methods. ClearAllProps does not remove the
 configuration information for a Material, i.e. the list of Compounds and Phases.
 Using the ClearAllProps method results in a Material Object that is in the same state as
 when it was first created. It is an alternative to using the CreateMaterial method but it is
 expected to have a smaller overhead in operating system resources.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.CopyFromMaterial(System.Object@)">
 <summary>
 Copies all the stored non-constant Physical Properties (which have been set using the SetSinglePhaseProp, 
 SetTwoPhaseProp or SetOverallProp) from the source Material Object to the current instance of the Material Object.</summary>
 <param name="source">Source Material Object from which stored properties will be copied.</param>
 <remarks>Before using this method, the Material Object must have been configured with the same
 exact list of Compounds and Phases as the source one. Otherwise, calling the method will
 raise an exception. There are two ways to perform the configuration: through the PME
 proprietary mechanisms and with CreateMaterial. Calling CreateMaterial on a Material
 Object S and subsequently calling CopyFromMaterial(S) on the newly created Material
 Object N is equivalent to the deprecated method ICapeMaterialObject.Duplicate.
 The method is intended to be used by a client, for example a Unit Operation that needs a
 Material Object to have the same state as one of the Material Objects it has been connected
 to. One example is the representation of an internal stream in a distillation column.
 If the Material Object supports the Petroleum Fractions Interface [7] the petroleum fraction
 properties are also copied from the source Material Object to the current instance of the
 Material Object.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.CreateMaterial">
 <summary>
 Creates a Material Object with the same configuration as the current Material Object.
 </summary>
 <returns>The Material Object created does not contain any non-constant Physical Property value but
 has the same configuration (Compounds and Phases) as the current Material Object. These
 Physical Property values must be set using SetSinglePhaseProp, SetTwoPhaseProp or
 SetOverallProp. Any attempt to retrieve Physical Property values before they have been set
 will result in an exception.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetOverallProp(System.String,System.String,System.Object@)">
 <summary>
 Retrieves non-constant Physical Property values for the overall mixture.
 </summary>
 <param name="property">The identifier of the Physical Property for which values are requested. 
 This must be one of the single-phase Physical Properties or derivatives that can be stored for 
 the overall mixture. The standard identifiers are listed in sections 7.5.5 and 7.6.</param>
 <param name="basis">Basis of the results. Valid settings are: “Mass” for Physical Properties per 
 unit mass or “Mole” for molar properties. Use UNDEFINED as a place holder for a Physical Property 
 for which basis does not apply. See section 7.5.5 for details.</param>
 <param name="results">Results vector containing Physical Property value(s) in SI units.</param>
 <remarks>The Physical Property values returned by GetOverallProp refer to the overall mixture. These
 values are set by calling the SetOverallProp method. Overall mixture Physical Properties are
 not calculated by components that implement the ICapeThermoMaterial interface. The
 property values are only used as input specifications for the CalcEquilibrium method of a
 component that implements the ICapeThermoEquilibriumRoutine interface.
 It is expected that this method will normally be able to provide Physical Property values on
 any basis, i.e. it should be able to convert values from the basis on which they are stored to
 the basis requested. This operation will not always be possible. For example, if the
 molecular weight is not known for one or more Compounds, it is not possible to convert
 between a mass basis and a molar basis.
 Although the result of some calls to GetOverallProp will be a single value, the return type is
 CapeArrayDouble and the method must always return an array even if it contains only a
 single element.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetOverallTPFraction(System.Double@,System.Double@,System.Object@)">
 <summary>
 Retrieves temperature, pressure and composition for the overall mixture.
 </summary>
 <param name="temperature">Temperature (in K)</param>
 <param name="pressure">Pressure (in Pa)</param>
 <param name="composition">Composition (mole fractions)</param>
 <remarks>This method is provided to make it easier for developers to make efficient use of the CAPEOPEN interfaces. 
 It returns the most frequently requested information from a Material Object in a single call. There is no choice 
 of basis in this method. The composition is always returned as mole fractions.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetPresentPhases(System.Object@,System.Object@)">
 <summary>
 Returns Phase labels for the Phases that are currently present in the Material Object.
 </summary>
 <param name="phaseLabels">The list of Phase labels (identifiers – names) for the Phases present 
 in the Material Object. The Phase labels in the Material Object must be a subset of the labels 
 returned by the GetPhaseList method of the ICapeThermoPhases interface.</param>
 <param name="phaseStatus"></param>
 <remarks>A Phase is ‘present’ in a Material Object (or other component that implements the
 ICapeThermoMaterial interface) if it has been explicitly made present by calling the
 SetPresentPhases method or if any properties have been set by calling the
 SetSinglePhaseProp or SetTwoPhaseProp methods. Even if a Phase is present, it does not
 necessarily imply that any Physical Properties are actually set unless the phaseStatus is
 Cape_AtEquilibrium or Cape_Estimates (see below). Note that calling the SetPresentPhases
 method of the ICapeThermoMaterial interface will cause any phases not specified in its
 phaseLabels list to not present, even if previously present as a result of a SetSingle-
 PhaseProp or SetTwoPhaseProp call.
 If no Phases are present, UNDEFINED should be returned for both the phaseLabels and
 phaseStatus arguments.
 The phaseStatus argument contains as many entries as there are Phase labels. The valid
 settings are listed in the following table:
 
 Identifier                    Meaning
 Cape_UnknownPhaseStatus       This is the normal setting when a Phase is specified as being available for an Equilibrium Calculation.
 Cape_AtEquilibrium            The Phase has been set as present as a result of an Equilibrium Calculation.
 Cape_Estimates                Estimates of the equilibrium state have been set in the Material Object.
 
 All the Phases with a status of Cape_AtEquilibrium have values of temperature, pressure,
 composition and Phase fraction set that correspond to an equilibrium state, i.e. equal
 temperature, pressure and fugacities of each Compound. Phases with a Cape_Estimates
 status have values of temperature, pressure, composition and Phase fraction set in the
 Material Object. These values are available for use by an Equilibrium Calculator component
 to initialise an Equilibrium Calculation. The stored values are available but there is no
 guarantee that they will be used.
 GetPresentPhases is intended to be used in several contexts.
 A Property Package, Property Calculator or other PMC may use this method to check
 whether a phase is present in the Material Object prior to requesting and/or calculating
 some properties.
 An Equilibrium Calculator component will use this method to obtain the list of phases to
 consider in an equilibrium calculation or when checking an equilibrium specification
 (see below for more details).
 The method will be used by the PME or PMC to obtain the list of phases present as the
 result of an equilibrium calculation (see below for more details).
 A Unit Operation (or other PMC) will use this method to get the list of phases present at
 an inlet port or during its calculations.
 In the context of Equilibrium Calculations the GetPresentPhases method is intended to work
 in conjunction with the SetPresentPhases method. Together these methods provide a means
 of communication between a PME (or another client) and an Equilibrium Calculator (or
 other component that implements the ICapeThermoEquilibriumRoutine interface). The
 following sequence of operations is envisaged.
 
 1. Prior to requesting an Equilibrium Calculation, a PME will use the SetPresentPhases
 method to define a list of Phases that may be considered in the Equilibrium
 Calculation. Typically, this is necessary because an Equilibrium Calculator may be
 capable of handling a large number of Phases but for a particular application, it may
 be known that only certain Phases will be involved. For example, if the complete
 Phase list contains Phases with the following labels (with the obvious interpretation):
 vapour, hydrocarbonLiquid and aqueousLiquid and it is required to model a liquid
 decanter, the present Phases might be set to hydrocarbonLiquid and aqueousLiquid.
 
 2. The GetPresentPhases method is then used by the CalcEquilibrium method of the
 ICapeThermoEquilibriumRoutine interface to obtain the list of Phase labels corresponding
 to the Phases that may be present at equilibrium.
 
 3. The Equilibrium Calculation determines which Phases actually co-exist at
 equilibrium. This list of Phases may be a sub-set of the Phases considered because
 some Phases may not be present at the prevailing conditions. For example, if the
 amount of water is sufficiently small the aqueousLiquid Phase in the above example
 may not exist because all the water dissolves in the hydrocarbonLiquid Phase.
 
 4. The CalcEquilibrium method uses the SetPresentPhases method to indicate the
 Phases present following the equilibrium calculation (and sets the phase properties).
 
 5. The PME uses the GetPresentPhases method to find out the Phases present following
 the calculation and it can then use the GetSinglePhaseProp or GetTPFraction
 methods to get the Phase properties.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetSinglePhaseProp(System.String,System.String,System.String,System.Object@)">
 <summary>
 Retrieves single-phase non-constant Physical Property values for a mixture.
 </summary>
 <param name="property">The identifier of the Physical Property for which values are requested. 
 This must be one of the single-phase Physical Properties or derivatives. The standard identifiers 
 are listed in sections 7.5.5 and 7.6.</param>
 <param name="phaseLabel">Phase label of the Phase for which the Physical Property is required. 
 The Phase label must be one of the identifiers returned by the GetPresentPhases method of this interface.</param>
 <param name="basis">Basis of the results. Valid settings are: “Mass” for Physical Properties per unit mass or “Mole” 
 for molar properties. Use UNDEFINED as a place holder for a Physical Property for which basis does not apply. See section 
 7.5.5 for details.</param>
 <param name="results">Results vector (CapeArrayDouble) containing Physical Property value(s) in SI units or CapeInterface 
 (see notes).</param>
 <remarks>The results argument returned by GetSinglePhaseProp is either a CapeArrayDouble that
 contains one or more numerical values, e.g. temperature, or a CapeInterface that may be
 used to retrieve single-phase Physical Properties described by a more complex data
 structure, e.g. distributed properties.
 It is required that a component that implements the ICapeThermoMaterial interface will
 always support the following properties: temperature, pressure, fraction, phaseFraction,
 flow, totalFlow.
 Although the result of some calls to GetSinglePhaseProp may be a single numerical value,
 the return type for numerical values is CapeArrayDouble and in such a case the method must
 return an array even if it contains only a single element.
 A Phase is ‘present’ in a Material if its identifier is returned by the GetPresentPhases
 method. An exception is raised by the GetSinglePhaseProp method if the Phase specified is
 not present. Even if a Phase is present, this does not necessarily mean that any Physical
 Properties are available.
 The Physical Property values returned by GetSinglePhaseProp refer to a single Phase. These
 values may be set by the SetSinglePhaseProp method, which may be called directly, or by
 ICapeThermoPropertyRoutine interface or the CalcEquilibrium method of the
 ICapeThermoEquilibriumRoutine interface. Note: Physical Properties that depend on more
 than one Phase, for example surface tension or K-values, are returned by the
 GetTwoPhaseProp method.
 It is expected that this method will normally be able to provide Physical Property values on
 any basis, i.e. it should be able to convert values from the basis on which they are stored to
 the basis requested. This operation will not always be possible. For example, if the
 molecular weight is not known for one or more Compounds, it is not possible to convert
 from mass fractions or mass flows to mole fractions or molar flows.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetTPFraction(System.String,System.Double@,System.Double@,System.Object@)">
 <summary>
 Retrieves temperature, pressure and composition for a Phase.
 </summary>
 <param name="phaseLabel">Phase label of the Phase for which the property is required. The Phase label 
 must be one of the identifiers returned by the GetPresentPhases method of this interface.</param>
 <param name="temperature">Temperature (in K)</param>
 <param name="pressure">Pressure (in Pa)</param>
 <param name="composition">Composition (mole fractions)</param>
 <remarks>This method is provided to make it easier for developers to make efficient use of the CAPEOPEN
 interfaces. It returns the most frequently requested information from a Material
 Object in a single call.
 There is no choice of basis in this method. The composition is always returned as mole
 fractions.
 To get the equivalent information for the overall mixture the GetOverallTPFraction method
 of the ICapeThermoMaterial interface should be used.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetTwoPhaseProp(System.String,System.Object,System.String,System.Object@)">
 <summary>
 Retrieves two-phase non-constant Physical Property values for a mixture.
 </summary>
 <param name="property">The identifier of the property for which values are requested. This must 
 be one of the two-phase Physical Properties or Physical Property derivatives listed in sections 
 7.5.6 and 7.6.</param>
 <param name="phaseLabels">List of Phase labels of the Phases for which the property is required. 
 The Phase labels must be two of the identifiers returned by the GetPhaseList method of the Material 
 Object.</param>
 <param name="basis">Basis of the results. Valid settings are: “Mass” for Physical Properties per unit 
 mass or “Mole” for molar properties. Use UNDEFINED as a place holder for a Physical Property for which 
 basis does not apply. See section 7.5.5 for details.</param>
 <param name="results">Results vector (CapeArrayDouble) containing property value(s) in SI units or 
 CapeInterface (see notes).</param>
 <remarks>The results argument returned by GetTwoPhaseProp is either a CapeArrayDouble that
 contains one or more numerical values, e.g. kvalues, or a CapeInterface that may be used to
 retrieve 2-phase Physical Properties described by a more complex data structure, e.g.
 distributed Physical Properties.
 Although the result of some calls to GetTwoPhaseProp may be a single numerical value, the
 return type for numerical values is CapeArrayDouble and in such a case the method must
 return an array even if it contains only a single element.
 A Phase is ‘present’ in a Material if its identifier is returned by the GetPresentPhases
 method. An exception is raised by the GetTwoPhaseProp method if any of the Phases
 specified is not present. Even if all Phases are present, this does not necessarily mean that
 any Physical Properties are available.
 The Physical Property values returned by GetTwoPhaseProp depend on two Phases, for
 example surface tension or K-values. These values may be set by the SetTwoPhaseProp
 method that may be called directly, or by other methods such as the CalcTwoPhaseProp
 method of the ICapeThermoPropertyRoutine interface, or the CalcEquilibrium method of the
 ICapeThermoEquilibriumRoutine interface. Note: Physical Properties that depend on a
 single Phase are returned by the GetSinglePhaseProp method.
 It is expected that this method will normally be able to provide Physical Property values on
 any basis, i.e. it should be able to convert values from the basis on which they are stored to
 the basis requested. This operation will not always be possible. For example, if the
 molecular weight is not known for one or more Compounds, it is not possible to convert
 between a mass basis and a molar basis.
 If a composition derivative is requested this means that the derivatives are returned for both
 Phases in the order in which the Phase labels are specified. The number of values returned
 for a composition derivative will depend on the dimensionality of the property. For example,
 if there are N Compounds then the results vector for the surface tension derivative will
 contain N composition derivative values for the first Phase, followed by N composition
 derivative values for the second Phase. For K-value derivative there will be N2 derivative
 values for the first phase followed by N2 values for the second phase in the order defined in
 7.6.2.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetOverallProp(System.String,System.String,System.Object)">
 <summary>
 Sets non-constant property values for the overall mixture.
 </summary>
 <param name="property">The identifier of the property for which values are set.</param>
 <param name="basis">Basis of the results. Valid settings are: “Mass” for Physical Properties 
 per unit mass or “Mole” for molar properties. Use UNDEFINED as a place holder for a Physical 
 Property for which basis does not apply.</param>
 <param name="values">Values to set for the property.s</param>
 <remarks>The property values set by SetOverallProp refer to the overall mixture. These values are
 retrieved by calling the GetOverallProp method. Overall mixture properties are not
 calculated by components that implement the ICapeThermoMaterial interface. The property
 values are only used as input specifications for the CalcEquilibrium method of a component
 that implements the ICapeThermoEquilibriumRoutine interface.
 Although some properties set by calls to SetOverallProp will have a single value, the type of
 argument values is CapeArrayDouble and the method must always be called with values as
 an array even if it contains only a single element.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetPresentPhases(System.Object,System.Object)">
 <summary>
 Allows the PME or the Property Package to specify the list of Phases that are currently present.
 </summary>
 <param name="phaseLabels">The list of Phase labels for the Phases present.
 The Phase labels in the Material Object must be a
 subset of the labels returned by the GetPhaseList
 method of the ICapeThermoPhases interface.</param>
 <param name="phaseStatus"></param>
 <remarks>SetPresentPhases is intended to be used in the following ways:
 * To restrict an Equilibrium Calculation (using the CalcEquilibrium method of a
 component that implements the ICapeThermoEquilibriumRoutine interface) to a subset
 of the Phases supported by the Property Package component;
 * When the component that implements the ICapeThermoEquilibriumRoutine interface
 needs to specify which Phases are present in a Material Object after an Equilibrium
 Calculation has been performed.
 * In the context of dynamic simulations to specify the state of a Material Object that is an
 output of a unit operation. This is the equivalent of calculating equilibrium in steadystate
 simulations.
 If a Phase in the list is already present, its Physical Properties are unchanged by the action of
 this method. Any Phases not in the list when SetPresentPhases is called are removed from
 the Material Object. This means that any Physical Property values that may have been stored
 on the removed Phases are no longer available (i.e. a call to GetSinglePhaseProp or
 GetTwoPhaseProp including this Phase will return an exception). A call to the
 GetPresentPhases method of the Material Object will return the same list as specified by
 SetPresentPhases.
 The phaseStatus argument must contain as many entries as there are Phase labels. The valid
 settings are listed in the following table:
 
 Identifier                 Meaning
 Cape_UnknownPhaseStatus    This is the normal setting when a Phase is specified as being available for an Equilibrium Calculation.
 Cape_AtEquilibrium         The Phase has been set as present as a result of an Equilibrium Calculation.
 Cape_Estimates             Estimates of the equilibrium state have been set in the Material Object.
 
 All the Phases with a status of Cape_AtEquilibrium must have properties that correspond to
 an equilibrium state, i.e. equal temperature, pressure and fugacities of each Compound (this
 does not imply that the fugacities are set as a result of the Equilibrium Calculation). The
 Cape_AtEquilibrium status should be set by the CalcEquilibrium method of a component
 that implements the ICapeThermoEquilibriumRoutine interface following a successful
 Equilibrium Calculation. If the temperature, pressure or composition of an equilibrium Phase
 is changed, the Material Object implementation is responsible for resetting the status of the
 Phase to Cape_UnknownPhaseStatus. Other property values stored for that Phase should not
 be affected.
 Phases with an Estimates status must have values of temperature, pressure, composition and
 phase fraction set in the Material Object. These values are available for use by an
 Equilibrium Calculator component to initialise an Equilibrium Calculation. The stored
 values are available but there is no guarantee that they will be used.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetSinglePhaseProp(System.String,System.String,System.String,System.Object)">
 <summary>
 Sets single-phase non-constant property values for a mixture.
 </summary>
 <param name="property">The identifier of the property for which values are set. This must be 
 one of the single-phase properties or derivatives. The standard identifiers are listed in 
 sections 7.5.5 and 7.6.</param>
 <param name="phaseLabel">Phase label of the Phase for which the property is set. The phase 
 label must be one of the strings returned by the GetPhaseList method of the ICapeThermoPhases 
 interface.</param>
 <param name="basis">Basis of the results. Valid settings are: “Mass” for Physical Properties 
 per unit mass or “Mole” for molar properties. Use UNDEFINED as a place holder for a Physical 
 Property for which basis does not apply. See section 7.5.5 for details.</param>
 <param name="values">Values to set for the property (CapeArrayDouble) or CapeInterface (see notes).</param>
 <remarks>The values argument of SetSinglePhaseProp is either a CapeArrayDouble that contains one
 or more numerical values to be set for a property, e.g. temperature, or a CapeInterface that
 may be used to set single-phase properties described by a more complex data structure, e.g.
 distributed properties.
 It is required that a component that implements the ICapeThermoMaterial interface will
 always support the following properties: temperature, pressure, fraction, phaseFraction,
 flow, totalFlow.
 Although some properties set by calls to SetSinglePhaseProp will have a single numerical
 value, the type of the values argument for numerical values is CapeArrayDouble and in such
 a case the method must be called with values containing an array even if it contains only a
 single element.
 The property values set by SetSinglePhaseProp refer to a single Phase. Properties that depend
 on more than one Phase, for example surface tension or K-values, are set by the
 SetTwoPhaseProp method of the ICapeThermoMaterial Interface.
 To set a property using SetSinglePhaseProp, a phaseLabel identifier should be passed that is
 supported by the Property Package or Material Object, i.e. one that appears in the list
 returned by the GetPhaseList method of the ICapeThermoPhases interface. Setting such a
 property should cause the phase to be present on the Material Object, as if it were specified
 in a call to SetPresentPhases with status Cape_UnknownPhaseStatus. The SetPresentPhases
 method of this interface does not need to be called before calling SetSinglePhaseProp.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetTwoPhaseProp(System.String,System.Object,System.String,System.Object)">
 <summary>
 Sets two-phase non-constant property values for a mixture.
 </summary>
 <param name="property">The property for which values are set in the Material Object. This 
 must be one of the two-phase properties or derivatives included in sections 7.5.6 and 7.6.</param>
 <param name="phaseLabels">Phase labels of the Phases for which the property is set. The Phase
 labels must be two of the identifiers returned by the GetPhaseList method of the ICapeThermoPhases
 interface.</param>
 <param name="basis">Basis of the results. Valid settings are: “Mass” for Physical Properties per unit
 mass or “Mole” for molar properties. Use UNDEFINED as a place holder for a Physical Property for which 
 basis does not apply. See section 7.5.5 for details.</param>
 <param name="values">Value(s) to set for the property (CapeArrayDouble) or CapeInterface (see notes).</param>
 <remarks>The values argument of SetTwoPhaseProp is either a CapeArrayDouble that contains one or
 more numerical values to be set for a property, e.g. kvalues, or a CapeInterface that may be
 used to set two-phase properties described by a more complex data structure, e.g. distributed
 properties.
 Although some properties set by calls to SetTwoPhaseProp will have a single numerical
 value, the type of the values argument for numerical values is CapeArrayDouble and in such
 a case the method must be called with the values argument containing an array even if it
 contains only a single element.
 The Physical Property values set by SetTwoPhaseProp depend on two Phases, for example
 surface tension or K-values. Properties that depend on a single Phase are set by the
 SetSinglePhaseProp method.
 If a Physical Property with composition derivative is specified, the derivative values will be
 set for both Phases in the order in which the Phase labels are specified. The number of
 values returned for a composition derivative will depend on the property. For example, if
 there are N Compounds then the values vector for the surface tension derivative will contain
 N composition derivative values for the first Phase, followed by N composition derivative
 values for the second Phase. For K-values there will be N2 derivative values for the first
 phase followed by N2 values for the second phase in the order defined in 7.6.2.
 To set a property using SetTwoPhaseProp, phaseLabels identifiers should be passed that are
 supported by the Property Package or Material Object, i.e. one that appears in the list returned by the
 GetPhaseList method of the ICapeThermoPhases interface. Setting such a property should cause the
 phases to be present on the Material Object, as if it were present in a call to SetPresentPhases with
 status Cape_UnknownPhaseStatus. The SetPresentPhases method of this interface does not need to
 be called before calling SetTwoPhaseProp.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetNumPhases">
 <summary>
 Returns the number of Phases.
 </summary>
 <returns>The number of Phases supported.</returns>
 <remarks>The number of Phases returned by this method must be equal to the number of Phase labels
 that are returned by the GetPhaseList method of this interface. It must be zero, or a positive
 number.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetPhaseInfo(System.String,System.String)">
 <summary>
 Returns information on an attribute associated with a Phase for the purpose of understanding 
 what lies behind a Phase label.
 </summary>
 <param name="phaseLabel">A (single) Phase label. This must be one of the values returned by GetPhaseList method.</param>
 <param name="phaseAttribute">One of the Phase attribute identifiers from the table below.</param>
 <returns>The value corresponding to the Phase attribute identifier – see table below.</returns>
 <remarks>GetPhaseInfo is intended to allow a PME, or other client, to identify a Phase with an arbitrary
 label. A PME, or other client, will need to do this to map stream data into a Material
 Object, or when importing a Property Package. If the client cannot identify the Phase, it can
 ask the user to provide a mapping based on the values of these properties.
 The list of supported Phase attributes is defined in the following table:
 
 Phase attribute identifier            Supported values
 
 StateOfAggregation                    One of the following strings:
                                       Vapor
                                       Liquid
                                       Solid
                                       Unknown
 
 KeyCompoundId                         The identifier of the Compound (compId as returned by GetCompoundList) 
                                       that is expected to be present in highest concentration in the Phase. 
                                       May be undefined in which case UNDEFINED should be returned.
 
 ExcludedCompoundId                    The identifier of the Compound (compId as returned by
                                       GetCompoundList) that is expected to be present in low or zero
                                       concentration in the Phase. May not be defined in which case
                                       UNDEFINED should be returned.
 
 DensityDescription                    A description that indicates the density range expected for the Phase.
                                       One of the following strings or UNDEFINED:
                                       Heavy
                                       Light
 
 UserDescription                       A description that helps the user or PME to identify the Phase.
                                       It can be any string or UNDEFINED.
 
 TypeOfSolid                           A description that provides more information about a solid Phase. For
                                       Phases with a “Solid” state of aggregation it may be one of the
                                       following standard strings or UNDEFINED:
                                       PureSolid
                                       SolidSolution
                                       HydrateI
                                       HydrateII
                                       HydrateH
                                       Other values may be returned for solid Phases but these may not be
                                       understood by most clients.
                                       For Phases with any other state of aggregation it must be
                                       UNDEFINED.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetPhaseList(System.Object@,System.Object@,System.Object@)">
 <summary>
 Returns Phase labels and other important descriptive information for all the Phases supported.
 </summary>
 <param name="phaseLabels">he list of Phase labels for the Phases supported. A Phase label can 
 be any string but each Phase must have a unique label. If, for some reason, no Phases are 
 supported an UNDEFINED value should be returned for the phaseLabels. The number of Phase labels 
 must also be equal to the number of Phases returned by the GetNumPhases method.</param>
 <param name="stateOfAggregation">The physical State of Aggregation associated with each of the 
 Phases. This must be one of the following strings: ”Vapor”, “Liquid”, “Solid” or “Unknown”. Each 
 Phase must have a single State of Aggregation. The value must not be left undefined, but may be 
 set to “Unknown”.</param>
 <param name="keyCompoundId">The key Compound for the Phase. This must be the Compound identifier 
 (as returned by GetCompoundList), or it may be undefined in which case a UNDEFINED value is returned. 
 The key Compound is an indication of the Compound that is expected to be present in high concentration 
 in the Phase, e.g. water for an aqueous liquid phase. Each Phase can have a single key Compound.</param>
 <remarks>The Phase label allows the phase to be uniquely identified in methods of the ICapeThermo-
 Phases interface and other CAPE-OPEN interfaces. The State of Aggregation and key
 Compound provide a way for the PME, or other client, to interpret the meaning of a Phase
 label in terms of the physical characteristics of the Phase.
 All arrays returned by this method must be of the same length, i.e. equal to the number of
 Phase labels.
 To get further information about a Phase, use the GetPhaseInfo method.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetUniversalConstant(System.String)">
 <summary>
 Retrieves the value of a Universal Constant.
 </summary>
 <param name="constantId">Identifier of Universal Constant. The list of constants supported should be 
 obtained by using the GetUniversalConstantList method.</param>
 <returns>Value of Universal Constant. This could be a numeric or a string value. For numeric values 
 the units of measurement are specified in section 7.5.1.</returns>
 <remarks>Universal Constants (often called fundamental constants) are quantities like the gas constant,
 or the Avogadro constant.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetUniversalConstantList">
 <summary>
 Returns the identifiers of the supported Universal Constants.
 </summary>
 <returns>List of identifiers of Universal Constants. The list of standard identifiers is given in section 7.5.1.</returns>
 <remarks>A component may return Universal Constant identifiers that do not belong to the list defined
 in section 7.5.1. However, these proprietary identifiers may not be understood by most of the
 clients of this component.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.CalcAndGetLnPhi(System.String,System.Double,System.Double,System.Object,System.Int32,System.Object@,System.Object@,System.Object@,System.Object@)">
 <summary>
 This method is used to calculate the natural logarithm of the fugacity coefficients (and
 optionally their derivatives) in a single Phase mixture. The values of temperature, pressure
 and composition are specified in the argument list and the results are also returned through
 the argument list.
 </summary>
 <param name="phaseLabel">Phase label of the Phase for which the properties are to be calculated. 
 The Phase label must be one of the strings returned by the GetPhaseList method on the ICapeThermoPhases interface.</param>
 <param name="temperature">The temperature (K) for the calculation.</param>
 <param name="pressure">The pressure (Pa) for the calculation.</param>
 <param name="moleNumbers">Number of moles of each Compound in the mixture.</param>
 <param name="fFlags">Code indicating whether natural logarithm of the fugacity coefficients and/or derivatives 
 should be calculated (see notes).</param>
 <param name="lnPhi">Natural logarithm of the fugacity coefficients (if requested).</param>
 <param name="lnPhiDT">Derivatives of natural logarithm of the fugacity coefficients w.r.t. temperature (if requested).</param>
 <param name="lnPhiDP">Derivatives of natural logarithm of the fugacity coefficients w.r.t. pressure (if requested).</param>
 <param name="lnPhiDn">Derivatives of natural logarithm of the fugacity coefficients w.r.t. mole numbers (if requested).</param>
 <remarks>This method is provided to allow the natural logarithm of the fugacity coefficient, which is
 the most commonly used thermodynamic property, to be calculated and returned in a highly
 efficient manner.
 The temperature, pressure and composition (mole numbers) for the calculation are specified
 by the arguments and are not obtained from the Material Object by a separate request. Likewise,
 any quantities calculated are returned through the arguments and are not stored in the
 Material Object. The state of the Material Object is not affected by calling this method. It
 should be noted however, that prior to calling CalcAndGetLnPhi a valid Material Object
 must have been defined by calling the SetMaterial method on the
 ICapeThermoMaterialContext interface of the component that implements the
 ICapeThermoPropertyRoutine interface. The compounds in the Material Object must have
 been identified and the number of values supplied in the moleNumbers argument must be
 equal to the number of Compounds in the Material Object.
 The fugacity coefficient information is returned as the natural logarithm of the fugacity
 coefficient. This is because thermodynamic models naturally provide the natural logarithm
 of this quantity and also a wider range of values may be safely returned.
 The quantities actually calculated and returned by this method are controlled by an integer
 code fFlags. The code is formed by summing contributions for the property and each
 derivative required using the enumerated constants eCapeCalculationCode (defined in the
 Thermo version 1.1 IDL) shown in the following table. For example, to calculate log
 fugacity coefficients and their T-derivatives the fFlags argument would be set to
 CAPE_LOG_FUGACITY_COEFFICIENTS + CAPE_T_DERIVATIVE.
 
                                       code                            numerical value
 no calculation                        CAPE_NO_CALCULATION             0
 log fugacity coefficients             CAPE_LOG_FUGACITY_COEFFICIENTS  1
 T-derivative                          CAPE_T_DERIVATIVE               2
 P-derivative                          CAPE_P_DERIVATIVE               4
 mole number derivatives               CAPE_MOLE_NUMBERS_DERIVATIVES   8
 
 If CalcAndGetLnPhi is called with fFlags set to CAPE_NO_CALCULATION no property
 values are returned.
 A typical sequence of operations for this method when implemented by a Property Package
 component would be:
 - Check that the phaseLabel specified is valid.
 - Check that the moleNumbers array contains the number of values expected
 (should be consistent with the last call to the SetMaterial method).
 - Calculate the requested properties/derivatives at the T/P/composition specified in
 the argument list.
 - Store values for the properties/derivatives in the corresponding arguments.
 Note that this calculation can be carried out irrespective of whether the Phase actually exists
 in the Material Object.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.CalcSinglePhaseProp(System.Object,System.String)">
 <summary>
 CalcSinglePhaseProp is used to calculate properties and property derivatives of a mixture in
 a single Phase at the current values of temperature, pressure and composition set in the
 Material Object. CalcSinglePhaseProp does not perform phase Equilibrium Calculations.
 </summary>
 <param name="props">The list of identifiers for the single-phase properties or derivatives to 
 be calculated. See sections 7.5.5 and 7.6 for the standard identifiers.</param>
 <param name="phaseLabel">Phase label of the Phase for which the properties are to be calculated. 
 The Phase label must be one of the strings returned by the GetPhaseList method on the 
 ICapeThermoPhases interface and the phase must be present in the Material Object.</param>
 <remarks>CalcSinglePhaseProp calculates properties, such as enthalpy or viscosity that are defined for
 a single Phase. Physical Properties that depend on more than one Phase, for example surface
 tension or K-values, are handled by CalcTwoPhaseProp method.
 Components that implement this method must get the input specification for the calculation
 (temperature, pressure and composition) from the associated Material Object and set the
 results in the Material Object.
 Thermodynamic and Physical Properties Components, such as a Property Package or Property
 Calculator, must implement the ICapeThermoMaterialContext interface so that an
 ICapeThermoMaterial interface can be passed via the SetMaterial method.
 The component that implements the ICapeThermoPropertyRoutine interface (e.g. a Property
 Package or Property Calculator) must also implement the ICapeThermoPhases interface so
 that it is possible to get a list of supported phases. The phaseLabel passed to this method
 must be one of the phase labels returned by the GetPhaseList method of the
 ICapeThermoPhases interface and it must also be present in the Material Object, ie. one of
 the phase labels returned by the GetPresentPhases method of the ICapeThermoMaterial
 interface. This latter condition will be satisfied if the phase is made present explicitly by
 calling the SetPresentPhases method or if any phase properties have been set by calling the
 SetSinglePhaseProp or SetTwoPhaseProp methods.
 A typical sequence of operations for CalcSinglePhaseProp when implemented by a Property
 Package component would be:
 - Check that the phaseLabel specified is valid.
 - Use the GetTPFraction method (of the Material Object specified in the last call to the
 SetMaterial method) to get the temperature, pressure and composition of the
 specified Phase.
 - Calculate the properties.
 - Store values for the properties of the Phase in the Material Object using the
 SetSinglePhaseProp method of the ICapeThermoMaterial interface.
 CalcSinglePhaseProp will request the input Property values it requires from the Material
 Object through GetSinglePhaseProp calls. If a requested property is not available, the
 exception raised will be ECapeThrmPropertyNotAvailable. If this error occurs then the
 Property Package can return it to the client, or request a different property. Material Object
 implementations must be able to supply property values using the client’s choice of basis by
 implementing conversion from one basis to another.
 Clients should not assume that Phase fractions and Compound fractions in a Material Object
 are normalised. Fraction values may also lie outside the range 0 to 1. If fractions are not
 normalised, or are outside the expected range, it is the responsibility of the Property Package
 to decide how to deal with the situation.
 It is recommended that properties are requested one at a time in order to simplify error
 handling. However, it is recognised that there are cases where the potential efficiency gains
 of requesting several properties simultaneously are more important. One such example
 might be when a property and its derivatives are required.
 If a client uses multiple properties in a call and one of them fails then the whole call should
 be considered to have failed. This implies that no value should be written back to the Material
 Object by the Property Package until it is known that the whole request can be satisfied.
 It is likely that a PME might request values of properties for a Phase at conditions of temperature,
 pressure and composition where the Phase does not exist (according to the
 mathematical/physical models used to represent properties). The exception
 ECapeThrmPropertyNotAvailable may be raised or an extrapolated value may be returned.
 It is responsibility of the implementer to decide how to handle this circumstance.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.CalcTwoPhaseProp(System.Object,System.Object)">
 <summary>
 CalcTwoPhaseProp is used to calculate mixture properties and property derivatives that depend on
 two Phases at the current values of temperature, pressure and composition set in the Material Object.
 It does not perform Equilibrium Calculations.
 </summary>
 <param name="props">The list of identifiers for properties to be calculated. This must be one or more 
 of the supported two-phase properties and derivatives (as given by the GetTwoPhasePropList method). 
 The standard identifiers for two-phase properties are given in section 7.5.6 and 7.6.</param>
 <param name="phaseLabels">Phase labels of the phases for which the properties are to be calculated. 
 The phase labels must be two of the strings returned by the GetPhaseList method on the ICapeThermoPhases 
 interface and the phases must also be present in the Material Object.</param>
 <remarks>CalcTwoPhaseProp calculates the values of properties such as surface tension or K-values.
 Properties that pertain to a single Phase are handled by the CalcSinglePhaseProp method of
 the ICapeThermoPropertyRoutine interface.Components that implement this method must
 get the input specification for the calculation (temperature, pressure and composition) from
 the associated Material Object and set the results in the Material Object.
 Components such as a Property Package or Property Calculator must implement the
 ICapeThermoMaterialContext interface so that an ICapeThermoMaterial interface can be
 passed via the SetMaterial method.
 The component that implements the ICapeThermoPropertyRoutine interface (e.g. a Property
 Package or Property Calculator) must also implement the ICapeThermoPhases interface so
 that it is possible to get a list of supported phases. The phaseLabels passed to this method
 must be in the list of phase labels returned by the GetPhaseList method of the
 ICapeThermoPhases interface and they must also be present in the Material Object, ie. in the
 list of phase labels returned by the GetPresentPhases method of the ICapeThermoMaterial
 interface. This latter condition will be satisfied if the phases are made present explicitly by
 calling the SetPresentPhases method or if any phase properties have been set by calling the
 SetSinglePhaseProp or SetTwoPhaseProp methods.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.CheckSinglePhasePropSpec(System.String,System.String)">
 <summary>
 Checks whether it is possible to calculate a property with the CalcSinglePhaseProp method for a given Phase.
 </summary>
 <param name="property">The identifier of the property to check. To be valid this must be one of the supported 
 single-phase properties or derivatives (as given by the GetSinglePhasePropList method).</param>
 <param name="phaseLabel">The Phase label for the calculation check. This must be one of the labels 
 returned by the GetPhaseList method on the ICapeThermoPhases interface.</param>
 <returns>Set to True if the combination of property and phaseLabel is supported or False if 
 not supported.</returns>
 <remarks>The result of the check should only depend on the capabilities and configuration
 (Compounds and Phases supported) of the component that implements the
 ICapeThermoPropertyRoutine interface (e.g. a Property Package). It should not depend on
 whether a Material Object has been set nor on the state (temperature, pressure, composition
 etc.), or configuration of a Material Object that might be set.
 It is expected that the PME, or other client, will use this method to check whether the properties
 it requires are supported by the Property Package when the package is imported. If any
 essential properties are not available, the import process should be aborted.
 If either the property or the phaseLabel arguments are not recognised by the component that
 implements the ICapeThermoPropertyRoutine interface this method should return False.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.CheckTwoPhasePropSpec(System.String,System.Object)">
 <summary>
 Checks whether it is possible to calculate a property with the CalcTwoPhaseProp method for a given set of Phases.
 </summary>
 <param name="property">The identifier of the property to check. To be valid this must be one of the supported 
 two-phase properties (including derivatives), as given by the GetTwoPhasePropList method.</param>
 <param name="phaseLabels">Phase labels of the Phases for which the properties are to be calculated. The Phase 
 labels must be two of the identifiers returned by the GetPhaseList method on the ICapeThermoPhases interface.</param>
 <returns>Set to True if the combination of property and phaseLabels is supported, or False if not supported.</returns>
 <remarks>The result of the check should only depend on the capabilities and configuration
 (Compounds and Phases supported) of the component that implements the
 ICapeThermoPropertyRoutine interface (e.g. a Property Package). It should not depend on
 whether a Material Object has been set nor on the state (temperature, pressure, composition
 etc.), or configuration of a Material Object that might be set.
 It is expected that the PME, or other client, will use this method to check whether the
 properties it requires are supported by the Property Package when the Property Package is
 imported. If any essential properties are not available, the import process should be aborted.
 If either the property argument or the values in the phaseLabels arguments are not
 recognised by the component that implements the ICapeThermoPropertyRoutine interface
 this method should return False.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetSinglePhasePropList">
 <summary>
 Returns the list of supported non-constant single-phase Physical Properties.
 </summary>
 <returns>List of all supported non-constant single-phase property identifiers. 
 The standard single-phase property identifiers are listed in section 7.5.5.</returns>
 <remarks>A non-constant property depends on the state of the Material Object.
 Single-phase properties, e.g. enthalpy, only depend on the state of one phase.
 GetSinglePhasePropList must return all the single-phase properties that can be calculated by
 CalcSinglePhaseProp. If derivatives can be calculated these must also be returned. The list
 of standard property identifiers in section 7.5.5 also contains properties such as temperature,
 pressure, fraction, phaseFraction, flow and totalFlow that are not usually calculated by the
 CalcSinglePhaseProp method and hence these property identifiers would not be returned by
 GetSinglePhasePropList. These properties would normally be used in calls to the
 Set/GetSinglePhaseProp methods of the ICapeThermoMaterial interface.
 If no single-phase properties are supported this method should return UNDEFINED.
 To get the list of supported two-phase properties, use GetTwoPhasePropList.
 A component that implements this method may return non-constant single-phase property
 identifiers which do not belong to the list defined in section 7.5.5. However, these
 proprietary identifiers may not be understood by most of the clients of this component.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetTwoPhasePropList">
 <summary>
 Returns the list of supported non-constant two-phase properties.
 </summary>
 <returns>List of all supported non-constant two-phase property identifiers. The standard two-phase 
 property identifiers are listed in section 7.5.6.</returns>
 <remarks>A non-constant property depends on the state of the Material Object. Two-phase properties
 are those that depend on more than one co-existing phase, e.g. K-values.
 GetTwoPhasePropList must return all the properties that can be calculated by
 CalcTwoPhaseProp. If derivatives can be calculated, these must also be returned.
 If no two-phase properties are supported this method should return UNDEFINED.
 To check whether a property can be evaluated for a particular set of phase labels use the
 CheckTwoPhasePropSpec method.
 A component that implements this method may return non-constant two-phase property
 identifiers which do not belong to the list defined in section 7.5.6. However, these
 proprietary identifiers may not be understood by most of the clients of this component.
 To get the list of supported single-phase properties, use GetSinglePhasePropList.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.CalcEquilibrium1(System.Object,System.Object,System.String)">
 <summary>
 CalcEquilibrium is used to calculate the amounts and compositions of Phases at equilibrium.
 CalcEquilibrium will calculate temperature and/or pressure if these are not among the two
 specifications that are mandatory for each Equilibrium Calculation considered.
 </summary>
 <param name="specification1">First specification for the Equilibrium Calculation. The 
 specification information is used to retrieve the value of the specification from the 
 Material Object. See below for details.</param>
 <param name="specification2">Second specification for the Equilibrium Calculation in 
 the same format as specification1.</param>
 <param name="solutionType">The identifier for the required solution type. The
 standard identifiers are given in the following list:
 Unspecified
 Normal
 Retrograde
 The meaning of these terms is defined below in the notes. Other identifiers may be supported 
 but their interpretation is not part of the CO standard.</param>
 <remarks>The specification1 and specification2 arguments provide the information necessary to
 retrieve the values of two specifications, for example the pressure and temperature, for the
 Equilibrium Calculation. The CheckEquilibriumSpec method can be used to check for
 supported specifications. Each specification variable contains a sequence of strings in the
 order defined in the following table (hence, the specification arguments may have 3 or 4
 items):
 
 item                        meaning
 
 property identifier         The property identifier can be any of the identifiers listed in section 7.5.5 but
                             only certain property specifications will normally be supported by any
                             Equilibrium Routine.
 
 basis                       The basis for the property value. Valid settings for basis are given in section
                             7.4. Use UNDEFINED as a placeholder for a property for which basis does
                             not apply. For most Equilibrium Specifications, the result of the calculation
                             is not dependent on the basis, but, for example, for phase fraction
                             specifications the basis (Mole or Mass) does make a difference.
 
 phase label                 The phase label denotes the Phase to which the specification applies. It must
                             either be one of the labels returned by GetPresentPhases, or the special value
                             “Overall”.
 
 compound identifier         The compound identifier allows for specifications that depend on a particular
                             Compound. This item of the specification array is optional and may be
                             omitted. In case of a specification without compound identifier, the array
                             element may be present and empty, or may be absent.
                             The values corresponding to the specifications in the argument list and the overall
                             composition of the mixture must be set in the associated Material Object before a call to
                             CalcEquilibrium.
 
 Components such as a Property Package or an Equilibrium Calculator must implement the
 ICapeThermoMaterialContext interface, so that an ICapeThermoMaterial interface can be
 passed via the SetMaterial method. It is the responsibility of the implementation of
 CalcEquilibrium to validate the Material Object before attempting a calculation.
 The Phases that will be considered in the Equilibrium Calculation are those that exist in the
 Material Object, i.e. the list of phases specified in a SetPresentPhases call. This provides a
 way for a client to specify whether, for example, a vapour-liquid, liquid-liquid, or vapourliquid-
 liquid calculation is required. CalcEquilibrium must use the GetPresentPhases method
 to retrieve the list of Phases and the associated Phase status flags. The Phase status flags may
 be used by the client to provide information about the Phases, for example whether estimates
 of the equilibrium state are provided. See the description of the GetPresentPhases and
 SetPresentPhases methods of the ICapeThermoMaterial interface for details. When the
 Equilibrium Calculation has been completed successfully, the SetPresentPhases method
 must be used to specify which Phases are present at equilibrium and the Phase status flags
 for the phases should be set to Cape_AtEquilibrium. This must include any Phases that are
 present in zero amount such as the liquid Phase in a dew point calculation.
 Some types of Phase equilibrium specifications may result in more than one solution. A
 common example of this is the case of a dew point calculation. However, CalcEquilibrium
 can provide only one solution through the Material Object. The solutionType argument
 allows the “Normal” or “Retrograde” solution to be explicitly requested. When none of the
 specifications includes a phase fraction, the solutionType argument should be set to
 “Unspecified”.
 
 CalcEquilibrium must set the amounts (phase fractions), compositions, temperature and
 pressure for all Phases present at equilibrium, as well as the temperature and pressure for the
 overall mixture if not set as part of the calculation specifications. It must not set any other
 values – in particular it must not set any values for phases that are not present.
 
 As an example, the following sequence of operations might be performed by
 CalcEquilibrium in the case of an Equilibrium Calculation at fixed pressure and temperature:
 
 - With the ICapeThermoMaterial interface of the supplied Material Object:
 
 -- Use the GetPresentPhases method to find the list of Phases that the Equilibrium
 Calculation should consider.
 
 -- With the ICapeThermoCompounds interface of the Material Object use the
 GetCompoundList method to find which Compounds are present.
 
 -- Use the GetOverallProp method to get the temperature, pressure and composition
 for the overall mixture.
 
 - Perform the Equilibrium Calculation.
 
 -- Use SetPresentPhases to specify the Phases present at equilibrium and set the
 Phase status flags to Cape_AtEquilibrium.
 
 -- Use SetSinglePhaseProp to set pressure, temperature, Phase amount (or Phase
 fraction) and composition for all Phases present.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.CheckEquilibriumSpec(System.Object,System.Object,System.String)">
 <summary>
 Checks whether the Property Package can support a particular type of Equilibrium Calculation.
 </summary>
 <param name="specification1">First specification for the Equilibrium Calculation.</param>
 <param name="specification2">Second specification for the Equilibrium Calculation.</param>
 <param name="solutionType">The required solution type.</param>
 <returns>Set to True if the combination of specifications and solutionType is supported 
 for a particular combination of present phases or False if not supported.</returns>
 <remarks>The meaning of the specification1, specification2 and solutionType arguments is the same as
 for the CalcEquilibrium method. If solutionType, specification1 and specification2
 arguments appear valid but the actual specifications are not supported or not recognised a
 False value should be returned.
 The result of the check should depend primarily on the capabilities and configuration
 (compounds and phases supported) of the component that implements the ICapeThermo-
 EquilibriumRoutine interface (egg. a Property package). A component that supports
 calculation specifications for any combination of supported phases is capable of checking
 the specification without any reference to a Material Object. However, it is possible that
 there may be restrictions on the combinations of phases supported in an equilibrium
 calculation. For example a component may support vapor-liquid and liquid-liquid
 calculations but not vapor-liquid-liquid calculations. In general it is therefore a necessary
 prerequisite that a Material Object has been set (using the SetMaterial method of the
 ICapeThermoMaterialContext interface) and that the SetPresentPhases method of the
 ICapeThermoMaterial interface has been called to specify the combination of phases for the
 equilibrium calculation. The result of the check should not depend on the state (temperature,
 pressure, composition etc.) of the Material Object.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetMaterial(System.Object)">
 <summary>
 Allows the client of a component that implements this interface to pass an ICapeThermoMaterial 
 interface to the component, so that it can access the properties of a Material.
 </summary>
 <param name="material">The Material interface.</param>
 <remarks>The SetMaterial method allows a Thermodynamic and Physical Properties component, such
 as a Property Package, to be given the ICapeThermoMaterial interface of a Material Object.
 This interface gives the component access to the description of the Material for which
 Property Calculations or Equilibrium Calculations are required. The component can access
 property values directly using this interface. A client can also use the ICapeThermoMaterial
 interface to query a Material Object for its ICapeThermoCompounds and ICapeThermo-
 Phases interfaces, which provide access to Compound and Phase information, respectively.
 It is envisaged that the SetMaterial method will be used to check that the Material Interface
 supplied is valid and useable. For example, a Property Package may check that there are
 some Compounds in a Material Object and that those Compounds can be identified by the
 Property Package. In addition a Property Package may perform any initialisation that
 depends on the configuration of a Material Object. A Property Calculator component might
 typically use this method to query the Material Object for any required information
 concerning the Compounds.
 Calling the UnsetMaterial method of the ICapeThermoMaterialContext interface has the
 effect of removing the interface set by the SetMaterial method.
 After a call to SetMaterial() has been received, the object implementing the ICapeThermo-
 MaterialContext interface can assume that the number, name and order of compounds for
 that Material Object will remain fixed until the next call to SetMaterial() or UnsetMaterial().</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.UnsetMaterial">
 <summary>
 Removes any previously set Material interface.
 </summary>
 <remarks>The UnsetMaterial method removes any Material interface previously set by a call to the
 SetMaterial method of the ICapeThermoMaterialContext interface. This means that any
 methods of other interfaces that depend on having a valid Material Interface, for example
 methods of the ICapeThermoPropertyRoutine or ICapeThermoEquilibriumRoutine
 interfaces, should behave in the same way as if the SetMaterial method had never been
 called.
 If UnsetMaterial is called before a call to SetMaterial it has no effect and no exception
 should be raised.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetTemperature(System.Double)">
 <summary>
 Sets stream temperature.
 </summary>
 <param name="value">Temperature in K</param>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetTemperature(System.String)">
 <summary>
 Sets the temperature according to the specified units.
 </summary>
 <param name="valuestring">value + units, i.e. '100 C'</param>
 <returns></returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetPressure(System.Double)">
 <summary>
 Sets stream pressure
 </summary>
 <param name="value">Pressure in Pa</param>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetPressure(System.String)">
 <summary>
 Sets the pressure according to the specified units.
 </summary>
 <param name="valuestring">value + units, i.e. '34 atm'</param>
 <returns></returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetMassEnthalpy(System.Double)">
 <summary>
 Sets stream enthalpy.
 </summary>
 <param name="value">Enthalpy in kJ/kg</param>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetMassEnthalpy(System.String)">
 <summary>
 Sets the mass enthalpy according with the specified units.
 </summary>
 <param name="valuestring">value + units, i.e. '2500 kJ/kg'</param>
 <returns></returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetMassEntropy(System.String)">
 <summary>
 Sets the mass entropy according with the specified units.
 </summary>
 <param name="valuestring">value + units, i.e. '10 kJ/[kg.K]'</param>
 <returns></returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetMassFlow(System.Double)">
 <summary>
 Sets stream mass flow.
 </summary>
 <param name="value">Flow in kg/s</param>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetMassFlow(System.String)">
 <summary>
 Sets the mass flow according to the specified units.
 </summary>
 <param name="valuestring">value + units, i.e. '100 kg/h'</param>
 <returns></returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetOverallCompoundMassFlow(System.String,System.Double)">
 <summary>
 Set the mass flow for a single compound and updates the overall mass flow and composition.
 </summary>
 <param name="compoundName">Name of the compound</param>
 <param name="flow">flow rate in kg/s</param>
 <remarks>The stream must be fully calculated before calling this function.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetOverallCompoundMassFlow(System.Int32,System.Double)">
 <summary>
 Set the mass flow for a single compound and updates the overall mass flow and composition.
 </summary>
 <param name="compoundIndex">Name of the compound</param>
 <param name="flow">flow rate in kg/s</param>
 <remarks>The stream must be fully calculated before calling this function.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetOverallCompoundMolarFlow(System.String,System.Double)">
 <summary>
 Set the molar flow for a single compound and updates the overall molar flow and composition.
 </summary>
 <param name="compoundName">Name of the compound</param>
 <param name="flow">flow rate in mol/s</param>
 <remarks>The stream must be fully calculated before calling this function.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetOverallCompoundMolarFlow(System.Int32,System.Double)">
 <summary>
 Set the molar flow for a single compound and updates the overall molar flow and composition.
 </summary>
 <param name="compoundIndex">Index of the compound</param>
 <param name="flow">flow rate in mol/s</param>
 <remarks>The stream must be fully calculated before calling this function.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.MoleFractionsToMassFractions(System.Double[])">
 <summary>
 Converts mole fractions to mass fractions using the current compound list.
 </summary>
 <param name="molefractions"></param>
 <returns></returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.MassFractionsToMoleFractions(System.Double[])">
 <summary>
 Converts mass fractions to mole fractions using the current compound list.
 </summary>
 <param name="massfractions"></param>
 <returns></returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetMassEnthalpy">
 <summary>
 Returns the overall mass enthalpy.
 </summary>
 <returns>Mass enthalpy in kJ/kg.</returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetMassEntropy">
 <summary>
 Returns the overall mass entropy.
 </summary>
 <returns>Mass entropy in kJ/[kg.K].</returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetTemperature">
 <summary>
 Returns the stream temperature.
 </summary>
 <returns>Temperature in K.</returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetPressure">
 <summary>
 Returns the stream pressure.
 </summary>
 <returns>Pressure in Pa.</returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetMassFlow">
 <summary>
 Returns the stream mass flow.
 </summary>
 <returns>Mass flow in kg/s.</returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetMolarFlow">
 <summary>
 Returns the stream molar flow.
 </summary>
 <returns>Molar flow in mol/s.</returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetVolumetricFlow">
 <summary>
 Returns the stream volumetric flow.
 </summary>
 <returns>Volumetric flow in m3/s.</returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetOverallMolecularWeight">
 <summary>
 Returns the molecular weight of the overall mixture.
 </summary>
 <returns>Molecular weight in kg/kmol.</returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetMolarFlow(System.Double)">
 <summary>
 Sets stream molar flow.
 </summary>
 <param name="value">Flow in mol/s</param>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetMolarFlow(System.String)">
 <summary>
 Sets the molar flow according to the specified units.
 </summary>
 <param name="valuestring">value + units, i.e. '100 kmol/h'</param>
 <returns></returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetVolumetricFlow(System.Double)">
 <summary>
 Sets stream volumetric flow.
 </summary>
 <param name="value">Flow in m3/s</param>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetVolumetricFlow(System.String)">
 <summary>
 Sets the volumetric flow according to the specified units.
 </summary>
 <param name="valuestring">value + units, i.e. '100 L/h'</param>
 <returns></returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.SetFlashSpec(System.String)">
 <summary>
 Sets stream flash spec.
 </summary>
 <param name="value">Flash Specification (PT, PH, PS, PVF, TVF, PSF, VT, VH or VS).</param>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.Mix(DWSIM.Thermodynamics.Streams.MaterialStream)">
 <summary>
 Mixes this stream with another one.  
 </summary>
 <param name="withstream">Stream to mix this one with.</param>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.Add(DWSIM.Thermodynamics.Streams.MaterialStream,System.Double)">
 <summary>
 Adds a material stream to this one, returning the resulting mixed stream, leaving this instance unmodifed.
 </summary>
 <param name="stream">Stream to be mixed with this one.</param>
 <param name="Factor">Flow multiplier for the stream to be mixed with this one. Default is 1.0.</param>
 <returns>The mixed stream.</returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.Subtract(DWSIM.Thermodynamics.Streams.MaterialStream,System.Double)">
 <summary>
 Subtracts a material stream contents from this one, returning a new stream object, leaving this instance unmodified.
 </summary>
 <param name="stream">Stream to subtract this one from.</param>
 <param name="Factor">Flow multiplier for the stream to subtract from this one. Default is 1.0.</param>
 <returns></returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.AssignFromPhase(DWSIM.Interfaces.Enums.PhaseLabel,DWSIM.Thermodynamics.Streams.MaterialStream,System.Boolean)">
 <summary>
 Assign properties from another phase in another stream.
 </summary>
 <param name="phase">Phase to assign proeprties from.</param>
 <param name="stream">Stream to read phase properties from.</param>
 <param name="SetW">True to set the overall mass flow from the other stream phase.</param>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.GetOverallHeatOfFormation">
 <summary>
 Returns the overall heat of formation term for energy balance check, in kJ/s
 </summary>
 <returns></returns>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.CopyCompositions(DWSIM.Interfaces.Enums.PhaseLabel,DWSIM.Interfaces.Enums.PhaseLabel)">
 <summary>
 Copy mass/mole fractions from one phase to another.
 </summary>
 <param name="fromphase">Phase to copy compositions from</param>
 <param name="tophase">Phase to copy compositions to</param>
</member>
<member name="M:DWSIM.Thermodynamics.Streams.MaterialStream.Empty">
 <summary>
 Clears all phase properties, including temperature, pressure and overall composition.
 </summary>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.DistillationCurveConversion.ASTMD86ToPEV_Riazi(System.Double[])">
 <summary>
 Converts ASTM D86 points to ASTM D2892 (TBP).
 </summary>
 <param name="Tastmd86">Temperatures of the D86 distillation curve, in K.</param>
 <returns>Temperatures of the TBP distillation curve, in K.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.DistillationCurveConversion.ASTMD2887ToPEV_Daubert(System.Double[])">
 <summary>
 Converts ASTM D2887 points to ASTM D2892 (TBP).
 </summary>
 <param name="Tastmd2887">Temperatures of the D2887 distillation curve, in K.</param>
 <returns>Temperatures of the TBP distillation curve, in K.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.DistillationCurveConversion.PEVsubToPEV_MaxwellBonnel(System.Double,System.Double,System.Double)">
 <summary>
 Converts sub-atmospheric TBP to atmospheric TBP curve.
 </summary>
 <param name="T">Temperature in K.</param>
 <param name="P">Pressure in Pa.</param>
 <param name="Kw">Watson K</param>
 <returns>TBP curve temperatures in K.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.DistillationCurveConversion.ASTMD1160ToPEVsub_Wauquier(System.Double[])">
 <summary>
 Converts ASTM D86 points to ASTM D2892 (TBP).
 </summary>
 <param name="Tastm">Temperatures of the D1160 distillation curve, in K.</param>
 <returns>Sub-atm TBP curve temperatures in K.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.Tc_RiaziDaubert(System.Double,System.Double)">
 <summary>
 Calculates the Critical Temperature of a petroleum fraction with Riazi-Daubert method (1985).
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Critical Temperature of the fraction, K.</returns>
 <remarks>Recommended for molecular weights between 70 and 300.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.Pc_RiaziDaubert(System.Double,System.Double)">
 <summary>
 Calculates Critical Pressure of a petroleum fraction with Riazi-Daubert method (1985).
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Critical Pressure of the fraction, Pa.</returns>
 <remarks>Recommended for molecular weights between 70 and 300.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.Tc_Riazi(System.Double,System.Double)">
 <summary>
 Calculates the Critical Temperature of a petroleum fraction with Riazi's method (2005).
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Critical Temperature of the fraction, K.</returns>
 <remarks>Recommended for molecular weights higher than 300.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.Tc_LeeKesler(System.Double,System.Double)">
 <summary>
 Calculates the Critical Temperature of a petroleum fraction with Lee-Kesler method (1976).
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Critical Temperature of the fraction, K.</returns>
 <remarks>Recommended method.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.Pc_LeeKesler(System.Double,System.Double)">
 <summary>
 Calculates Critical Pressure of a petroleum fraction with Lee-Kesler's method (1976).
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Critical Pressure of the fraction, Pa.</returns>
 <remarks>Recommended for molecular weights between 70 and 300.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.Tc_Farah(System.Double,System.Double)">
 <summary>
 Calculates the Critical Temperature of a petroleum fraction by the API-A/B method of Farah (2006)
 </summary>
 <param name="A">A-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="B">B-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <returns>Critical Temperature of the fraction, K.</returns>
 <remarks>Recommended for MW between 72 and 500 kg/kmol (Tc = 450~900 K, Pc = 680~4100x10³ Pa).</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.Tc_Farah(System.Double,System.Double,System.Double)">
 <summary>
 Calculates the Critical Temperature of a petroleum fraction by the API-A/B method of Farah (2006).
 </summary>
 <param name="A">A-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="B">B-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <returns>Critical Temperature of the fraction, K.</returns>
 <remarks>Recommended for MW between 72 and 500 kg/kmol (Tc = 450~900 K, Pc = 680~4100x10³ Pa).</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.Tc_Farah(System.Double,System.Double,System.Double,System.Double)">
 <summary>
 Calculates the Critical Temperature of a petroleum fraction by the API-A/B method of Farah (2006).
 </summary>
 <param name="A">A-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="B">B-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <returns>Critical Temperature of the fraction, K.</returns>
 <remarks>Recommended for MW between 72 and 500 kg/kmol (Tc = 450~900 K, Pc = 680~4100x10³ Pa).</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.Pc_Farah(System.Double,System.Double)">
 <summary>
 Calculates the Critical Pressure of a petroleum fraction by the API-A/B method of Farah (2006).
 </summary>
 <param name="A">A-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="B">B-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <returns>Critical Pressure of the fraction, Pa.</returns>
 <remarks>Recommended for MW between 72 and 500 kg/kmol (Tc = 450~900 K, Pc = 680~4100x10³ Pa).</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.Pc_Farah(System.Double,System.Double,System.Double)">
 <summary>
 Calculates the Critical Pressure of a petroleum fraction by the API-A/B method of Farah (2006).
 </summary>
 <param name="A">A-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="B">B-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <returns>Critical Pressure of the fraction, Pa.</returns>
 <remarks>Recommended for MW between 72 and 500 kg/kmol (Tc = 450~900 K, Pc = 680~4100x10³ Pa).</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.Pc_Farah(System.Double,System.Double,System.Double,System.Double)">
 <summary>
 Calculates the Critical Pressure of a petroleum fraction by the API-A/B method of Farah (2006).
 </summary>
 <param name="A">A-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="B">B-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <returns>Critical Pressure of the fraction, Pa.</returns>
 <remarks>Recommended for MW between 72 and 500 kg/kmol (Tc = 450~900 K, Pc = 680~4100x10³ Pa).</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.AcentricFactor_LeeKesler(System.Double,System.Double,System.Double)">
 <summary>
 Acentric Factor by the Lee-Kesler method (1976).
 </summary>
 <param name="Tc">Critical Temperature of the fraction, K.</param>
 <param name="Pc">Critical Pressure of the fraction, Pa.</param>
 <param name="PEMM">Molar Mean Boiling Point of the fraction, K.</param>
 <returns>Acentric Factor of the fraction.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.AcentricFactor_Korsten(System.Double,System.Double,System.Double)">
 <summary>
 Acentric Factor by Korsten's correlation (2000).
 </summary>
 <param name="Tc">Critical Temperature of the fraction, K.</param>
 <param name="Pc">Critical Pressure of the fraction, Pa.</param>
 <param name="PEMV">Volumetric Mean Boiling Point of the fraction, K.</param>
 <returns>Acentric Factor of the fraction.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.MW_Winn(System.Double,System.Double)">
 <summary>
 Winn's correlation (1957) for calculation of the molecular weight of petroleum fractions.
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Molecular weight of the fraction.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.MW_Riazi(System.Double,System.Double)">
 <summary>
 Riazi's correlation (1986) for calculation of the molecular weight of petroleum fractions.
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Molecular weight of the fraction.</returns>
 <remarks>For light and medium fractions (PEMe 36~560 °C, d15 0.9688~0.63).</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.MW_Riazi(System.Double,System.Double,System.Double)">
 <summary>
 Riazi's correlation (1986) for calculation of the molecular weight of petroleum fractions.
 </summary>
 <param name="v37">Kinematic viscosity of the fraction at 37.8 °C.</param>
 <param name="v98">Kinematic viscosity of the fraction at 98.9 °C.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Molecular weight of the fraction.</returns>
 <remarks>For heavy fractions.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.MW_LeeKesler(System.Double,System.Double)">
 <summary>
 Lee-Kesler correlation (1974) for calculation of the molecular weight of petroleum fractions.
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Molecular weight of the fraction.</returns>
 <remarks>For PEMe less than 750 K.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.MW_Farah(System.Double,System.Double)">
 <summary>
 API-A/B method by Farah (2006) for calculation of the molecular weight of petroleum fractions.
 </summary>
 <param name="A">A-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="B">B-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <returns>Critical Temperature of the fraction, K.</returns>
 <remarks>Recommended for MW between 72 and 500 kg/kmol.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.MW_Farah(System.Double,System.Double,System.Double,System.Double)">
 <summary>
 API-A/B method by Farah (2006) for calculation of the molecular weight of petroleum fractions.
 </summary>
 <param name="A">A-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="B">B-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <returns>Critical Temperature of the fraction, K.</returns>
 <remarks>Recommended for MW between 72 and 500 kg/kmol.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.Visc37_Abbott(System.Double,System.Double)">
 <summary>
 'Abbott's method (1971) for calculation of viscosity of petroleum fractions.
 </summary>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <returns>Kinematic viscosity at 37.8 °C, in m2/s.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.Visc98_Abbott(System.Double,System.Double)">
 <summary>
 'Abbott's method (1971) for calculation of viscosity of petroleum fractions.
 </summary>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <returns>Kinematic viscosity at 98.9 °C, in m2/s.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.ViscT_Beg_Amin(System.Double,System.Double,System.Double)">
 <summary>
 'Beg and Amin's method (1989) for calculation of viscosity of petroleum fractions.
 </summary>
 <param name="T">Temperature in Kelvin.</param>
 <param name="T50ASTM">Temperature relative to 50% vaporized in the ASTM D86 distillation curve.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Viscosity of the petroleum fraction at specified T, in m2/s.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.ViscWaltherASTM_A(System.Double,System.Double,System.Double,System.Double)">
 <summary>
 Calculates the A-parameter of the Walther-ASTM equation for viscosity of petroleum fractions.
 </summary>
 <param name="T1">Temperature relative to viscosity 1, in K.</param>
 <param name="v1">Kinematic viscosity at T1, in m2/s.</param>
 <param name="T2">Temperature relative to viscosity 2, in K.</param>
 <param name="v2">Kinematic viscosity at T2, in m2/s.</param>
 <returns>A-parameter of the Walther-ASTM equation.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.ViscWaltherASTM_B(System.Double,System.Double,System.Double,System.Double)">
 <summary>
 Calculates the B-parameter of the Walther-ASTM equation for viscosity of petroleum fractions.
 </summary>
 <param name="T1">Temperature relative to viscosity 1, in K.</param>
 <param name="v1">Kinematic viscosity at T1, in m2/s.</param>
 <param name="T2">Temperature relative to viscosity 2, in K.</param>
 <param name="v2">Kinematic viscosity at T2, in m2/s.</param>
 <returns>B-parameter of the Walther-ASTM equation.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.ViscTwu(System.Double,System.Double,System.Double,System.Double,System.Double)">
 <summary>
 Twu's method for calculation of viscosity at any temperature from two known values.
 </summary>
 <param name="T">Temperature in K.</param>
 <param name="T1">Temperature of viscosity 1, in K.</param>
 <param name="T2">Temperature of viscosity 2, in K.</param>
 <param name="v1">Kinematic viscosity 1, in m2/s.</param>
 <param name="v2">Kinematic viscosity 2, in m2/s.</param>
 <returns>Kinematic viscosity @ T, in m2/s.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.d15_v37v98(System.Double,System.Double)">
 <summary>
 Specific gravity at 15,6 °C from viscosity data.
 </summary>
 <param name="v37">Kinematic viscosity at 37,8 °C, in m2/s.</param>
 <param name="v98">Kinematic viscosity at 98,9 °C, in m2/s.</param>
 <returns>Specific gravity at 15,6 °C.</returns>
 <remarks>Author unknown.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.d20d15(System.Double)">
 <summary>
 Density conversion function.
 </summary>
 <param name="d15">d20</param>
 <returns>d20</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.d15d20(System.Double)">
 <summary>
 Density conversion function.
 </summary>
 <param name="d20">d20</param>
 <returns>d15</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.Utilities.PetroleumCharacterization.Methods.PropertyMethods.d15_Riazi(System.Double)">
 <summary>
 Specific gravity at 15,6 °C by Riazi and Al-Sahhaf's method (1996)
 </summary>
 <param name="MW">Molecular weight of the fraction.</param>
 <returns>Specific gravity at 15,6 °C.</returns>
 <remarks>For SCN groups.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.Tc_RiaziDaubert(System.Double,System.Double)">
 <summary>
 Calculates the Critical Temperature of a petroleum fraction with Riazi-Daubert method (1985).
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Critical Temperature of the fraction, K.</returns>
 <remarks>Recommended for molecular weights between 70 and 300.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.Pc_RiaziDaubert(System.Double,System.Double)">
 <summary>
 Calculates Critical Pressure of a petroleum fraction with Riazi-Daubert method (1985).
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Critical Pressure of the fraction, Pa.</returns>
 <remarks>Recommended for molecular weights between 70 and 300.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.Tc_Riazi(System.Double,System.Double)">
 <summary>
 Calculates the Critical Temperature of a petroleum fraction with Riazi's method (2005).
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Critical Temperature of the fraction, K.</returns>
 <remarks>Recommended for molecular weights higher than 300.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.Pc_Riazi(System.Double,System.Double)">
 <summary>
 Calculates Critical Pressure of a petroleum fraction with Riazi method (2005).
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Critical Pressure of the fraction, Pa.</returns>
 <remarks>Recommended for molecular weights between 70 and 300.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.Tc_LeeKesler(System.Double,System.Double)">
 <summary>
 Calculates the Critical Temperature of a petroleum fraction with Lee-Kesler method (1976).
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Critical Temperature of the fraction, K.</returns>
 <remarks>Recommended method.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.Pc_LeeKesler(System.Double,System.Double)">
 <summary>
 Calculates Critical Pressure of a petroleum fraction with Lee-Kesler's method (1976).
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Critical Pressure of the fraction, Pa.</returns>
 <remarks>Recommended for molecular weights between 70 and 300.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.Tc_Farah(System.Double,System.Double)">
 <summary>
 Calculates the Critical Temperature of a petroleum fraction by the API-A/B method of Farah (2006)
 </summary>
 <param name="A">A-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="B">B-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <returns>Critical Temperature of the fraction, K.</returns>
 <remarks>Recommended for MW between 72 and 500 kg/kmol (Tc = 450~900 K, Pc = 680~4100x10³ Pa).</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.Tc_Farah(System.Double,System.Double,System.Double)">
 <summary>
 Calculates the Critical Temperature of a petroleum fraction by the API-A/B method of Farah (2006).
 </summary>
 <param name="A">A-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="B">B-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <returns>Critical Temperature of the fraction, K.</returns>
 <remarks>Recommended for MW between 72 and 500 kg/kmol (Tc = 450~900 K, Pc = 680~4100x10³ Pa).</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.Tc_Farah(System.Double,System.Double,System.Double,System.Double)">
 <summary>
 Calculates the Critical Temperature of a petroleum fraction by the API-A/B method of Farah (2006).
 </summary>
 <param name="A">A-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="B">B-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <returns>Critical Temperature of the fraction, K.</returns>
 <remarks>Recommended for MW between 72 and 500 kg/kmol (Tc = 450~900 K, Pc = 680~4100x10³ Pa).</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.Pc_Farah(System.Double,System.Double)">
 <summary>
 Calculates the Critical Pressure of a petroleum fraction by the API-A/B method of Farah (2006).
 </summary>
 <param name="A">A-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="B">B-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <returns>Critical Pressure of the fraction, Pa.</returns>
 <remarks>Recommended for MW between 72 and 500 kg/kmol (Tc = 450~900 K, Pc = 680~4100x10³ Pa).</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.Pc_Farah(System.Double,System.Double,System.Double)">
 <summary>
 Calculates the Critical Pressure of a petroleum fraction by the API-A/B method of Farah (2006).
 </summary>
 <param name="A">A-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="B">B-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <returns>Critical Pressure of the fraction, Pa.</returns>
 <remarks>Recommended for MW between 72 and 500 kg/kmol (Tc = 450~900 K, Pc = 680~4100x10³ Pa).</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.Pc_Farah(System.Double,System.Double,System.Double,System.Double)">
 <summary>
 Calculates the Critical Pressure of a petroleum fraction by the API-A/B method of Farah (2006).
 </summary>
 <param name="A">A-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="B">B-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <returns>Critical Pressure of the fraction, Pa.</returns>
 <remarks>Recommended for MW between 72 and 500 kg/kmol (Tc = 450~900 K, Pc = 680~4100x10³ Pa).</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.AcentricFactor_LeeKesler(System.Double,System.Double,System.Double)">
 <summary>
 Acentric Factor by the Lee-Kesler method (1976).
 </summary>
 <param name="Tc">Critical Temperature of the fraction, K.</param>
 <param name="Pc">Critical Pressure of the fraction, Pa.</param>
 <param name="PEMM">Molar Mean Boiling Point of the fraction, K.</param>
 <returns>Acentric Factor of the fraction.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.AcentricFactor_Korsten(System.Double,System.Double,System.Double)">
 <summary>
 Acentric Factor by Korsten's correlation (2000).
 </summary>
 <param name="Tc">Critical Temperature of the fraction, K.</param>
 <param name="Pc">Critical Pressure of the fraction, Pa.</param>
 <param name="PEMV">Volumetric Mean Boiling Point of the fraction, K.</param>
 <returns>Acentric Factor of the fraction.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.MW_Winn(System.Double,System.Double)">
 <summary>
 Winn's correlation (1957) for calculation of the molecular weight of petroleum fractions.
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Molecular weight of the fraction.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.MW_Riazi(System.Double,System.Double)">
 <summary>
 Riazi's correlation (1986) for calculation of the molecular weight of petroleum fractions.
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Molecular weight of the fraction.</returns>
 <remarks>For light and medium fractions (PEMe 36~560 °C, d15 0.9688~0.63).</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.MW_Riazi(System.Double,System.Double,System.Double)">
 <summary>
 Riazi's correlation (1986) for calculation of the molecular weight of petroleum fractions.
 </summary>
 <param name="v37">Kinematic viscosity of the fraction at 37.8 °C.</param>
 <param name="v98">Kinematic viscosity of the fraction at 98.9 °C.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Molecular weight of the fraction.</returns>
 <remarks>For heavy fractions.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.MW_LeeKesler(System.Double,System.Double)">
 <summary>
 Lee-Kesler correlation (1974) for calculation of the molecular weight of petroleum fractions.
 </summary>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Molecular weight of the fraction.</returns>
 <remarks>For PEMe less than 750 K.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.MW_Farah(System.Double,System.Double)">
 <summary>
 API-A/B method by Farah (2006) for calculation of the molecular weight of petroleum fractions.
 </summary>
 <param name="A">A-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="B">B-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <returns>Critical Temperature of the fraction, K.</returns>
 <remarks>Recommended for MW between 72 and 500 kg/kmol.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.MW_Farah(System.Double,System.Double,System.Double,System.Double)">
 <summary>
 API-A/B method by Farah (2006) for calculation of the molecular weight of petroleum fractions.
 </summary>
 <param name="A">A-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="B">B-Parameter of the Walther-ASTM viscosity-temperature equation.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <returns>Critical Temperature of the fraction, K.</returns>
 <remarks>Recommended for MW between 72 and 500 kg/kmol.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.Visc37_Abbott(System.Double,System.Double)">
 <summary>
 'Abbott's method (1971) for calculation of viscosity of petroleum fractions.
 </summary>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <returns>Kinematic viscosity at 37.8 °C, in m2/s.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.Visc98_Abbott(System.Double,System.Double)">
 <summary>
 'Abbott's method (1971) for calculation of viscosity of petroleum fractions.
 </summary>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <param name="PEMe">Median Boiling Point of the fraction, K.</param>
 <returns>Kinematic viscosity at 98.9 °C, in m2/s.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.ViscT_Beg_Amin(System.Double,System.Double,System.Double)">
 <summary>
 'Beg and Amin's method (1989) for calculation of viscosity of petroleum fractions.
 </summary>
 <param name="T">Temperature in Kelvin.</param>
 <param name="T50ASTM">Temperature relative to 50% vaporized in the ASTM D86 distillation curve.</param>
 <param name="d15">Specific Gravity of the fraction at 15,6/15,6 °C.</param>
 <returns>Viscosity of the petroleum fraction at specified T, in m2/s.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.ViscWaltherASTM_A(System.Double,System.Double,System.Double,System.Double)">
 <summary>
 Calculates the A-parameter of the Walther-ASTM equation for viscosity of petroleum fractions.
 </summary>
 <param name="T1">Temperature relative to viscosity 1, in K.</param>
 <param name="v1">Kinematic viscosity at T1, in m2/s.</param>
 <param name="T2">Temperature relative to viscosity 2, in K.</param>
 <param name="v2">Kinematic viscosity at T2, in m2/s.</param>
 <returns>A-parameter of the Walther-ASTM equation.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.ViscWaltherASTM_B(System.Double,System.Double,System.Double,System.Double)">
 <summary>
 Calculates the B-parameter of the Walther-ASTM equation for viscosity of petroleum fractions.
 </summary>
 <param name="T1">Temperature relative to viscosity 1, in K.</param>
 <param name="v1">Kinematic viscosity at T1, in m2/s.</param>
 <param name="T2">Temperature relative to viscosity 2, in K.</param>
 <param name="v2">Kinematic viscosity at T2, in m2/s.</param>
 <returns>B-parameter of the Walther-ASTM equation.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.ViscTwu(System.Double,System.Double,System.Double,System.Double,System.Double)">
 <summary>
 Twu's method for calculation of viscosity at any temperature from two known values.
 </summary>
 <param name="T">Temperature in K.</param>
 <param name="T1">Temperature of viscosity 1, in K.</param>
 <param name="T2">Temperature of viscosity 2, in K.</param>
 <param name="v1">Kinematic viscosity 1, in m2/s.</param>
 <param name="v2">Kinematic viscosity 2, in m2/s.</param>
 <returns>Kinematic viscosity @ T, in m2/s.</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.d15_v37v98(System.Double,System.Double)">
 <summary>
 Specific gravity at 15,6 °C from viscosity data.
 </summary>
 <param name="v37">Kinematic viscosity at 37,8 °C, in m2/s.</param>
 <param name="v98">Kinematic viscosity at 98,9 °C, in m2/s.</param>
 <returns>Specific gravity at 15,6 °C.</returns>
 <remarks>Author unknown.</remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.d20d15(System.Double)">
 <summary>
 Density conversion function.
 </summary>
 <param name="d15">d20</param>
 <returns>d20</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.d15d20(System.Double)">
 <summary>
 Density conversion function.
 </summary>
 <param name="d20">d20</param>
 <returns>d15</returns>
 <remarks></remarks>
</member>
<member name="M:DWSIM.Thermodynamics.PetroleumCharacterization.Methods.PropertyMethods.d15_Riazi(System.Double)">
 <summary>
 Specific gravity at 15,6 °C by Riazi and Al-Sahhaf's method (1996)
 </summary>
 <param name="MW">Molecular weight of the fraction.</param>
 <returns>Specific gravity at 15,6 °C.</returns>
 <remarks>For SCN groups.</remarks>
</member>
<member name="P:DWSIM.Thermodynamics.WilsonModel.BIPs">
 <summary>
 Wilson Binary Interaction Parameters.
 First key is Compound 1 CAS ID
 Second key is Compound 2 CAS ID
 Value is a double array containing the A12 and A21 parameters in cal/mol
 </summary>
 <returns></returns>
</member>
</members>
</doc>
