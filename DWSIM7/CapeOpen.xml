<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CapeOpen</name>
    </assembly>
    <members>
        <member name="T:CapeOpen.PortConnectedHandler">
            <summary>
            Represents the method that will handle connecting an object to a unit port.
            </summary>
        </member>
        <member name="T:CapeOpen.IUnitPortEvents">
            <summary>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:CapeOpen.IUnitPortEvents.PortConnected(CapeOpen.UnitPort,CapeOpen.PortConnectedEventArgs)">
            <summary>
            Occurs when the user connects a new object to a unit port.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnPortConnected</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnPortConnected</c> in a derived class, be sure to call the base class's <c>OnPortConnected</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.UnitPort">CapeUnitPort</see> that raised the event.</param>
            <param name="args">A <see cref="T:CapeOpen.PortConnectedEventArgs">ParameterValueChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.IUnitPortEvents.PortDisconnected(CapeOpen.UnitPort,CapeOpen.PortDisconnectedEventArgs)">
            <summary>
            Occurs when the user disconnets a object from a unit port.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnPortDisconnected</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnPortDisconnected</c> in a derived class, be sure to call the base class's <c>OnPortDisconnected</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.UnitPort">CapeUnitPort</see> that raised the event.</param>
            <param name="args">A <see cref="T:CapeOpen.PortDisconnectedEventArgs">ParameterValueChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="T:CapeOpen.UnitPort">
            <summary>
            This class represents the behaviour of a Unit 
            Operation connection point (Unit Operation Port). It provides different 
            attributes for configuring the port as well as to connect 
            it to a material, energy or information object.
            </summary>
            <remarks>
            <para>
            The unit port provides the the means by which a Flowsheet Unit is connected to its streams. 
            Streams are implemented by means of material objects.
            </para>
            <para>
            The three types of port: material, energy and 
            information, have a lot of functionality in common. By combining the three into one we can simplify 
            the interface to a useful degree. Each port type is to be distinguished by the value of an attribute.
            </para>
            </remarks>
        </member>
        <member name="T:CapeOpen.CapeIdentification">
            <summary>
            Provides methods to identify and describe a CAPE-OPEN component.
            </summary>
            <remarks>
            <para>Allows the user to assign different names and descriptions to each 
            instance of a PMC in order to refer to them unambiguously and in a 
            user-friendly way. Since not always the software components that are able to 
            set these identifications and the software components that require this 
            information have been developed by the same vendor, a CAPE-OPEN standard for 
            setting and getting this information is required.</para>
            <para>Reference document: Identification Common Interface</para>
            </remarks>
        </member>
        <member name="T:CapeOpen.ICapeIdentification">
            <summary>
            Provides methods to identify and describe a CAPE-OPEN component.
            </summary>
            <remarks>
            <para>As illustration, we remind requirements coming from the existing interface 
            specification and being connected with the Identification concept:</para>
            <para>The Unit Operations Interfaces have the following requirements:</para>
            <para>* If a flowsheet contains two instances of a Unit Operation of a particular 
            class, the COSE needs to provide the user a textual identifier to distinguish each 
            of the instances. For instance, when the COSE requires to report about an error 
            occurred in one of the Unit Operations.</para>
            <para>* When the COSE shows the user its GUI to connect the COSE’s streams to the 
            Unit Operation ports, the COSE needs to request the Unit for its list of available 
            ports. For the user to identify the ports, the user needs some distinctive textual 
            information for each of them.</para>
            <para>* When the COSE exposes to the user its interfaces to browse or set the 
            value of an internal parameter of a Unit Operation, the COSE needs to request the 
            Unit for its list of available parameters. No matter if this COSE’s interface is 
            a GUI or a programming interface, each parameter must be identified by a textual 
            string.</para>
            <para>The ICapeThermoMaterialObject (used by both Unit and Thermo interfaces):</para>
            <para>* If a Unit Operation has encountered an error accessing a stream 
            (<see cref="T:CapeOpen.ICapeThermoMaterialObject">ICapeThermoMaterialObject</see>), the 
            Unit might decide to report it to the user. It would be desirable the stream to 
            have a textual identifier for the user to be able to quickly know which stream 
            failed.</para>
            <para>The Thermodynamic Interfaces have the following requirements:</para>
            <para>* The <see cref="T:CapeOpen.ICapeThermoSystem">ICapeThermoSystem</see>
            and the <see cref="T:CapeOpen.ICapeThermoPropertyPackage">ICapeThermoPropertyPackage</see> 
            interfaces don’t require an identification interface, since both of them have been 
            designed as singletons (a single instance of each component class is required). 
            That means that there is no need to identify this instance: its class description 
            would be enough. However, the user might decide anyway to assign a name or a 
            description to the CAPE-OPEN property systems or property packages used in her/his 
            flowsheet. Furthermore, if these interfaces evolve, the singleton approach could 
            be removed. In this case, identifying each instance will be a must.</para>
            <para>The Solvers Interfaces have the following requirements:</para>
            <para>* Many objects should provide the functionality coming from the 
            Identification Common Interface.</para>
            <para>The SMST Interfaces have the following requirements:</para>
            <para>* The CO SMST component package depends on the Identification Interface 
            package. The interface ICapeSMSTFactory must provide the Identification 
            capabilities.</para>
            <para>Reference document: Identification Common Interface</para>
            </remarks>
        </member>
        <member name="P:CapeOpen.ICapeIdentification.ComponentName">
            <summary>
            Gets and sets the name of the component.
            </summary>
            <remarks>
            <para>A particular Use Case in a system may contain several CAPE-OPEN components 
            of the same class. The user should be able to assign different names and 
            descriptions to each instance in order to refer to them unambiguously and in a 
            user-friendly way. Since not always the software components that are able to 
            set these identifications and the software components that require this information 
            have been developed by the same vendor, a CAPE-OPEN standard for setting and 
            getting this information is required.</para>
            <para>So, the component will not usually set its own name and description: the 
            user of the component will do it.</para>
            </remarks>
            <value>The unique name of the component.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.ICapeIdentification.ComponentDescription">
            <summary>
            Gets and sets the description of the component.
            </summary>
            <remarks>
            <para>A particular Use Case in a system may contain several CAPE-OPEN components 
            of the same class. The user should be able to assign different names and 
            descriptions to each instance in order to refer to them unambiguously and in a 
            user-friendly way. Since not always the software components that are able to 
            set these identifications and the software components that require this information 
            have been developed by the same vendor, a CAPE-OPEN standard for setting and 
            getting this information is required.</para>
            <para>So, the component will not usually set its own name and description: the 
            user of the component will do it.</para>
            </remarks>
            <value>The description of the component.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeIdentification.#ctor">
            <summary>Creates an instance of the CapeIdentification class with the name and description of the PMC.</summary>
            <remarks>You can use this constructor to specify a 
            specific the name of the PMC.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeIdentification.#ctor(System.String)">
            <summary>Creates an instance of the CapeIdentification class with the name and description of the PMC.</summary>
            <remarks>You can use this constructor to specify a 
            specific the name of the PMC.
            </remarks>
            <param name = "name">The name of the PMC.</param>
        </member>
        <member name="M:CapeOpen.CapeIdentification.#ctor(System.String,System.String)">
            <summary>Creates an instance of the CapeIdentification class with the name and description of the PMC.</summary>
            <remarks>You can use this constructor to specify a 
            specific the name and description of the PMC.
            </remarks>
            <param name = "name">The name of the PMC.</param>
            <param name = "description">The description of the PMC.</param>
        </member>
        <member name="M:CapeOpen.CapeIdentification.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies the collection that the value of a proparty of the parameter has been changed.
            </summary>
        </member>
        <member name="M:CapeOpen.CapeIdentification.OnComponentNameChanged(CapeOpen.NameChangedEventArgs)">
            <summary>
            Occurs when the user changes of the description of a component.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnComponentNameChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnComponentNameChanged</c> in a derived class, be sure to call the base class's <c>OnComponentNameChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.NameChangedEventArgs">NameChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.CapeIdentification.OnComponentDescriptionChanged(CapeOpen.DescriptionChangedEventArgs)">
            <summary>
            Occurs when the user changes of the description of a component.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnComponentDescriptionChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnComponentDescriptionChanged</c> in a derived class, be sure to call the base class's <c>OnComponentDescriptionChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.DescriptionChangedEventArgs">DescriptionChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="E:CapeOpen.CapeIdentification.PropertyChanged">
            <summary>
            Notifies the collection that the value of a proparty of the parameter has been changed.
            </summary>
        </member>
        <member name="E:CapeOpen.CapeIdentification.ComponentNameChanged">
            <summary>
            Occurs when the user changes of the name of a component.
            </summary>
            <remarks>The event to be handles when the name of the PMC is changed.</remarks> 
        </member>
        <member name="E:CapeOpen.CapeIdentification.ComponentDescriptionChanged">
            <summary>
            Occurs when the user changes of the description of a component.
            </summary>
            <remarks>The event to be handles when the description of the PMC is changed.</remarks> 
        </member>
        <member name="P:CapeOpen.CapeIdentification.ComponentName">
            <summary>
            Gets and sets the name of the component.
            </summary>
            <remarks>
            <para>A particular Use Case in a system may contain several CAPE-OPEN components 
            of the same class. The user should be able to assign different names and 
            descriptions to each instance in order to refer to them unambiguously and in a 
            user-friendly way. Since not always the software components that are able to 
            set these identifications and the software components that require this information 
            have been developed by the same vendor, a CAPE-OPEN standard for setting and 
            getting this information is required.</para>
            <para>So, the component will not usually set its own name and description: the 
            user of the component will do it.</para>
            </remarks>
            <value>The unique name of the component.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.CapeIdentification.ComponentDescription">
            <summary>
             Gets and sets the description of the component.
            </summary>
            <remarks>
            <para>A particular Use Case in a system may contain several CAPE-OPEN components 
            of the same class. The user should be able to assign different names and 
            descriptions to each instance in order to refer to them unambiguously and in a 
            user-friendly way. Since not always the software components that are able to 
            set these identifications and the software components that require this information 
            have been developed by the same vendor, a CAPE-OPEN standard for setting and 
            getting this information is required.</para>
            <para>So, the component will not usually set its own name and description: the 
            user of the component will do it.</para>
            </remarks>
            <value>The description of the component.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ICapeUnitPort">
            <summary>
            This interface represents the behaviour of a Unit 
            Operation connection point (Unit Operation Port). It provides different 
            attributes for configuring the port as well as to connect 
            it to a material, energy or information object.
            </summary>
            <remarks>
            <para>
            The unit port provides the the means by which a Flowsheet Unit is connected to its streams. 
            Streams are implemented by means of material objects.
            </para>
            <para>
            The three types of port: material, energy and 
            information, have a lot of functionality in common. By combining the three into one we can simplify 
            the interface to a useful degree. Each port type is to be distinguished by the value of an attribute.
            </para>
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeUnitPort.Connect(System.Object)">
            <summary>
            Connects an object to the port. For a material port it must 
            be an object implementing the ICapeThermoMaterialObject interface, 
            for Energy and Information ports it must be an object implementing 
            the ICapeParameter interface. 
            </summary>
            <remarks>
            Method used by clients, when they request that a Port connect itself with the object 
            that is passed in as argument of the method. Probably, before accepting the connection, 
            a Port will check that the Object sent as argument is of the expected type and 
            according to the value of its attribute portType.
            </remarks>
            <param name="objectToConnect">The object to connect to the port.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapeUnitPort.Disconnect">
            <summary>
            Disconnects whatever object is connected to this port.
            </summary>
            <remarks>
            <para>Disconnects the port from whichever object is connected to it.</para>
            <para>There are no input or output arguments for this method.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.ICapeUnitPort.portType">
            <summary>
            Returns port type.
            </summary>
            <remarks>
            Returns the type of this port. Allowed types are among 
            the ones included in the CapePortType type.
            </remarks>
            <value>The type of the port.</value>
            <see cref="T:CapeOpen.CapePortType">CapePortType</see>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
        </member>
        <member name="P:CapeOpen.ICapeUnitPort.direction">
            <summary>
            Returns port direction.
            </summary>
            <remarks>
            Returns the direction in which the object connected to this 
            port is expected to flow. Allowed values are among those included 
            in the CapePortDirection type.
            </remarks>
            <value>The direction of the port.</value>
            <see cref="T:CapeOpen.CapePortDirection">CapePortDirection</see>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
        </member>
        <member name="P:CapeOpen.ICapeUnitPort.connectedObject">
            <summary>
            Returns to the client the object that is connected to this port.
            </summary>
            <remarks>
            Returns the object that is connected to the Port. A client is provided with the 
            Material, Energy or Information object that was previously connected to the Port, 
            using the Connect method.
            </remarks>
            <value>The object connected to the port.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
        </member>
        <member name="M:CapeOpen.UnitPort.#ctor(System.String,System.String,CapeOpen.CapePortDirection,CapeOpen.CapePortType)">
            <summary>
            Initializes a new instance of the <see cref="T:CapeOpen.UnitPort"/> class.
            </summary>
            <param name="Name"><see cref="P:CapeOpen.ICapeIdentification.ComponentName"/> of the <see cref="T:CapeOpen.UnitPort"/>.</param>
            <param name="Description"><see cref="P:CapeOpen.ICapeIdentification.ComponentDescription"/> of the <see cref="T:CapeOpen.UnitPort"/>.</param>
            <param name="Direction"><see cref="T:CapeOpen.CapePortDirection"/> of the <see cref="T:CapeOpen.UnitPort"/></param>
            <param name="Type"><see cref="T:CapeOpen.CapePortType"/> of the <see cref="T:CapeOpen.UnitPort"/></param>
        </member>
        <member name="M:CapeOpen.UnitPort.OnPortConnected(CapeOpen.PortConnectedEventArgs)">
            <summary>
            Occurs when the user connects a new object to the port.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnPortConencted</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnPortConencted</c> in a derived class, be sure to call the base class's <c>OnPortConnected</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.PortConnectedEventArgs">PortConnectedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.UnitPort.OnPortDisconnected(CapeOpen.PortDisconnectedEventArgs)">
            <summary>
            Occurs when the user disconnects an object from the port.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnPortDisconencted</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnPortDisconencted</c> in a derived class, be sure to call the base class's <c>OnPortConnected</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.PortDisconnectedEventArgs">PortDisconnectedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.UnitPort.Connect(System.Object)">
            <summary>
            Connects an object to the port. For a material port it must 
            be an object implementing the ICapeThermoMaterialObject interface, 
            for Energy and Information ports it must be an object implementing 
            the ICapeParameter interface. 
            </summary>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.UnitPort.Disconnect">
            <summary>
            Disconnects whatever object is connected to this port.
            </summary>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.UnitPort.Disconnect(System.Boolean)">
            <summary>
            Disconnects whatever object is connected to this port.
            </summary>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="E:CapeOpen.UnitPort.PortConnected">
            <summary>
            Occurs when the user connects a new object to the port.
            </summary>
        </member>
        <member name="E:CapeOpen.UnitPort.PortDisconnected">
            <summary>
            Occurs when the user disconnects an object from the port.
            </summary>
        </member>
        <member name="P:CapeOpen.UnitPort.portType">
            <summary>
            <para> Returns the type of this port and allows the developer to change 
            the port type (allowed types are among the ones included in the CapePortType type.</para>
            </summary>
            <see cref="T:CapeOpen.CapePortType">CapePortType</see> 
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
        </member>
        <member name="P:CapeOpen.UnitPort.direction">
            <summary>
            Returns the direction of this port and allows the developer to change 
            the port direction. Allowed values are among those included 
            in the CapePortDirection type).
            </summary>
            <see cref="T:CapeOpen.CapePortDirection">CapePortDirection</see>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
        </member>
        <member name="P:CapeOpen.UnitPort.connectedObject">
            <summary>
            Returns to the client the object that is connected to this port.
            </summary>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
        </member>
        <member name="T:CapeOpen.CapeParamType">
            <summary>
            Gets the type of the parameter for which this is a specification: 
            </summary>
            <remarks>
               double-precision Real (CAPE_REAL),
               integer(CAPE_INT),
               String (or option)(CAPE_OPTION), 
               boolean(CAPE_BOOLEAN)
               array(CAPE_ARRAY)
            Reference document: Parameter Common Interface
            </remarks>
        </member>
        <member name="F:CapeOpen.CapeParamType.CAPE_REAL">
            <summary>
            Double-precision real-valued parameter
            </summary>
            <value>0</value>
        </member>
        <member name="F:CapeOpen.CapeParamType.CAPE_INT">
            <summary>
            Integer-valued parameter
            </summary>
        </member>
        <member name="F:CapeOpen.CapeParamType.CAPE_OPTION">
            <summary>
            String/option parameter
            </summary>
        </member>
        <member name="F:CapeOpen.CapeParamType.CAPE_BOOLEAN">
            <summary>
            Boolean-valued parameter
            </summary>
        </member>
        <member name="F:CapeOpen.CapeParamType.CAPE_ARRAY">
            <summary>
            Array parameter
            </summary>
        </member>
        <member name="T:CapeOpen.CapeParamMode">
            <summary>
            Modes of parameters.
            </summary>
            <remarks>
            <para> It allows the following values:</para>
            <para>   (i)   Input (CAPE_INPUT): the Unit(or whichever owner component)</para>
            <para>         will use its value to calculate.</para>
            <para>   (ii)  Output (CAPE_OUTPUT): the Unit will place in the parameter</para>
            <para>         a result of its calculations.</para>
            <para>   (iii) Input-Output (CAPE_INPUT_OUTPUT): the user inputs an initial</para>
            <para>         estimation value and the user outputs a calculated value.</para>
            Reference document: Parameter Common Interface
            </remarks>
        </member>
        <member name="F:CapeOpen.CapeParamMode.CAPE_INPUT">
            <summary>
            The Unit(or whichever owner component) will use the parameter's value as an 
            input to its calculation.
            </summary>
        </member>
        <member name="F:CapeOpen.CapeParamMode.CAPE_OUTPUT">
            <summary>
            The Unit(or whichever owner component) will set the parameter's value as 
            an output to its calculation.
            </summary>
        </member>
        <member name="F:CapeOpen.CapeParamMode.CAPE_INPUT_OUTPUT">
            <summary>
            The Unit(or whichever owner component) will use the parameter's initial value as 
            an estimate and will calculate the final value.
            </summary>
        </member>
        <member name="T:CapeOpen.ICapeParameterSpec">
            <remarks>
            Reference document: Parameter Common Interface
            </remarks>
        </member>
        <member name="P:CapeOpen.ICapeParameterSpec.Type">
            <summary>
            Gets the type of the parameter. 
            </summary>
            <remarks>
            Gets the <see cref="T:CapeOpen.CapeParamType"/> of the parameter for which this is a specification: real 
            (CAPE_REAL), integer(CAPE_INT), option(CAPE_OPTION), boolean(CAPE_BOOLEAN) 
            or array(CAPE_ARRAY).
            </remarks>
            <value>The parameter type. </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeParameterSpec.Dimensionality">
            <summary>
            Gets the dimensionality of the parameter.
            </summary>
            <remarks>
            <para>Gets the dimensionality of the parameter for which this is the 
            specification. The dimensionality represents the physical dimensional 
            axes of this parameter. It is expected that the dimensionality must cover 
            at least 6 fundamental axes (length, mass, time, angle, temperature and 
            charge). A possible implementation could consist in being a constant 
            length array vector that contains the exponents of each basic SI unit, 
            following directives of SI-brochure (from http://www.bipm.fr/). So if we 
            agree on order &lt;m kg s A K,&gt; ... velocity would be 
            &lt;1,0,-1,0,0,0&gt;: that is m1 * s-1 =m/s. We have suggested to the 
            CO Scientific Committee to use the SI base units plus the SI derived units 
            with special symbols (for a better usability and for allowing the 
            definition of angles).</para>
            </remarks>
            <value>an integer array indicating the exponents of the various dimensional axes.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="T:CapeOpen.ICapeRealParameterSpec">
            <summary>
            This interface is for a parameter specification when the 
            parameter has a double-precision floating point value.
            </summary>
        </member>
        <member name="M:CapeOpen.ICapeRealParameterSpec.Validate(System.Double,System.String@)">
            <summary>
            Validates the value against the specification of the parameter.
            The message is used to return the reason that the parameter is invalid.
            </summary>
            <remarks>
            The parameter is considered valid if the current value is between 
            the upper and lower bound. The message is used to return the reason 
            that the parameter is invalid.
            </remarks>
            <returns>
            True if the parameter is valid, false if not valid.
            </returns>
            <param name="value">Integer value that will be validated against the parameter's current specification.</param>
            <param name="message">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeRealParameterSpec.DefaultValue">
            <summary>
            Gets the default value of the parameter.
            </summary>
            <remarks>
            A default value for the parameter.
            </remarks>
            <value>
            The default value of the parameter.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeRealParameterSpec.LowerBound">
            <summary>
            Gets the lower bound of the parameter.
            </summary>
            <remarks>
            A lower bound value for the parameter.
            </remarks>
            <value>
            The lower bound of the parameter.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeRealParameterSpec.UpperBound">
            <summary>
            Gets the upper bound of the parameter.
            </summary>
            <remarks>
            A upper bound value for the parameter.
            </remarks>
            <value>
            The upper bound of the parameter.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="T:CapeOpen.ICapeIntegerParameterSpec">
            <summary>
            This interface is for a parameter specification
            when the parameter is an integer value.
            </summary>
        </member>
        <member name="M:CapeOpen.ICapeIntegerParameterSpec.Validate(System.Int32,System.String@)">
            <summary>
            Validates the value sent against the specification of the parameter. 
            </summary>
            <remarks>
            The parameter is considered valid if the current value is between 
            the upper and lower bound. The message is used to return the reason 
            that the parameter is invalid.
            </remarks>
            <returns>
            True if the parameter is valid, false if not valid.
            </returns>
            <param name="value">Integer value that will be validated against the parameter's current specification.</param>
            <param name="message">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeIntegerParameterSpec.DefaultValue">
            <summary>
            Gets the default value of the parameter.
            </summary>
            <remarks>
            A default value for the parameter.
            </remarks>
            <value>
            The default value of the parameter.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeIntegerParameterSpec.LowerBound">
            <summary>
            Gets the lower bound of the parameter.
            </summary>
            <remarks>
            A lower bound value for the parameter.
            </remarks>
            <value>
            The lower bound of the parameter.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeIntegerParameterSpec.UpperBound">
            <summary>
            Gets the upper bound of the parameter.
            </summary>
            <remarks>
            A upper bound value for the parameter.
            </remarks>
            <value>
            The upper bound of the parameter.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="T:CapeOpen.ICapeOptionParameterSpec">
            <summary>
            This interface is for a parameter specification
            when the parameter is an option, which represents
            a list of strings from which one is selected.
            </summary>
        </member>
        <member name="M:CapeOpen.ICapeOptionParameterSpec.Validate(System.String,System.String@)">
            <summary>
            Validates the value against the parameter's specification.
            </summary>
            <remarks>
            If the value of the <see cref="P:CapeOpen.ICapeOptionParameterSpec.RestrictedToList">RestrictedToList</see>
            is set to <c>true</c>, the value is valid is valid value for the 
            parameter if it is included in the 
            <see cref="P:CapeOpen.ICapeOptionParameterSpec.OptionList">OptionList</see>. If the 
            value of <see cref="P:CapeOpen.ICapeOptionParameterSpec.RestrictedToList">RestrictedToList</see> is <c>false</c>
            any valid String is a valid value for the parameter.
            </remarks>
            <returns>
            True if the parameter is valid, false if not valid.
            </returns>
            <param name="value">A candidate value for the parameter to be tested to determine whether the value is valid.</param>
            <param name="message">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeOptionParameterSpec.DefaultValue">
            <summary>
            Gets the default value of the parameter.
            </summary>
            <remarks>
            A default string value for the parameter.
            </remarks>
            <value>
            The default value of the parameter.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeOptionParameterSpec.OptionList">
            <summary>
            Gets the list of valid values for the parameter if 'RestrictedtoList' property is true.
            </summary>
            <remarks>
            Used in validating the parameter if the <see cref="P:CapeOpen.ICapeOptionParameterSpec.RestrictedToList">RestrictedToList</see>
            is set to <c>true</c>.
            </remarks>
            <value>
            String array as a System.Object, COM Variant containing a SafeArray of BSTR.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeOptionParameterSpec.RestrictedToList">
            <summary>
            A list of Strings that the valueo f the parameter will be validated against.
            </summary>
            <remarks>
            If <c>true</c>, the parameter's value will be validated against the Strings
            in the <see cref="P:CapeOpen.ICapeOptionParameterSpec.OptionList">OptionList</see>.
            </remarks>
            <value>
            Converted by COM interop to a COM-based CAPE-OPEN VARIANT_BOOL.
            </value>
        </member>
        <member name="T:CapeOpen.ICapeBooleanParameterSpec">
            <summary>
            This interface is for a parameter specification when the parameter is a boolean
            </summary>
        </member>
        <member name="M:CapeOpen.ICapeBooleanParameterSpec.Validate(System.Boolean,System.String@)">
            <summary>
            Validates the value sent against the specification of the parameter.
            </summary>
            <remarks>
            Validates whether the argument is accepted by the parameter as a valid value. 
            It returns a flag to indicate the success or failure of the validation together 
            with a text message which can be used to convey the reasoning to the client/user.
            </remarks>
            <returns>
            True if the parameter is valid, false if not valid.
            </returns>
            <param name="value">Boolean value that will be validated against the parameter's current specification.</param>
            <param name="message">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeBooleanParameterSpec.DefaultValue">
            <summary>
            Gets the default value of the parameter.
            </summary>
            <remarks>
            Gets the default value of the parameter.
            </remarks>
            <value>
            The default value of the parameter.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="T:CapeOpen.ICapeArrayParameterSpec">
            <summary>
            This interface is for a parameter specification
            when the parameter is an array of values (maybebe integers,reals,
            booleans or arrays again, which represents.
            </summary>
        </member>
        <member name="M:CapeOpen.ICapeArrayParameterSpec.Validate(System.Object,System.Object@)">
            <summary>
            Validates the value against the specification of the parameter.
            The message is used to return the reason that the parameter is invalid.
            </summary>
            <remarks>
            This method checks the current value of the parameter to determine if it is an allowed value. 
            </remarks>
            <returns>
            True if the parameter is valid, false if not valid.
            </returns>
            <param name="inputArray">The message is used to return the reason that the parameter is invalid.</param>
            <param name="value">A string array containing the message is used to return the reason that the parameter is invalid.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeArrayParameterSpec.NumDimensions">
            <summary>
            Get the number of dimensions of the array.
            </summary>
            <remarks>
            The number of dimensions of the paramater array. 
            </remarks>
            <value>
            The number of dimensions of the array.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeArrayParameterSpec.Size">
            <summary>
            Gets the size of each one of the dimensions of the array.
            </summary>
            <remarks>
            An array containing the specfication of each member of the paramater array. 
            </remarks>
            <returns>
            The size of each dimension of the array.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeArrayParameterSpec.ItemsSpecifications">
            <summary>
            Gets an array of the specifications of each of the items in the 
            value of a parameter.
            </summary>
            <remarks>
            ﻿An array of interfaces to the correct specification type (<see cref="T:CapeOpen.ICapeRealParameterSpec"/> ,
            <see cref="T:CapeOpen.ICapeIntegerParameterSpec"/> , <see cref="T:CapeOpen.ICapeBooleanParameterSpec"/> , 
            <see cref="T:CapeOpen.ICapeOptionParameterSpec"/> ). Note that it is also possible, for 
            example, to configure an array of arrays of integers, which would a similar 
            but not identical concept to a two-dimensional matrix of integers.
            </remarks>
            <returns>
            An array of <see cref="T:CapeOpen.ICapeParameterSpec"/> objects.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="T:CapeOpen.ICapeParameter">
            <summary>
            Interface defining the actual Parameter quantity.
            </summary>
        </member>
        <member name="M:CapeOpen.ICapeParameter.Validate(System.String@)">
            <summary>
            Validates the current value of the parameter against the 
            specification of the parameter.
            </summary>
            <remarks>
            This method checks the current value of the parameter to determine if it is an allowed value. In the case of 
            numeric parameters (<see cref="T:CapeOpen.ICapeRealParameterSpec"/> and <see cref="T:CapeOpen.ICapeIntegerParameterSpec"/>),
            the value is valid if it is between the upper and lower bound. For String (<see cref="T:CapeOpen.ICapeOptionParameterSpec"/>),
            if the <see cref="P:CapeOpen.ICapeOptionParameterSpec.RestrictedToList"/> property is true, the value must be included as one of the
            members of the <see cref="P:CapeOpen.ICapeOptionParameterSpec.OptionList"/>. Otherwise, any string value is valid. Any boolean value (true/false) 
            valid for the <see cref="T:CapeOpen.ICapeBooleanParameterSpec"/> paramaters.
            </remarks>
            <returns>
            True if the parameter is valid, false if not valid.
            </returns>
            <param name="message">The message is used to return the reason that the parameter is invalid.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapeParameter.Reset">
            <summary>
            Sets the value of the parameter to its default value.
            </summary>
            <remarks>
            This method sets the parameter to its default value.
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.ICapeParameter.Specification">
            <summary>
            Gets the Specification for this Parameter
            </summary>
            <remarks>
            Gets the specification of the parameter. The Get method returns the 
            specification as an interface to the correct specification type.
            </remarks>
            <value>
            An object implementing the <see cref="T:CapeOpen.ICapeParameterSpec"/>, as well as the
            appropraite specification for the parameter type, <see cref="T:CapeOpen.ICapeRealParameterSpec"/> ,
            <see cref="T:CapeOpen.ICapeIntegerParameterSpec"/> , <see cref="T:CapeOpen.ICapeBooleanParameterSpec"/> , 
            <see cref="T:CapeOpen.ICapeOptionParameterSpec"/> , or <see cref="T:CapeOpen.ICapeArrayParameterSpec"/> .
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeParameter.value">
            <summary>
            Gets and sets the value for this Parameter
            </summary>
            <remarks>
            Gets and sets the value of this parameter. Passed as a CapeVariant that 
            should be the same type as the Parameter type.
            </remarks>
            <value>
            The boxed value of the parameter.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeParameter.ValStatus">
            <summary>
            Gets the flag to indicate parameter validation's status.
            </summary>
            <remarks>
            <para>Gets the flag to indicate parameter validation status. It has three 
            possible values:</para>
            <para>   (i)   notValidated(CAPE_NOT_VALIDATED): The PMC's <c>Validate()</c>
            method has not been called after the last time that its value had been 
            changed.</para>
            <para>   (ii)  invalid(CAPE_INVALID): The last time that the PMC's 
            <c>Validate()</c> method was called it returned false.</para>
            <para>   (iii) valid(CAPE_VALID): the last time that the PMC's
            Validate() method was called it returned true.</para>
            </remarks>
            <value>The validity staus of the parameter, either valid, invalid, or "not validated".</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeParameter.Mode">
            <summary>
            Gets and sets the mode of the parameter.
            </summary>
            <remarks>
            <para>Modes of parameters. It allows the following values:</para>
            <para>   (i)   Input (CAPE_INPUT): the Unit(or whichever owner component) will use 
            its value to calculate.</para>
            <para>   (ii)  Output (CAPE_OUTPUT): the Unit will place in the parameter a result 
            of its calculations.</para>
            <para>   (iii) Input-Output (CAPE_INPUT_OUTPUT): the user inputs an 
            initial estimation value and the user outputs a calculated value.</para>
            </remarks>
            <value>The mode of the parameter, input, output, or input/output.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="T:CapeOpen.ICapeParameterEvents">
            <summary>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeParameterEvents.ParameterValueChanged(System.Object,System.Object)">
            <summary>
            Occurs when the user changes of the value of a paramter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnComponentNameChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterValueChanged</c> in a derived class, be sure to call the base class's <c>OnParameterValueChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="M:CapeOpen.ICapeParameterEvents.ParameterValueChanged(System.Object,System.Object)">ParameterValueChanged</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.ICapeParameterEvents.ParameterModeChanged(System.Object,System.Object)">
            <summary>
            Occurs when the user changes of the mode of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterModeChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterModeChanged</c> in a derived class, be sure to call the base class's <c>OnParameterModeChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="T:CapeOpen.ParameterModeChangedEventArgs">ParameterModeChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.ICapeParameterEvents.ParameterValidated(System.Object,System.Object)">
            <summary>
            Occurs when a parameter is validated.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterValidated</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterValidated</c> in a derived class, be sure to call the base class's <c>OnParameterValidated</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="T:CapeOpen.ParameterValidatedEventArgs">ParameterValidatedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.ICapeParameterEvents.ParameterReset(System.Object,System.Object)">
            <summary>
            Occurs when the user resets a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterReset</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterReset</c> in a derived class, be sure to call the base class's <c>OnParameterReset</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="T:CapeOpen.ParameterResetEventArgs">ParameterResetEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="T:CapeOpen.IATCapeXRealParameterSpec">
             <summary>
             Aspen interface for providing dimension for a real-valued parameter.
            </summary>
             <remarks>
             <para>
             Aspen Plus does not use the <see cref="P:CapeOpen.ICapeParameterSpec.Dimensionality">ICapeParameterSpec.Dimensionality</see> method. Instead a parameter
             can implement the IATCapeXRealParameterSpec interface which can be used to define the
             display unit for a parameter value. 
             </para>
             </remarks>
        </member>
        <member name="P:CapeOpen.IATCapeXRealParameterSpec.DisplayUnits">
            <summary>
            Gets the default value of the parameter.
            </summary>
            <remarks>
            <para>DisplayUnits defines the unit of measurement symbol for a parameter.</para>
            <para>Note: The symbol must be one of the uppercase strings recognized by Aspen
            Plus to ensure that it can perform unit of measurement conversions on the 
            parameter value. The system converts the parameter's value from SI units for
            display in the data browser and converts updated values back into SI.
            </para>
            </remarks>
            <value>
            Defines the display unit for the parameter.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ParameterValueChangedHandler">
            <summary>
            Represents the method that will handle the changing of the value of a parameter.
            </summary>
        </member>
        <member name="T:CapeOpen.IParameterValueChangedEventArgs">
            <summary>
            Provides data for the value changed event associated with the parameters.
            </summary>
            <remarks>
            The IParameterValueChangedEventArgs interface specifies the old and new value of the parameter.
            </remarks>
        </member>
        <member name="P:CapeOpen.IParameterValueChangedEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
        </member>
        <member name="P:CapeOpen.IParameterValueChangedEventArgs.OldValue">
            <summary>
            The value of the parameter prior to the change.</summary>
            <remarks>The former value of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The value of the parameter prior to the change.</value>
        </member>
        <member name="P:CapeOpen.IParameterValueChangedEventArgs.NewValue">
            <summary>
            The value of the parameter after the change.</summary>
            <remarks>The new nvalue of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The value of the parameter after the change.</value>
        </member>
        <member name="T:CapeOpen.ParameterValueChangedEventArgs">
            <summary>
            Provides data for the value changed event associated with the parameters.
            </summary>
            <remarks>
            The ParameterValueChangedEventArgs event specifies the old and new value of the parameter.
            </remarks>
        </member>
        <member name="M:CapeOpen.ParameterValueChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>Creates an instance of the ParameterValueChangedEventArgs class with the old and parameter value.</summary>
            <remarks>You can use this constructor when raising the ParameterValueChangedEvent at run time to specify a 
            specific the parameter having its value changed.
            </remarks>
            <param name = "paramName">The name of the parameter being changed.</param>
            <param name = "oldValue">The name of the PMC prior to the name change.</param>
            <param name = "newValue">The name of the PMC after the name change.</param>
        </member>
        <member name="P:CapeOpen.ParameterValueChangedEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
            <value>The name of the parameter being changed.</value>
        </member>
        <member name="P:CapeOpen.ParameterValueChangedEventArgs.OldValue">
            <summary>
            The value of the parameter prior to the name change.</summary>
            <remarks>The former value of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The value of the parameter prior to the change.</value>
        </member>
        <member name="P:CapeOpen.ParameterValueChangedEventArgs.NewValue">
            <summary>
            The value of the parameter after the change.</summary>
            <remarks>The new name of the unit can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The value of the parameter after the change.</value>
        </member>
        <member name="T:CapeOpen.ParameterDefaultValueChangedHandler">
            <summary>
            Represents the method that will handle the changing of the default value of a parameter.
            </summary>
        </member>
        <member name="T:CapeOpen.IParameterDefaultValueChangedEventArgs">
            <summary>
            Provides data for the value changed event associated with the parameters.
            </summary>
            <remarks>
            The IParameterDefaultValueChangedEventArgs interface specifies the old and new default value of the parameter.
            </remarks>
        </member>
        <member name="P:CapeOpen.IParameterDefaultValueChangedEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
        </member>
        <member name="P:CapeOpen.IParameterDefaultValueChangedEventArgs.OldDefaultValue">
            <summary>
            The default value of the parameter prior to the change.</summary>
            <remarks>The default value of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The default value of the parameter prior to the change.</value>
        </member>
        <member name="P:CapeOpen.IParameterDefaultValueChangedEventArgs.NewDefaultValue">
            <summary>
            The default value of the parameter  after the name change.</summary>
            <remarks>The new default value of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The default value of the parameter after the change.</value>
        </member>
        <member name="T:CapeOpen.ParameterDefaultValueChangedEventArgs">
            <summary>
            Provides data for the value changed event associated with the parameters.
            </summary>
            <remarks>
            The ParameterDefaultValueChangedEventArgs event specifies the old and new default value of the parameter.
            </remarks>
        </member>
        <member name="M:CapeOpen.ParameterDefaultValueChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>Creates an instance of the ParameterDefaultValueChangedEventArgs class with the old and new default values.</summary>
            <remarks>You can use this constructor when raising the ParameterDefaultValueChangedEventArgs at run time to specify  
            that the default value of the parameter has changed.
            </remarks>
            <param name = "paramName">The name of the parameter being changed.</param>
            <param name = "oldDefaultValue">The default value of the parameter prior to the change.</param>
            <param name = "newDefaultValue">The default value of the parameter after the change.</param>
        </member>
        <member name="P:CapeOpen.ParameterDefaultValueChangedEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
            <value>The name of the parameter being changed.</value>
        </member>
        <member name="P:CapeOpen.ParameterDefaultValueChangedEventArgs.OldDefaultValue">
            <summary>
            The name of the PMC prior to the name change.</summary>
            <remarks>The former name of the unit can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The default of the parameter prior to the change.</value>
        </member>
        <member name="P:CapeOpen.ParameterDefaultValueChangedEventArgs.NewDefaultValue">
            <summary>
            The default value of the parameter after the name change.</summary>
            <remarks>The new default value for the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The default value of the parameter after the change.</value>
        </member>
        <member name="T:CapeOpen.ParameterLowerBoundChangedHandler">
            <summary>
            Represents the method that will handle the changing of the lower bound of a parameter.
            </summary>
        </member>
        <member name="T:CapeOpen.IParameterLowerBoundChangedEventArgs">
            <summary>
            Provides data for the value changed event associated with the parameters.
            </summary>
            <remarks>
            The IParameterLowerBoundChangedEventArgs interface specifies the old and new lower bound of the parameter.
            </remarks>
        </member>
        <member name="P:CapeOpen.IParameterLowerBoundChangedEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
        </member>
        <member name="P:CapeOpen.IParameterLowerBoundChangedEventArgs.OldLowerBound">
            <summary>
            The lower bound of the parameter prior to the change.</summary>
            <remarks>The former lower bound of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The lower bound of the parameter prior to the change.</value>
        </member>
        <member name="P:CapeOpen.IParameterLowerBoundChangedEventArgs.NewLowerBound">
            <summary>
            The lower bound of the parameter after to the change.</summary>
            <remarks>The former lower bound of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The lower bound of the parameter after to the change.</value>
        </member>
        <member name="T:CapeOpen.ParameterLowerBoundChangedEventArgs">
            <summary>
            Provides data for the value changed event associated with the parameters.
            </summary>
            <remarks>
            The ParameterLowerBoundChangedEventArgs event specifies the old and new lower bound of the parameter.
            </remarks>
        </member>
        <member name="M:CapeOpen.ParameterLowerBoundChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>Creates an instance of the ParameterLowerBoundChangedEventArgs class with the old and new lower bound for the parameter.</summary>
            <remarks>You can use this constructor when raising the ParameterLowerBoundChangedEvent at run time to specify that 
            the lower bound of the parameter has changed.
            </remarks>
            <param name = "paramName">The name of the parameter being changed.</param>
            <param name = "oldLowerBound">The name of the PMC prior to the name change.</param>
            <param name = "newLowerBound">The name of the PMC after the name change.</param>
        </member>
        <member name="P:CapeOpen.ParameterLowerBoundChangedEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
            <value>The name of the parameter being changed.</value>
        </member>
        <member name="P:CapeOpen.ParameterLowerBoundChangedEventArgs.OldLowerBound">
            <summary>
            The lower bound of the parameter prior to the change.</summary>
            <remarks>The former lower bound of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The lower bound of the parameter prior to the change.</value>
        </member>
        <member name="P:CapeOpen.ParameterLowerBoundChangedEventArgs.NewLowerBound">
            <summary>
            The lower bound of the parameter after the change.</summary>
            <remarks>The new lower bound of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The lower bound of the parameter after the change.</value>
        </member>
        <member name="T:CapeOpen.ParameterUpperBoundChangedHandler">
            <summary>
            Represents the method that will handle the changing of the upper bound of a parameter.
            </summary>
        </member>
        <member name="T:CapeOpen.IParameterUpperBoundChangedEventArgs">
            <summary>
            Provides data for the upper bound changed event associated with the parameters.
            </summary>
            <remarks>
            The IParameterUpperBoundChangedEventArgs interface specifies the old and new lower bound of the parameter.
            </remarks>
        </member>
        <member name="P:CapeOpen.IParameterUpperBoundChangedEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
        </member>
        <member name="P:CapeOpen.IParameterUpperBoundChangedEventArgs.OldUpperBound">
            <summary>
            The upper bound of the parameter prior to the change.</summary>
            <remarks>The former upper bound of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The upper bound of the parameter prior to the change.</value>
        </member>
        <member name="P:CapeOpen.IParameterUpperBoundChangedEventArgs.NewUpperBound">
            <summary>
            The upper bound of the parameter after to the change.</summary>
            <remarks>The former upper bound of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The upper bound of the parameter after to the change.</value>
        </member>
        <member name="T:CapeOpen.ParameterUpperBoundChangedEventArgs">
            <summary>
            Provides data for the upper bound changed event associated with the parameters.
            </summary>
            <remarks>
            The ParameterUpperBoundChangedEventArgs event specifies the old and new lower bound of the parameter.
            </remarks>
        </member>
        <member name="M:CapeOpen.ParameterUpperBoundChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>Creates an instance of the ParameterUpperBoundChangedEventArgs class with the old and new upper bound for the parameter.</summary>
            <remarks>You can use this constructor when raising the ParameterUpperBoundChangedEvent at run time to specify 
            that the upper bound of the parameter has changed.
            </remarks>
            <param name = "paramName">The name of the parameter being changed.</param>
            <param name = "oldUpperBound">The upper bound of the parameter prior to the change.</param>
            <param name = "newUpperBound">The upper bound of the parameter after the change.</param>
        </member>
        <member name="P:CapeOpen.ParameterUpperBoundChangedEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
            <value>The name of the parameter being changed.</value>
        </member>
        <member name="P:CapeOpen.ParameterUpperBoundChangedEventArgs.OldUpperBound">
            <summary>
            The upper bound of the parameter prior to the change.</summary>
            <remarks>The former upper bound of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The upper bound of the parameter prior to the change.</value>
        </member>
        <member name="P:CapeOpen.ParameterUpperBoundChangedEventArgs.NewUpperBound">
            <summary>
            The upper bound of the parameter after the change.</summary>
            <remarks>The new upper bound of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The upper bound of the parameter after the change.</value>
        </member>
        <member name="T:CapeOpen.ParameterModeChangedHandler">
            <summary>
            Represents the method that will handle the changing of the mode of a parameter.
            </summary>
        </member>
        <member name="T:CapeOpen.IParameterModeChangedEventArgs">
            <summary>
            Provides data for the mode changed event associated with the parameters.
            </summary>
            <remarks>
            The IParameterModeChangedEventArgs interface specifies the old and new mode of the parameter.
            </remarks>
        </member>
        <member name="P:CapeOpen.IParameterModeChangedEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
        </member>
        <member name="P:CapeOpen.IParameterModeChangedEventArgs.OldMode">
            <summary>
            The mode of the parameter prior to the change.</summary>
            <remarks>The former mode of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The mode of the parameter prior to the change.</value>
        </member>
        <member name="P:CapeOpen.IParameterModeChangedEventArgs.NewMode">
            <summary>
            The mode of the parameter after to the change.</summary>
            <remarks>The former mode of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The mode of the parameter after to the change.</value>
        </member>
        <member name="T:CapeOpen.ParameterModeChangedEventArgs">
            <summary>
            Provides data for the mode changed event associated with the parameters.
            </summary>
            <remarks>
            The ParameterModeChangedEventArgs event specifies the old and new mode of the parameter.
            </remarks>
        </member>
        <member name="M:CapeOpen.ParameterModeChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>Creates an instance of the ParameterModeChangedEventArgs class with the old and new upper bound for the parameter.</summary>
            <remarks>You can use this constructor when raising the ParameterModeChangedEvent at run time to specify 
            that the mode of the parameter has changed.
            </remarks>
            <param name = "paramName">The name of the parameter being changed.</param>
            <param name = "oldMode">The mode of the parameter prior to the change.</param>
            <param name = "newMode">The mode of the parameter after the change.</param>
        </member>
        <member name="P:CapeOpen.ParameterModeChangedEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
            <value>The name of the parameter being changed.</value>
        </member>
        <member name="P:CapeOpen.ParameterModeChangedEventArgs.OldMode">
            <summary>
            The mode of the parameter prior to the change.</summary>
            <remarks>The former mode of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The mode of the parameter prior to the change.</value>
        </member>
        <member name="P:CapeOpen.ParameterModeChangedEventArgs.NewMode">
            <summary>
            The mode of the parameter after the change.</summary>
            <remarks>The new mode of the parameter can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The mode of the parameter after the change.</value>
        </member>
        <member name="T:CapeOpen.ParameterValidatedHandler">
            <summary>
            Represents the method that will handle the validation of a parameter.
            </summary>
        </member>
        <member name="T:CapeOpen.IParameterValidatedEventArgs">
            <summary>
            The parameter was validated.
            </summary>
            <remarks>
            Provides information about the validation of the parameter.
            </remarks>
        </member>
        <member name="P:CapeOpen.IParameterValidatedEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
        </member>
        <member name="P:CapeOpen.IParameterValidatedEventArgs.Message">
            <summary>
            The message reulting from the parameter validation.</summary>
            <remarks>The message provides information about the results of the validation process.</remarks>
            <value>Information regrading the validation process.</value>
        </member>
        <member name="P:CapeOpen.IParameterValidatedEventArgs.OldStatus">
            <summary>
            The validation status of the parameter prior to the validation.</summary>
            <remarks>Informs the user of the results of the validation process.</remarks>
            <value>The validation status of the parameter prior to the validation.</value>
        </member>
        <member name="P:CapeOpen.IParameterValidatedEventArgs.NewStatus">
            <summary>
            The validation status of the parameter after the validation.</summary>
            <remarks>Informs the user of the results of the validation process.</remarks>
            <value>The validation status of the parameter after the validation.</value>
        </member>
        <member name="T:CapeOpen.ParameterValidatedEventArgs">
            <summary>
            The parameter was validated.
            </summary>
            <remarks>
            Provides information about the validation of the parameter.
            </remarks>
        </member>
        <member name="M:CapeOpen.ParameterValidatedEventArgs.#ctor(System.String,System.String,CapeOpen.CapeValidationStatus,CapeOpen.CapeValidationStatus)">
            <summary>Creates an instance of the ParameterValidatedEventArgs class for the parameter.</summary>
            <remarks>You can use this constructor when raising the ParameterValidatedEventArgs at run time to  
            the message about the parameter validation.
            </remarks>
            <param name = "paramName">The name of the parameter being changed.</param>
            <param name = "message">The message indicating the results of the parameter validation.</param>
            <param name = "oldStatus">The status of the parameter prior to validation.</param>
            <param name = "newStatus">The status of the parameter after the validation.</param>
        </member>
        <member name="P:CapeOpen.ParameterValidatedEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
            <value>The name of the parameter being changed.</value>
        </member>
        <member name="P:CapeOpen.ParameterValidatedEventArgs.Message">
            <summary>
            The message reulting from the parameter validation.</summary>
            <remarks>The message provides information about the results of the validation process.</remarks>
            <value>Information regrading the validation process.</value>
        </member>
        <member name="P:CapeOpen.ParameterValidatedEventArgs.OldStatus">
            <summary>
            The validation status of the parameter prior to the validation.</summary>
            <remarks>Informs the user of the results of the validation process.</remarks>
            <value>The validation status of the parameter prior to the validation.</value>
        </member>
        <member name="P:CapeOpen.ParameterValidatedEventArgs.NewStatus">
            <summary>
            The validation status of the parameter after the validation.</summary>
            <remarks>Informs the user of the results of the validation process.</remarks>
            <value>The validation status of the parameter after the validation.</value>
        </member>
        <member name="T:CapeOpen.ParameterResetHandler">
            <summary>
            Represents the method that will handle the resetting of a parameter.
            </summary>
        </member>
        <member name="T:CapeOpen.IParameterResetEventArgs">
            <summary>
            The parameter was reset.
            </summary>
            <remarks>
            The parameter was reset.
            </remarks>
        </member>
        <member name="P:CapeOpen.IParameterResetEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
        </member>
        <member name="T:CapeOpen.ParameterResetEventArgs">
            <summary>
            The parameter was reset.
            </summary>
            <remarks>
            The parameter was reset.
            </remarks>
        </member>
        <member name="M:CapeOpen.ParameterResetEventArgs.#ctor(System.String)">
            <summary>Creates an instance of the ParameterResetEventArgs class for the parameter.</summary>
            <remarks>You can use this constructor when raising the ParameterResetEventArgs at run time to  
            inform the system that the parameter was reset.
            </remarks>
        </member>
        <member name="P:CapeOpen.ParameterResetEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
            <value>The name of the parameter being changed.</value>
        </member>
        <member name="T:CapeOpen.ParameterOptionListChangedHandler">
            <summary>
            Represents the method that will handle the changing of the option list of a parameter.
            </summary>
        </member>
        <member name="T:CapeOpen.IParameterOptionListChangedEventArgs">
            <summary>
            The parameter was reset.
            </summary>
            <remarks>
            The parameter was reset.
            </remarks>
        </member>
        <member name="P:CapeOpen.IParameterOptionListChangedEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
        </member>
        <member name="T:CapeOpen.ParameterOptionListChangedEventArgs">
            <summary>
            The parameter option list was changed.
            </summary>
            <remarks>
            The parameter option list was changed.
            </remarks>
        </member>
        <member name="M:CapeOpen.ParameterOptionListChangedEventArgs.#ctor(System.String)">
            <summary>Creates an instance of the ParameterOptionListChangedEventArgs class for the parameter.</summary>
            <remarks>You can use this constructor when raising the ParameterOptionListChangedEventArgs at run time to  
            inform the system that the parameter's option list was changed.
            </remarks>
        </member>
        <member name="P:CapeOpen.ParameterOptionListChangedEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
            <value>The name of the parameter being changed.</value>
        </member>
        <member name="T:CapeOpen.IParameterRestrictedToListChangedEventArgs">
            <summary>
            The restiction to the options list of a parameter was changed.
            </summary>
            <remarks>
            The restiction to the options list of a parameter was changed.
            </remarks>
        </member>
        <member name="P:CapeOpen.IParameterRestrictedToListChangedEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
        </member>
        <member name="T:CapeOpen.ParameterRestrictedToListChangedEventArgs">
            <summary>
            The parameter restiction to the option list was changed.
            </summary>
            <remarks>
            The parameter restiction to the option list was changed.
            </remarks>
        </member>
        <member name="M:CapeOpen.ParameterRestrictedToListChangedEventArgs.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>Creates an instance of the ParameterRestrictedToListChangedEventArgs class for the parameter.</summary>
            <remarks>You can use this constructor when raising the ParameterRestrictedToListChangedEventArgs at run time to  
            inform the system that the parameter's option list was changed.
            </remarks>
        </member>
        <member name="P:CapeOpen.ParameterRestrictedToListChangedEventArgs.ParameterName">
            <summary>
            The name of the parameter being changed.</summary>
            <value>The name of the parameter being changed.</value>
        </member>
        <member name="P:CapeOpen.ParameterRestrictedToListChangedEventArgs.IsRestricted">
            <summary>
            Is the parameter vlue restricted to the list?.</summary>
            <value>Is the parameter vlue restricted to the list?.</value>
        </member>
        <member name="P:CapeOpen.ParameterRestrictedToListChangedEventArgs.WasRestricted">
            <summary>
            Was the parameter vlue restricted to the list?.</summary>
            <value>Was the parameter vlue restricted to the list?.</value>
        </member>
        <member name="T:CapeOpen.ParameterRestrictedToListChangedHandler">
            <summary>
            Represents the method that will handle the changing of whether a paratemer's value is restricted to those in the option list.
            </summary>
        </member>
        <member name="T:CapeOpen.CollectionDisposedHandler">
            <summary>
            Represents the method that will handle the disposal of a collection.
            </summary>
        </member>
        <member name="T:CapeOpen.PropertyPackageChangedHandler">
            <summary>
            Represents the method that will handle the changing of a property package used in a PMC.
            </summary>
        </member>
        <member name="T:CapeOpen.SimulationContextChangedHandler">
            <summary>
            Represents the method that will handle the changing of the simualtion context of a PMC.
            </summary>
        </member>
        <member name="T:CapeOpen.KineticReactionsChangedHandler">
            <summary>
            Represents the method that will handle the changing of the Kinetic Reaction Chemistry of a PMC.
            </summary>
        </member>
        <member name="T:CapeOpen.EquilibriumReactionsChangedHandler">
            <summary>
            Represents the method that will handle the changing of the Equilibrium Reaction Chemistry of a PMC.
            </summary>
        </member>
        <member name="T:CapeOpen.CapeParameter">
            <summary>
            Base Class defining the actual Parameter quantity.
            </summary>
        </member>
        <member name="F:CapeOpen.CapeParameter.m_ValStatus">
            <summary>
            The flag to indicate parameter validation's status.
            </summary>
            <remarks>
            <para>The flag to indicate parameter validation status. It has three 
            possible values:</para>
            <para>   (i)   notValidated(CAPE_NOT_VALIDATED): The PMC's <c>Validate()</c>
            method has not been called after the last time that its value had been 
            changed.</para>
            <para>   (ii)  invalid(CAPE_INVALID): The last time that the PMC's 
            <c>Validate()</c> method was called it returned false.</para>
            <para>   (iii) valid(CAPE_VALID): the last time that the PMC's
            Validate() method was called it returned true.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeParameter.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the abstract parameter base class. 
            </summary>
            <remarks>
            The mode is set to CapeParamMode.CAPE_INPUT_OUTPUT. 
            </remarks>
            <param name = "name">Sets as the ComponentName of the parameter's ICapeIdentification interface.</param>
            <param name = "description">Sets as the ComponentDescription of the parameter's ICapeIdentification interface.</param>
        </member>
        <member name="M:CapeOpen.CapeParameter.OnParameterValidated(CapeOpen.ParameterValidatedEventArgs)">
            <summary>
            Occurs when a parameter is validated.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterValidated</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterValidated</c> in a derived class, be sure to call the base class's <c>OnParameterValidated</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.ParameterValidatedEventArgs">ParameterValidatedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.CapeParameter.OnParameterValueChanged(CapeOpen.ParameterValueChangedEventArgs)">
            <summary>
            Occurs when the user changes of the value of a paramter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnComponentNameChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterValueChanged</c> in a derived class, be sure to call the base class's <c>OnParameterValueChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="M:CapeOpen.CapeParameter.OnParameterValueChanged(CapeOpen.ParameterValueChangedEventArgs)">OnParameterValueChanged</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.CapeParameter.OnParameterModeChanged(CapeOpen.ParameterModeChangedEventArgs)">
            <summary>
            Occurs when the user changes of the mode of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterModeChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterModeChanged</c> in a derived class, be sure to call the base class's <c>OnParameterModeChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.ParameterModeChangedEventArgs">ParameterModeChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.CapeParameter.Validate(System.String@)">
            <summary>
            Validates the current value of the parameter against the 
            specification of the parameter. 
            </summary>
            <remarks>
            The parameter is considered valid if the current value is 
            between the upper and lower bound. The message is used to 
            return the reason that the parameter is invalid. This function also
            sets the CapeValidationStatus of the parameter based upon the results
            of the validation.
            </remarks>
            <returns>
            True if the parameter is valid, false if not valid.
            </returns>
            <param name="message">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.CapeParameter.OnParameterReset(CapeOpen.ParameterResetEventArgs)">
            <summary>
            Occurs when the user resets a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterReset</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterReset</c> in a derived class, be sure to call the base class's <c>OnParameterReset</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.ParameterResetEventArgs">ParameterResetEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.CapeParameter.Reset">
            <summary>
            Sets the value of the parameter to its default value.
            </summary>
            <remarks>
             This method sets the parameter's value to the default value.
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="E:CapeOpen.CapeParameter.ParameterValidated">
            <summary>
            Occurs when the user validates the parameter.
            </summary>
        </member>
        <member name="P:CapeOpen.CapeParameter.CapeOpen#ICapeParameter#Specification">
            <summary>
            Gets the Specification for this Parameter.
            </summary>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="E:CapeOpen.CapeParameter.ParameterValueChanged">
            <summary>
            Occurs when the user changes of the value of the parameter changes.
            </summary>
        </member>
        <member name="P:CapeOpen.CapeParameter.CapeOpen#ICapeParameter#value">
            <summary>
            Gets and sets the value for this Parameter.
            </summary>
            <remarks>
            This value uses the System.Object data type for compatibility with 
            COM-based CAPE-OPEN.
            </remarks>
            <returns>System.Object</returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.CapeParameter.CapeOpen#ICapeParameterSpec#Dimensionality">
            <summary>
            Gets the dimensionality of the parameter.
            </summary>
            <remarks>
            <para>Gets the dimensionality of the parameter for which this is the 
            specification. The dimensionality represents the physical dimensional 
            axes of this parameter. It is expected that the dimensionality must cover 
            at least 6 fundamental axes (length, mass, time, angle, temperature and 
            charge). A possible implementation could consist in being a constant 
            length array vector that contains the exponents of each basic SI unit, 
            following directives of SI-brochure (from http://www.bipm.fr/). So if we 
            agree on order &lt;m kg s A K,&gt; ... velocity would be 
            &lt;1,0,-1,0,0,0&gt;: that is m1 * s-1 =m/s. We have suggested to the 
            CO Scientific Committee to use the SI base units plus the SI derived units 
            with special symbols (for a better usability and for allowing the 
            definition of angles).</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.CapeParameter.ValStatus">
            <summary>
            Gets the flag to indicate parameter validation's status.
            </summary>
            <remarks>
            <para>Gets the flag to indicate parameter validation status. It has three 
            possible values:</para>
            <para>   (i)   notValidated(CAPE_NOT_VALIDATED): The PMC's <c>Validate()</c>
            method has not been called after the last time that its value had been 
            changed.</para>
            <para>   (ii)  invalid(CAPE_INVALID): The last time that the PMC's 
            <c>Validate()</c> method was called it returned false.</para>
            <para>   (iii) valid(CAPE_VALID): the last time that the PMC's
            Validate() method was called it returned true.</para>
            </remarks>
            <value>The validity staus of the parameter, either valid, invalid, or "not validated".</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="E:CapeOpen.CapeParameter.ParameterModeChanged">
            <summary>
            Occurs when the user changes of the mode of the parameter changes.
            </summary>
        </member>
        <member name="P:CapeOpen.CapeParameter.Mode">
            <summary>
            Gets and sets the mode of the parameter.
            </summary>
            <remarks>
            <para>Modes of parameters. It allows the following values:</para>
            <para>   (i)   Input (CAPE_INPUT): the Unit(or whichever owner component) will use 
            its value to calculate.</para>
            <para>   (ii)  Output (CAPE_OUTPUT): the Unit will place in the parameter a result 
            of its calculations.</para>
            <para>   (iii) Input-Output (CAPE_INPUT_OUTPUT): the user inputs an 
            initial estimation value and the user outputs a calculated value.</para>
            </remarks>
            <value>The mode of the parameter, input, output, or input/output.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="E:CapeOpen.CapeParameter.ParameterReset">
            <summary>
            Occurs when the user changes of the parameter value is reset to the default value.
            </summary>
        </member>
        <member name="P:CapeOpen.CapeParameter.Type">
            <summary>
            Gets the type of the parameter. 
            </summary>
            <remarks>
            Gets the <see cref="T:CapeOpen.CapeParamType"/> of the parameter for which this is a specification: real 
            (CAPE_REAL), integer(CAPE_INT), option(CAPE_OPTION), boolean(CAPE_BOOLEAN) 
            or array(CAPE_ARRAY).
            </remarks>
            <value>The parameter type. </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed.</exception>
        </member>
        <member name="T:CapeOpen.CapeUserException">
            <summary>
            This is the abstract base class for all .Net based CAPE-OPEN exception classes.
            </summary>
            <remarks>
            <para>
            One of the principal advantages of .NET over COM is the additional information 
            included in exception handling. In COM, exceptions were handled through returning 
            an HRESULT value, which is an integer that indicated whether the function call had
            successfully returned (Rogerson, 1997). Because the HRESULT value was a 32-bit 
            integer, it could indicate more information than simply success or failure, but it
            was limited in that it did not include descriptive information about the exception
            that occurred.</para>
            <para>Under .NET, an application exception class is available 
            (System.ApplicationException) that can be used to provide information such as a message and the source 
            of the exception. The CAPE-OPEN exception definitions all derive from an 
            ECapeRoot interface (Belaud et al, 2001). In the current implementation of the 
            CAPE-OPEN exception classes, all exception classes derive from the 
            CapeUserException class, which itself is derived from the .NET 
            System.ApplicationException class. The CapeUserException class exposes the 
            <see c = "ECapeRoot"/> and <see c = "ECapeUser"/> interfaces. In this way, 
            all exceptions that are raised by the process modeling components can be caught 
            either as a CapeRootException or as a System.ApplicationException in addition to 
            being caught as the derived exception type. </para>
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeRoot">
            <summary>
            The root CAPE-OPEN Exception interface. 
            </summary>
            <remarks>
            The interface of the CAPE-OPEN errors hierarchy. The System package and the ECapeUser 
            interface depend on this error.
            </remarks>
        </member>
        <member name="P:CapeOpen.ECapeRoot.Name">
            <summary>
            The name of the error. This is a mandatory field.
            </summary>
            <remarks>
            The name of the error. This is a mandatory field.
            </remarks>
            <value>
            The name of the error. This is a mandatory field.
            </value>
        </member>
        <member name="T:CapeOpen.ECapeUser">
            <summary>
            The base interface of the CO errors hierarchy. 
            </summary>
            <remarks>
            The ECapeUser interface defines the minimum state of a CO error.
            </remarks>
        </member>
        <member name="P:CapeOpen.ECapeUser.code">
            <summary>
            Code to designate the subcategory of the error. 
            </summary>
            <remarks>
            <para>The error code is used as the function return HRESULT in the COM calling pattern.
            When a .Net-based component throws an exception, the HRESULT assigned to the
            exception is returned to the COM-based caller. It is important to set the 
            exception HRESULT value to provide HRESULT information to a COM caller.
            </para>
            <para>The assignment of values is left to each implementation. So that is a 
            proprietary code specific to the CO component provider. By default, set to 
            the CAPE-OPEN error HRESULT <see cref="T:CapeOpen.CapeErrorInterfaceHR"/>.</para>
            </remarks>
            <value>
            The HRESULT value for the exception.
            </value>
        </member>
        <member name="P:CapeOpen.ECapeUser.description">
            <summary>
            The description of the error.
            </summary>
            <remarks>
            The error description can include a more verbose description of the condition that
            caused the error.
            </remarks>
            <value>
            A string description of the exception.
            </value>
        </member>
        <member name="P:CapeOpen.ECapeUser.scope">
            <summary>
            The scope of the error.
            </summary>
            <remarks>
            This property provides a list of packages where the error occurs separated by '.'. 
            For example CapeOpen.Common.Identification.
            </remarks>
            <value>The source of the error.</value>
        </member>
        <member name="P:CapeOpen.ECapeUser.interfaceName">
            <summary>
            The name of the interface where the error is thrown. This is a mandatory field."
            </summary>
            <remarks>
            The interface that the error was thrown.
            </remarks>
            <value>The name of the interface.</value>
        </member>
        <member name="P:CapeOpen.ECapeUser.operation">
            <summary>
            The name of the operation where the error is thrown. This is a mandatory field.
            </summary>
            <remarks>
            This field provides the name of the operation being perfomed when the exception was raised.
            </remarks>
            <value>The operation name.</value>
        </member>
        <member name="P:CapeOpen.ECapeUser.moreInfo">
            <summary>
            An URL to a page, document, web site,  where more information on the error can be found. The content of this information is obviously implementation dependent.
            </summary>
            <remarks>
            This field provides an internet URL where more information about the error can be found.
            </remarks>
            <value>The URL.</value>
        </member>
        <member name="F:CapeOpen.CapeUserException.m_interfaceName">
            <summary>
            The name of the exception interface for the exception being thrown.
            </summary>
            <remarks>
            The m_interfaceName field is set in the <see c = "Initialize">Initialize</see> method for the exception. Any exception
            that derives from the CapeUserException class will need to set this value in the Initialize method.
            </remarks>
        </member>
        <member name="F:CapeOpen.CapeUserException.m_name">
            <summary>
            The name of the exception being thrown.
            </summary>
            <remarks>
            The m_name field is set in the <see c = "Initialize">Initialize</see> method for the exception. Any exception
            that derives from the CapeUserException class will need to set this value in the Initialize method.
            </remarks>
        </member>
        <member name="F:CapeOpen.CapeUserException.m_description">
            <summary>
            The description of the exception being thrown.
            </summary>
            <remarks>
            The m_name field is set in the <see c = "Initialize">Initialize</see> method for the exception. Any exception
            that derives from the CapeUserException class will need to set this value in the Initialize method.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeUserException.#ctor">
            <summary>
            Initializes a new instance of the CapeUserException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeUserException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeUserException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeUserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeUserException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeUserException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeUserException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="M:CapeOpen.CapeUserException.Initialize">
            <summary>
            A virtual abstract function that is inherieted by derived classes to 
            initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Derived classes should implement this class and set the values of the HResult, interface name and exception name.</para>
            <code>
            virtual void Initialize() override 
            {
             HResult = (int)CapeErrorInterfaceHR.ECapeUnknownHR;
             m_interfaceName = "ECapeUnknown";
             m_name = "CUnknownException";
            }
            </code>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeUserException.RegisterFunction(System.Type)">
            <summary>
            The function that controls COM registration. 
            </summary>
            <remarks>
            This function adds the registration keys specified in the CAPE-OPEN Method and
            Tools specifications. In particular, it indicates that this unit operation implements
            the CAPE-OPEN Unit Operation Category Identification. It also adds the CapeDescription
            registry keys using the <see c ="CapeNameAttribute"/>, <see c ="CapeDescriptionAttribute"/>, <see c ="CapeVersionAttribute"/>
            <see c ="CapeVendorURLAttribute"/>, <see c ="CapeHelpURLAttribute"/>, 
            and <see c ="CapeAboutAttribute"/> attributes.
            </remarks>
            <param name = "t">The type of the class being registered.</param> 
            <exception c ="ECapeUnknown">The error to be raised when other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeUserException.UnregisterFunction(System.Type)">
            <summary>
            This function controls the removal of the class from the COM registry when the class is unistalled. 
            </summary>
            <remarks>
            The method will remove all subkeys added to the class' regristration, including the CAPE-OPEN
            specific keys added in the <see c ="RegisterFunction"/> method.
            </remarks>
            <param name = "t">The type of the class being unregistered.</param> 
            <exception c ="ECapeUnknown">The error to be raised when other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.CapeUserException.Name">
            <summary>
            The name of the exception being thrown.
            </summary>
            <remarks>
            The name of the exception being thrown.
            </remarks>
            <value>
            The name of the exception being thrown.
            </value>
        </member>
        <member name="P:CapeOpen.CapeUserException.code">
            <summary>
            Code to designate the subcategory of the error. 
            </summary>
            <remarks>
            The assignment of values is left to each implementation. So that is a 
            proprietary code specific to the CO component provider. By default, set to 
            the CAPE-OPEN error HRESULT <see c = "CapeErrorInterfaceHR"/>.
            </remarks>
            <value>
            The HRESULT value for the exception.
            </value>
        </member>
        <member name="P:CapeOpen.CapeUserException.description">
            <summary>
            The description of the error.
            </summary>
            <remarks>
            The error description can include a more verbose description of the condition that
            caused the error.
            </remarks>
            <value>
            A string description of the exception.
            </value>
        </member>
        <member name="P:CapeOpen.CapeUserException.scope">
            <summary>
            The scope of the error.
            </summary>
            <remarks>
            This property provides a list of packages where the error occurred. 
            For example <see c = "ICapeIdentification"/>.
            </remarks>
            <value>The source of the error.</value>
        </member>
        <member name="P:CapeOpen.CapeUserException.interfaceName">
            <summary>
            The name of the interface where the error is thrown. This is a mandatory field."
            </summary>
            <remarks>
            The interface that the error was thrown.
            </remarks>
            <value>The name of the interface.</value>
        </member>
        <member name="P:CapeOpen.CapeUserException.operation">
            <summary>
            The name of the operation where the error is thrown. This is a mandatory field.
            </summary>
            <remarks>
            This field provides the name of the operation being perfomed when the exception was raised.
            </remarks>
            <value>The operation name.</value>
        </member>
        <member name="P:CapeOpen.CapeUserException.moreInfo">
            <summary>
            An URL to a page, document, web site, where more information on the error can be found. The content of this information is obviously implementation dependent.
            </summary>
            <remarks>
            This field provides an internet URL where more information about the error can be found.
            </remarks>
            <value>The URL.</value>
        </member>
        <member name="T:CapeOpen.CapeUnknownException">
            <summary>
            This exception is raised when other error(s), specified by the operation, do not suit.
            </summary>
            <remarks>
            <para>
            A standard exception that can be thrown by a CAPE-OPEN object to indicate that the error
            that occurred was not one that was suitable for any of the other errors supported by the object. </para>
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeUnknown">
            <summary>
            This exception is raised when other error(s), specified by the operation, do not suit.
            </summary>
            <remarks>
            <para>
            A standard exception that can be thrown by a CAPE-OPEN object to indicate that the error
            that occurred was not one that was suitable for any of the other errors supported by the object. </para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeUnknownException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeUnknownException.#ctor">
            <summary>
            Initializes a new instance of the CapeUnknownException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeUnknownException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeUnknownException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeUnknownException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeUnknownException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeUnknownException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeUnknownException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapeUnexpectedException">
            <summary>
            This exception is raised when other error(s), specified by the operation, do not suit.
            </summary>
            <remarks>
            <para>
            A standard exception that can be thrown by a CAPE-OPEN object to indicate that the error
            that occurred was not one that was suitable for any of the other errors supported by the object. </para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeUnexpectedException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeUnexpectedException.#ctor">
            <summary>
            Initializes a new instance of the CapeUnknownException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeUnexpectedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeUnknownException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeUnexpectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeUnknownException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeUnexpectedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeUnknownException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapeDataException">
            <summary>
            The base class of the errors hierarchy related to any data.
            </summary>
            <remarks>
            <para>
            The CapeDataException class is a base class for errors related to data. The data are the 
            arguments of operations, the parameters coming from the Parameter Common Interface 
            and information on licence key.	
            </para>
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeData">
            <summary>
            The base interface for the errors hierarchy related to any data.
            </summary>
            <remarks>
            <para>
            The ECapeDataException interface is the base interface for errors related to data. The data are the 
            arguments of operations, the parameters coming from the Parameter Common Interface 
            and information on licence key.	
            </para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeDataException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeDataException.#ctor">
            <summary>
            Initializes a new instance of the CapeDataException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeDataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeDataException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeDataException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeDataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeDataException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapeBadCOParameter">
            <summary>
            A parameter, which is an object from the Parameter Common Interface, has an invalid status.
            </summary>
            <remarks>
            The name of the invalid parameter, along with the parameter itself are available from the exception.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeBadCOParameter">
            <summary>
            A parameter, which is an object from the Parameter Common Interface, has an invalid status.
            </summary>
            <remarks>
            The name of the invalid parameter, along with the parameter itself are available from the exception.
            </remarks>
        </member>
        <member name="P:CapeOpen.ECapeBadCOParameter.parameterName">
            <summary>
            The name of the CO parameter that is throwing the exception.
            </summary>
            <remarks>
            This provides the name of the parameter that threw the exception.
            </remarks>
            <value>The name of the parameter that threw the exception.</value>
        </member>
        <member name="P:CapeOpen.ECapeBadCOParameter.parameter">
            <summary>
            The parameter that threw the exception.
            </summary>
            <remarks>
            This method provides access directly to the parameter that threw the exception.
            </remarks>
            <value>A reference to the exception taht threw the exception.</value>
        </member>
        <member name="M:CapeOpen.CapeBadCOParameter.Initialize(System.String,System.Object)">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
            <param name = "parameterName">The name of the parameter with the invalid status.</param>
            <param name = "pParameter">The parameter with the invalid status.</param>
        </member>
        <member name="M:CapeOpen.CapeBadCOParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the CapeBadCOParameter class with the name of the parameter and the parameter that caused the exception. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
            <param name = "parameterName">The name of the parameter with the invalid status.</param>
            <param name = "parameter">The parameter with the invalid status.</param>
        </member>
        <member name="M:CapeOpen.CapeBadCOParameter.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the CapeBadCOParameter class with a specified error message, the name of the parameter, and the parameter that caused the exception. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
            <param name = "parameterName">The name of the parameter with the invalid status.</param>
            <param name = "parameter">The parameter with the invalid status.</param>
        </member>
        <member name="M:CapeOpen.CapeBadCOParameter.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.String,System.Object)">
            <summary>
            Initializes a new instance of the CapeBadCOParameter class with serialized data, the name of the parameter, and the parameter that caused the exception. 
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
            <param name = "parameterName">The name of the parameter with the invalid status.</param>
            <param name = "parameter">The parameter with the invalid status.</param>
        </member>
        <member name="M:CapeOpen.CapeBadCOParameter.#ctor(System.String,System.Exception,System.String,System.Object)">
            <summary>
            Initializes a new instance of the CapeBadCOParameter class with a specified error message and a erence to the inner exception, the name of the parameter, and the parameter that caused the exception. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
            <param name = "parameterName">The name of the parameter with the invalid status.</param>
            <param name = "parameter">The parameter with the invalid status.</param>
        </member>
        <member name="P:CapeOpen.CapeBadCOParameter.parameter">
            <summary>
            The name of the CO parameter that is throwing the exception.
            </summary>
            <remarks>
            This provides the name of the parameter that threw the exception.
            </remarks>
            <value>The name of the parameter that threw the exception.</value>
        </member>
        <member name="P:CapeOpen.CapeBadCOParameter.parameterName">
            <summary>
            The name of the CO parameter that is throwing the exception.
            </summary>
            <remarks>
            This provides access to the parameter that threw the exception.
            </remarks>
            <value>The parameter that threw the exception.</value>
        </member>
        <member name="T:CapeOpen.CapeBadArgumentException">
            <summary>
            An argument value of the operation is not correct.
            </summary>
            <remarks>
            An argument value of the operation is not correct. The position of the 
            argument value within the signature of the operation. First argument is as 
            position 1.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeBadArgument">
            <summary>
            An invalid argument value was passed. 
            </summary>
            <remarks>
            The function call includes an invalid argument value. For instance the passed name of the phase 
            does not belong to the CO Phase List.
            </remarks>
        </member>
        <member name="P:CapeOpen.ECapeBadArgument.position">
            <summary>
            The position of the argument value within the signature of the operation. First argument is as position 1.
            </summary>
            <remarks>
            This provides the location of the invalid argument in the argument list for the function call.
            </remarks>
            <value>The position of the argument that is bad. The first argument is 1.
            </value>
        </member>
        <member name="T:CapeOpen.ECapeBadArgument093">
            <summary>
            An invalid argument value was passed. 
            </summary>
            <remarks>
            The function call includes an invalid argument value. For instance the passed name of the phase 
            does not belong to the CO Phase List.
            </remarks>
        </member>
        <member name="P:CapeOpen.ECapeBadArgument093.position">
            <summary>
            The position of the argument value within the signature of the operation. First argument is as position 1.
            </summary>
            <remarks>
            This provides the location of the invalid argument in the argument list for the function call.
            </remarks>
            <value>The position of the argument that is bad. The first argument is 1.
            </value>
        </member>
        <member name="M:CapeOpen.CapeBadArgumentException.Initialize(System.Int32)">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
            <param name = "position">The position of the argument value within the signature of the operation. First argument is as position 1.</param>
        </member>
        <member name="M:CapeOpen.CapeBadArgumentException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the CapeBadArgumentException class with the position of the error. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
            <param name = "position">The position of the argument value within the signature of the operation. First argument is as position 1.</param>
        </member>
        <member name="M:CapeOpen.CapeBadArgumentException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the CapeBadArgumentException class with a specified error message and the position of the error. 
            </summary>. 
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
            <param name = "position">The position of the argument value within the signature of the operation. First argument is as position 1.</param>
        </member>
        <member name="M:CapeOpen.CapeBadArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Int32)">
            <summary>
            Initializes a new instance of the CapeBadArgumentException class with serialized data and the position of the error. 
            </summary>.
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
            <param name = "position">The position of the argument value within the signature of the operation. First argument is as position 1.</param>
        </member>
        <member name="M:CapeOpen.CapeBadArgumentException.#ctor(System.String,System.Exception,System.Int32)">
            <summary>
            Initializes a new instance of the CapeBadArgumentException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
            <param name = "position">The position of the argument value within the signature of the operation. First argument is as position 1.</param>
        </member>
        <member name="P:CapeOpen.CapeBadArgumentException.position">
            <summary>
            The position of the argument value within the signature of the operation. First argument is as position 1.
            </summary>
            <remarks>
            This provides the location of the invalid argument in the argument list for the function call.
            </remarks>
            <value>The position of the argument that is bad. The first argument is 1.
            </value>
        </member>
        <member name="P:CapeOpen.CapeBadArgumentException.CapeOpen#ECapeBadArgument093#position">
            <summary>
            The position of the argument value within the signature of the operation. First argument is as position 1.
            </summary>
            <remarks>
            This provides the location of the invalid argument in the argument list for the function call.
            </remarks>
            <value>The position of the argument that is bad. The first argument is 1.
            </value>
        </member>
        <member name="T:CapeOpen.CapeBoundariesException">
            <summary>
            This is an abstract class that allows derived classes to provide information 
            about error that result from values that are outside of their bounds. It can be raised 
            to indicate that the value of either a method argument or the value of a object 
            parameter is out of range.
            </summary>
            <remarks>
            <para>CapeBoundariesException is a "utility" class which factorises a state which describes the value, its type and its boundaries.</para>
            <para>This is an abstract class. No real error can be raised from this class.</para>
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeBoundaries">
            <summary>
            This interface provides information 
            about error that result from values that are outside of their bounds. It can be raised 
            to indicate that the value of either a method argument or the value of a object 
            parameter is out of range.
            </summary>
            <remarks>
            <para>ECapeBoundaries is a "utility" interface which factorises a state which describes the value, its type and its boundaries.</para>
            </remarks>
        </member>
        <member name="P:CapeOpen.ECapeBoundaries.lowerBound">
            <summary>
            The value of the lower bound.
            </summary>
            <remarks>
            <para>This provides the user with the acceptable lower bounds of the argument.</para>
            </remarks>
            <value>The lower bound for the argument.</value>
        </member>
        <member name="P:CapeOpen.ECapeBoundaries.upperBound">
            <summary>
            The value of the upper bound.
            </summary>
            <remarks>
            <para>This provides the user with the acceptable upper bounds of the argument.</para>
            </remarks>
            <value>The upper bound for the argument.</value>
        </member>
        <member name="P:CapeOpen.ECapeBoundaries.value">
            <summary>
            The current value which has led to an error.
            </summary>
            <remarks>
            <para>This provides the user with the value that caused the error condition.</para>
            </remarks>
            <value>The value that resulted in the error condition.</value>
        </member>
        <member name="P:CapeOpen.ECapeBoundaries.type">
            <summary>
            The type/nature of the value. 
            </summary>
            <remarks>
            The value could represent a thermodynamic property, a number of tables in a database, a quantity of memory, ..."
            </remarks>
            <value>A string that indicates the anture or type of the value required.</value>
        </member>
        <member name="M:CapeOpen.CapeBoundariesException.SetBoundaries(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
            <param name = "LowerBound">The value of the lower bound.</param>
            <param name = "UpperBound">The value of the upper bound.</param>
            <param name = "value">The current value which has led to an error.</param>
            <param name = "type">The type/nature of the value. The value could represent a thermodynamic property, a number of tables in a database, a quantity of memory, ...</param>
        </member>
        <member name="M:CapeOpen.CapeBoundariesException.#ctor(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of the CapeBoundariesException class with the lower bound, upper bound, value, type, and position of the parameter that is the cause of this exception. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
            <param name = "LowerBound">The value of the lower bound.</param>
            <param name = "UpperBound">The value of the upper bound.</param>
            <param name = "value">The current value which has led to an error.</param>
            <param name = "type">The type/nature of the value. The value could represent a thermodynamic property, a number of tables in a database, a quantity of memory, ...</param>
        </member>
        <member name="M:CapeOpen.CapeBoundariesException.#ctor(System.String,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of the CapeBoundariesException class with a specified error message, the lower bound, upper bound, value, type, and position of the parameter that is the cause of this exception. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
            <param name = "LowerBound">The value of the lower bound.</param>
            <param name = "UpperBound">The value of the upper bound.</param>
            <param name = "value">The current value which has led to an error.</param>
            <param name = "type">The type/nature of the value. The value could represent a thermodynamic property, a number of tables in a database, a quantity of memory, ...</param>
        </member>
        <member name="M:CapeOpen.CapeBoundariesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of the CapeBoundariesException class with serialized data, the lower bound, upper bound, value, type, and position of the parameter that is the cause of this exception. 
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
            <param name = "LowerBound">The value of the lower bound.</param>
            <param name = "UpperBound">The value of the upper bound.</param>
            <param name = "value">The current value which has led to an error.</param>
            <param name = "type">The type/nature of the value. The value could represent a thermodynamic property, a number of tables in a database, a quantity of memory, ...</param>
        </member>
        <member name="M:CapeOpen.CapeBoundariesException.#ctor(System.String,System.Exception,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of the CapeBoundariesException class with a specified error message, the lower bound, upper bound, value, type and position of the parameter, and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
            <param name = "LowerBound">The value of the lower bound.</param>
            <param name = "UpperBound">The value of the upper bound.</param>
            <param name = "value">The current value which has led to an error.</param>
            <param name = "type">The type/nature of the value. The value could represent a thermodynamic property, a number of tables in a database, a quantity of memory, ...</param>
        </member>
        <member name="P:CapeOpen.CapeBoundariesException.lowerBound">
            <summary>
            The value of the lower bound.
            </summary>
            <remarks>
            <para>This provides the user with the acceptable lower bounds of the argument.</para>
            </remarks>
            <value>The lower bound for the argument.</value>
        </member>
        <member name="P:CapeOpen.CapeBoundariesException.upperBound">
            <summary>
            The value of the upper bound.
            </summary>
            <remarks>
            <para>This provides the user with the acceptable upper bounds of the argument.</para>
            </remarks>
            <value>The upper bound for the argument.</value>
        </member>
        <member name="P:CapeOpen.CapeBoundariesException.value">
            <summary>
            The current value which has led to an error.
            </summary>
            <remarks>
            <para>This provides the user with the value that caused the error condition.</para>
            </remarks>
            <value>The value that resulted in the error condition.</value>
        </member>
        <member name="P:CapeOpen.CapeBoundariesException.type">
            <summary>
            The type/nature of the value. 
            </summary>
            <remarks>
            The value could represent a thermodynamic property, a number of tables in a database, a quantity of memory, ..."
            </remarks>
            <value>A string that indicates the anture or type of the value required.</value>
        </member>
        <member name="T:CapeOpen.CapeOutOfBoundsException">
            <summary>
            An argument value is outside of the bounds..
            </summary>
            <remarks>
            <para>This class is derived from the <see c = "CapeBoundariesException">CapeBoundariesException</see> class.
            It is used to indicate that one of the parameters is outside of its bounds.</para>
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeOutOfBounds">
            <summary>
            An argument value is outside of the bounds..
            </summary>
            <remarks>
            <para>This class is derived from the <see cref="T:CapeOpen.ECapeBoundaries"/> interface.
            It is used to indicate that one of the parameters is outside of its bounds.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeOutOfBoundsException.Initialize">
            <summary>
            The initialize method for all classes derived from CapeOutOfBoundsException need to include the
            pertinent information related to the boundaries.
            </summary>
            <remarks>
            <para>This method is sealed so that classes that derive from CapeOutOfBoundsException include the required information about the position of the argument.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeOutOfBoundsException.#ctor(System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of the CapeOutOfBoundsException class with the position of the error. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
            <param name = "position">The position of the argument value within the signature of the operation. First argument is as position 1.</param>
            <param name = "LowerBound">The value of the lower bound.</param>
            <param name = "UpperBound">The value of the upper bound.</param>
            <param name = "value">The current value which has led to an error.</param>
            <param name = "type">The type/nature of the value. The value could represent a thermodynamic property, a number of tables in a database, a quantity of memory, ...</param>
        </member>
        <member name="M:CapeOpen.CapeOutOfBoundsException.#ctor(System.String,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of the CapeOutOfBoundsException class with a specified error message and the position of the error. 
            </summary>. 
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
            <param name = "position">The position of the argument value within the signature of the operation. First argument is as position 1.</param>
            <param name = "LowerBound">The value of the lower bound.</param>
            <param name = "UpperBound">The value of the upper bound.</param>
            <param name = "value">The current value which has led to an error.</param>
            <param name = "type">The type/nature of the value. The value could represent a thermodynamic property, a number of tables in a database, a quantity of memory, ...</param>
        </member>
        <member name="M:CapeOpen.CapeOutOfBoundsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of the CapeOutOfBoundsException class with serialized data and the position of the error. 
            </summary>.
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
            <param name = "position">The position of the argument value within the signature of the operation. First argument is as position 1.</param>
            <param name = "LowerBound">The value of the lower bound.</param>
            <param name = "UpperBound">The value of the upper bound.</param>
            <param name = "value">The current value which has led to an error.</param>
            <param name = "type">The type/nature of the value. The value could represent a thermodynamic property, a number of tables in a database, a quantity of memory, ...</param>
        </member>
        <member name="M:CapeOpen.CapeOutOfBoundsException.#ctor(System.String,System.Exception,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of the CapeOutOfBoundsException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
            <param name = "position">The position of the argument value within the signature of the operation. First argument is as position 1.</param>
            <param name = "LowerBound">The value of the lower bound.</param>
            <param name = "UpperBound">The value of the upper bound.</param>
            <param name = "value">The current value which has led to an error.</param>
            <param name = "type">The type/nature of the value. The value could represent a thermodynamic property, a number of tables in a database, a quantity of memory, ...</param>
        </member>
        <member name="P:CapeOpen.CapeOutOfBoundsException.position">
            <summary>
            The position of the argument value within the signature of the operation. First argument is as position 1.
            </summary>
            <remarks>
            This provides the location of the invalid argument in the argument list for the function call.
            </remarks>
            <value>The position of the argument that is bad. The first argument is 1.
            </value>
        </member>
        <member name="P:CapeOpen.CapeOutOfBoundsException.CapeOpen#ECapeBadArgument093#position">
            <summary>
            The position of the argument value within the signature of the operation. First argument is as position 1.
            </summary>
            <remarks>
            This provides the location of the invalid argument in the argument list for the function call.
            </remarks>
            <value>The position of the argument that is bad. The first argument is 1.
            </value>
        </member>
        <member name="T:CapeOpen.CapeComputationException">
            <summary>
            The base class of the errors hierarchy related to calculations.
            </summary>
            <remarks>
            This class is used to indicate that an error occurred in the performance of a calculation. 
            Other calculation-related classes such as 
            <see c = "CapeFailedInitialisationException">CapeOpen.CapeFailedInitialisationException</see>, 
            <see c = "CapeOutOfResourcesException">CapeOpen.CapeOutOfResourcesException</see>, 
            <see c = "CapeSolvingErrorException">CapeOpen.CapeSolvingErrorException</see>, 
            <see c = "CapeBadInvOrderException">CapeOpen.CapeBadInvOrderException</see>, 
            <see c = "CapeInvalidOperationException">CapeOpen.CapeInvalidOperationException</see>, 
            <see c = "CapeNoMemoryException">CapeOpen.CapeNoMemoryException</see>, and 
            <see c = "CapeTimeOutException">CapeOpen.CapeTimeOutException</see> 
            derive from this class.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeComputation">
            <summary>
            The base interface of the errors hierarchy related to calculations.
            </summary>
            <remarks>
            This class is used to indicate that an error occurred in the performance of a calculation. 
            Other calculation-related classes such as 
            <see cref="T:CapeOpen.ECapeFailedInitialisation"/>, 
            <see cref="T:CapeOpen.ECapeOutOfResources"/>, 
            <see cref="T:CapeOpen.ECapeSolvingError"/>, 
            <see cref="T:CapeOpen.ECapeBadInvOrder"/>, 
            <see cref="T:CapeOpen.ECapeInvalidOperation"/>, 
            <see cref="T:CapeOpen.ECapeNoMemory"/>, and 
            <see cref="T:CapeOpen.ECapeTimeOut"/> 
            derive from this class.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeComputationException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeComputationException.#ctor">
            <summary>
            Initializes a new instance of the CapeComputationException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeComputationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeComputationException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeComputationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeComputationException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeComputationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeComputationException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapeFailedInitialisationException">
            <summary>
            This exception is thrown when necessary initialisation has not been performed or has failed.
            </summary>
            <remarks>
            The pre-requisites operations are not valid. The necessary initialisation has not been performed or has failed.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeFailedInitialisation">
            <summary>
            This exception is thrown when necessary initialisation has not been performed or has failed.
            </summary>
            <remarks>
            The pre-requisites operations are not valid. The necessary initialisation has not been performed or has failed.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeFailedInitialisationException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeFailedInitialisationException.#ctor">
            <summary>
            Initializes a new instance of the CapeFailedInitialisationException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeFailedInitialisationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeFailedInitialisationException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeFailedInitialisationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeFailedInitialisationException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeFailedInitialisationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeFailedInitialisationException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapeImplementationException">
            <summary>
            The base class of the errors hierarchy related to the current implementation.
            </summary>
            <remarks>
            This class is used to indicate that an error occurred in the with the implementation of an object. 
            The implemenation-related classes such as 
            <see c = "CapeNoImplException ">CapeOpen.CapeNoImplException </see> and 
            <see c = "CapeLimitedImplException ">CapeOpen.CapeLimitedImplException </see>
            derive from this class.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeImplementation">
            <summary>
            The base class of the errors hierarchy related to the current implementation.
            </summary>
            <remarks>
            This class is used to indicate that an error occurred in the with the implementation of an object. 
            The implemenation-related classes such as 
            <see cref="T:CapeOpen.ECapeNoImpl"/> and 
            <see cref="T:CapeOpen.ECapeLimitedImpl"/>
            derive from this class.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeImplementationException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeImplementationException.#ctor">
            <summary>
            Initializes a new instance of the CapeImplementationException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeImplementationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeImplementationException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeImplementationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeImplementationException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeImplementationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeImplementationException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapeInvalidArgumentException">
            <summary>
            An invalid argument value was passed. For instance the passed name of 
            the phase does not belong to the CO Phase List.
            </summary>
            <remarks>
            An argument value of the operation is invalid. The position of the 
            argument value within the signature of the operation. First argument is as 
            position 1.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeInvalidArgument">
            <summary>
            An invalid argument value was passed. For instance the passed name of 
            the phase does not belong to the CO Phase List.
            </summary>
            <remarks>
            An argument value of the operation is invalid. The position of the 
            argument value within the signature of the operation. First argument is as 
            position 1.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeInvalidArgumentException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeInvalidArgumentException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the CapeInvalidArgumentException class with the position of the error. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
            <param name = "position">The position of the argument value within the signature of the operation. First argument is as position 1.</param>
        </member>
        <member name="M:CapeOpen.CapeInvalidArgumentException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the CapeInvalidArgumentException class with a specified error message and the position of the error. 
            </summary>. 
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
            <param name = "position">The position of the argument value within the signature of the operation. First argument is as position 1.</param>
        </member>
        <member name="M:CapeOpen.CapeInvalidArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Int32)">
            <summary>
            Initializes a new instance of the CapeInvalidArgumentException class with serialized data and the position of the error. 
            </summary>.
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
            <param name = "position">The position of the argument value within the signature of the operation. First argument is as position 1.</param>
        </member>
        <member name="M:CapeOpen.CapeInvalidArgumentException.#ctor(System.String,System.Exception,System.Int32)">
            <summary>
            Initializes a new instance of the CapeInvalidArgumentException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
            <param name = "position">The position of the argument value within the signature of the operation. First argument is as position 1.</param>
        </member>
        <member name="T:CapeOpen.CapeInvalidOperationException">
            <summary>
            This operation is not valid in the current context.
            </summary>
            <remarks>
            This exception is thrown when an operation is attempted that is not valid in the current context.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeInvalidOperation">
            <summary>
            This operation is not valid in the current context.
            </summary>
            <remarks>
            This exception is thrown when an operation is attempted that is not valid in the current context.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeInvalidOperationException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeInvalidOperationException.#ctor">
            <summary>
            Initializes a new instance of the CapeInvalidOperationException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeInvalidOperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeInvalidOperationException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeInvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeInvalidOperationException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeInvalidOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeInvalidOperationException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapeBadInvOrderException">
            <summary>
            The necessary pre-requisite operation has not been called prior to the operation request.
            </summary>
            <remarks>
            The specified prerequiste operation must be called prior to the operation throwing this exception.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeBadInvOrder">
            <summary>
            The necessary pre-requisite operation has not been called prior to the operation request.
            </summary>
            <remarks>
            The specified prerequiste operation must be called prior to the operation throwing this exception.
            </remarks>
        </member>
        <member name="P:CapeOpen.ECapeBadInvOrder.requestedOperation">
            <summary>
            The necessary prerequisite operation.
            </summary>
        </member>
        <member name="M:CapeOpen.CapeBadInvOrderException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeBadInvOrderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeBadInvOrderException class with a specified error message and the name of the operation raising the exception. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "operation">The necessary prerequisite operation.</param>
        </member>
        <member name="M:CapeOpen.CapeBadInvOrderException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the CapeBadInvOrderException class with a specified error message and the name of the operation raising the exception. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
            <param name = "operation">The necessary prerequisite operation.</param>
        </member>
        <member name="M:CapeOpen.CapeBadInvOrderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.String)">
            <summary>
            Initializes a new instance of the CapeBadInvOrderException class with serialized data and the name of the operation raising the exception.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
            <param name = "operation">The necessary prerequisite operation.</param>
        </member>
        <member name="M:CapeOpen.CapeBadInvOrderException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            Initializes a new instance of the CapeBadInvOrderException class with a specified error message, a erence to the inner exception, and the name of the operation raising the exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
            <param name = "operation">The necessary prerequisite operation.</param>
        </member>
        <member name="P:CapeOpen.CapeBadInvOrderException.requestedOperation">
            <summary>
            The necessary prerequisite operation.
            </summary>
            <remarks>
            <para>The prerquisite operation must be called prior to calling the current operation.</para>
            </remarks>
            <value>The name of the necessary prerequisite operation.
            </value>
        </member>
        <member name="T:CapeOpen.CapeLicenceErrorException">
            <summary>
            An operation can not be completed because the licence agreement is not respected.
            </summary>
            <remarks>
            Of course, this type of error could also appear outside the CO scope. In this case, 
            the error does not belong to the CO error handling. It is specific to the platform.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeLicenceError">
            <summary>
            An operation can not be completed because the licence agreement is not respected.
            </summary>
            <remarks>
            Of course, this type of error could also appear outside the CO scope. In this case, 
            the error does not belong to the CO error handling. It is specific to the platform.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeLicenceErrorException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeLicenceErrorException.#ctor">
            <summary>
            Initializes a new instance of the CapeLicenceErrorException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeLicenceErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeLicenceErrorException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeLicenceErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeLicenceErrorException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeLicenceErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeLicenceErrorException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapeLimitedImplException">
            <summary>
            The limit of the implementation has been violated.
            </summary>
            <remarks>
            <para>An operation may be partially implemented for example a Property Package could 
            implement TP flash but not PH flash. If a caller requests for a PH flash, then 
            this error indicates that some flash calculations are supported but not the 
            requested one.
            </para>
            <para>The factory can only create one instance (because the component is an 
            evaluation copy), when the caller requests for a second creation this error shows 
            that this implementation is limited.
            </para>
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeLimitedImpl">
            <summary>
            The limit of the implementation has been violated.
            </summary>
            <remarks>
            <para>An operation may be partially implemented for example a Property Package could 
            implement TP flash but not PH flash. If a caller requests for a PH flash, then 
            this error indicates that some flash calculations are supported but not the 
            requested one.
            </para>
            <para>The factory can only create one instance (because the component is an 
            evaluation copy), when the caller requests for a second creation this error shows 
            that this implementation is limited.
            </para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeLimitedImplException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeLimitedImplException.#ctor">
            <summary>
            Initializes a new instance of the CapeLimitedImplException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeLimitedImplException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeLimitedImplException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeLimitedImplException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeLimitedImplException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeLimitedImplException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeLimitedImplException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapeNoImplException">
            <summary>
            An exception class that indicates that the requested operation has not been implemented by the current object.
            </summary>
            <remarks>
            The operation is “not” implemented even if this operation can be called due 
            to the compatibility with the CO standard. That is to say that the operation 
            exists but it is not supported by the current implementation.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeNoImpl">
            <summary>
            An exception that indicates that the requested operation has not been implemented by the current object.
            </summary>
            <remarks>
            The operation is “not” implemented even if this operation can be called due 
            to the compatibility with the CO standard. That is to say that the operation 
            exists but it is not supported by the current implementation.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeNoImplException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeNoImplException.#ctor">
            <summary>
            Initializes a new instance of the CapeNoImplException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeNoImplException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeNoImplException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeNoImplException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeNoImplException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeNoImplException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeNoImplException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapeOutOfResourcesException">
            <summary>
            An exception class that indicates that the resources required by this operation are not available.
            </summary>
            <remarks>
            The physical resources necessary to the execution of the operation are out of limits.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeOutOfResources">
            <summary>
            An exception that indicates that the resources required by this operation are not available.
            </summary>
            <remarks>
            The physical resources necessary to the execution of the operation are out of limits.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeOutOfResourcesException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeOutOfResourcesException.#ctor">
            <summary>
            Initializes a new instance of the CapeOutOfResourcesException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeOutOfResourcesException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeOutOfResourcesException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeOutOfResourcesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeOutOfResourcesException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeOutOfResourcesException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeOutOfResourcesException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapeNoMemoryException">
            <summary>
            An exception class that indicates that the memory required for this operation is not available.
            </summary>
            <remarks>
            The physical memory necessary to the execution of the operation is out of limit.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeNoMemory">
            <summary>
            An exception that indicates that the memory required for this operation is not available.
            </summary>
            <remarks>
            The physical memory necessary to the execution of the operation is out of limit.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeNoMemoryException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeNoMemoryException.#ctor">
            <summary>
            Initializes a new instance of the CapeNoMemoryException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeNoMemoryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeNoMemoryException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeNoMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeNoMemoryException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeNoMemoryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeNoMemoryException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapePersistenceException">
            <summary>
            An exception class that indicates that the a persistence-related error has occurred.
            </summary>
            <remarks>
            The base class of the errors hierarchy related to the persistence.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapePersistence">
            <summary>
            An exception that indicates that the a persistence-related error has occurred.
            </summary>
            <remarks>
            The base of the errors hierarchy related to the persistence.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapePersistenceException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapePersistenceException.#ctor">
            <summary>
            Initializes a new instance of the CapePersistenceException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapePersistenceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapePersistenceException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapePersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapePersistenceException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapePersistenceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapePersistenceException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapePersistenceNotFoundException">
            <summary>
            An exception class that indicates that the persistence was not found.
            </summary>
            <remarks>
            The requested object, table, or something else within the persistence system was not found.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapePersistenceNotFound">
            <summary>
            An exception that indicates that the persistence was not found.
            </summary>
            <remarks>
            The requested object, table, or something else within the persistence system was not found.
            </remarks>
        </member>
        <member name="P:CapeOpen.ECapePersistenceNotFound.itemName">
            <summary>
            The name of the item.
            </summary>
            <remarks>
            The name of the requested object, table, or something else within the persistence system 
            that was not found.
            </remarks>
            <value>
            The name of the item not found.
            </value>
        </member>
        <member name="M:CapeOpen.CapePersistenceNotFoundException.Initialize(System.String)">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
            <param name = "itemName">
            Name of the item that was not found that is the cause of this exception. 
            </param>
        </member>
        <member name="M:CapeOpen.CapePersistenceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapePersistenceNotFoundException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
            <param name = "itemName">
            Name of the item that was not found that is the cause of this exception. 
            </param>
        </member>
        <member name="M:CapeOpen.CapePersistenceNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the CapePersistenceNotFoundException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
            <param name = "itemName">
            Name of the item that was not found that is the cause of this exception. 
            </param>
        </member>
        <member name="M:CapeOpen.CapePersistenceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.String)">
            <summary>
            Initializes a new instance of the CapePersistenceNotFoundException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
            <param name = "itemName">
            Name of the item that was not found that is the cause of this exception. 
            </param>
        </member>
        <member name="M:CapeOpen.CapePersistenceNotFoundException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            Initializes a new instance of the CapePersistenceNotFoundException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
            <param name = "itemName">
            Name of the item that was not found that is the cause of this exception. 
            </param>
        </member>
        <member name="P:CapeOpen.CapePersistenceNotFoundException.itemName">
            <summary>
            Name of the item that was not found that is the cause of this exception. 
            </summary>
            <remarks>
            Name of the item that was not found that is the cause of this exception. 
            </remarks>
            <value>
            Name of the item that was not found that is the cause of this exception. 
            </value>
        </member>
        <member name="T:CapeOpen.CapePersistenceOverflowException">
            <summary>
            An exception class that indicates an overflow of internal persistence system.
            </summary>
            <remarks>
            During the persistence process, an overflow of internal persistence system occurred.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapePersistenceOverflow">
            <summary>
            An exception that indicates an overflow of internal persistence system.
            </summary>
            <remarks>
            During the persistence process, an overflow of internal persistence system occurred.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapePersistenceOverflowException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapePersistenceOverflowException.#ctor">
            <summary>
            Initializes a new instance of the CapePersistenceOverflowException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapePersistenceOverflowException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapePersistenceOverflowException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapePersistenceOverflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapePersistenceOverflowException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapePersistenceOverflowException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapePersistenceOverflowException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapePersistenceSystemErrorException">
            <summary>
            An exception class that indicates a severe error occurred within the persistence system.
            </summary>
            <remarks>
            During the persistence process, a severe error occurred within the persistence system.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapePersistenceSystemError">
            <summary>
            An exception that indicates a severe error occurred within the persistence system.
            </summary>
            <remarks>
            During the persistence process, a severe error occurred within the persistence system.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapePersistenceSystemErrorException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapePersistenceSystemErrorException.#ctor">
            <summary>
            Initializes a new instance of the CapePersistenceSystemErrorException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapePersistenceSystemErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapePersistenceSystemErrorException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapePersistenceSystemErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapePersistenceSystemErrorException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapePersistenceSystemErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapePersistenceSystemErrorException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapeIllegalAccessException">
            <summary>
            The access to something within the persistence system is not authorised.
            </summary>
            <remarks>
            This exception is thrown when the access to something within the persistence system is not authorised.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeIllegalAccess">
            <summary>
            The access to something within the persistence system is not authorised.
            </summary>
            <remarks>
            This exception is thrown when the access to something within the persistence system is not authorised.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeIllegalAccessException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeIllegalAccessException.#ctor">
            <summary>
            Initializes a new instance of the CapeIllegalAccessException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeIllegalAccessException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeIllegalAccessException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeIllegalAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeIllegalAccessException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeIllegalAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeIllegalAccessException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapeSolvingErrorException">
            <summary>
            An exception class that indicates a numerical algorithm failed for any reason.
            </summary>
            <remarks>
            Indicates that a numerical algorithm failed for any reason.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeSolvingError">
            <summary>
            An exception that indicates a numerical algorithm failed for any reason.
            </summary>
            <remarks>
            Indicates that a numerical algorithm failed for any reason.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeSolvingErrorException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeSolvingErrorException.#ctor">
            <summary>
            Initializes a new instance of the CapeSolvingErrorException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeSolvingErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeSolvingErrorException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeSolvingErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeSolvingErrorException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeSolvingErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeSolvingErrorException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapeHessianInfoNotAvailableException">
            <summary>
            Exception thrown when the Hessian for the MINLP problem is not available.
            </summary>
            <remarks>
            Exception thrown when the Hessian for the MINLP problem is not available.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeHessianInfoNotAvailable">
            <summary>
            Exception thrown when the Hessian for the MINLP problem is not available.
            </summary>
            <remarks>
            Exception thrown when the Hessian for the MINLP problem is not available.
            </remarks>
        </member>
        <member name="P:CapeOpen.ECapeHessianInfoNotAvailable.code">
            <summary>
            Code to designate the subcategory of the error. 
            </summary>
            <remarks>
            The assignment of values is left to each implementation. So that is a 
            proprietary code specific to the CO component provider. By default, set to 
            the CAPE-OPEN error HRESULT <see cref="T:CapeOpen.CapeErrorInterfaceHR"/>.
            </remarks>
            <value>
            The HRESULT value for the exception.
            </value>
        </member>
        <member name="P:CapeOpen.ECapeHessianInfoNotAvailable.description">
            <summary>
            The description of the error.
            </summary>
            <remarks>
            The error description can include a more verbose description of the condition that
            caused the error.
            </remarks>
            <value>
            A string description of the exception.
            </value>
        </member>
        <member name="P:CapeOpen.ECapeHessianInfoNotAvailable.scope">
            <summary>
            The scope of the error.
            </summary>
            <remarks>
            This property provides a list of packages where the error occurs separated by '.'. 
            For example CapeOpen.Common.Identification.
            </remarks>
            <value>The source of the error.</value>
        </member>
        <member name="P:CapeOpen.ECapeHessianInfoNotAvailable.interfaceName">
            <summary>
            The name of the interface where the error is thrown. This is a mandatory field."
            </summary>
            <remarks>
            The interface that the error was thrown.
            </remarks>
            <value>The name of the interface.</value>
        </member>
        <member name="P:CapeOpen.ECapeHessianInfoNotAvailable.operation">
            <summary>
            The name of the operation where the error is thrown. This is a mandatory field.
            </summary>
            <remarks>
            This field provides the name of the operation being perfomed when the exception was raised.
            </remarks>
            <value>The operation name.</value>
        </member>
        <member name="P:CapeOpen.ECapeHessianInfoNotAvailable.moreInfo">
            <summary>
            An URL to a page, document, web site,  where more information on the error can be found. The content of this information is obviously implementation dependent.
            </summary>
            <remarks>
            This field provides an internet URL where more information about the error can be found.
            </remarks>
            <value>The URL.</value>
        </member>
        <member name="M:CapeOpen.CapeHessianInfoNotAvailableException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeHessianInfoNotAvailableException.#ctor">
            <summary>
            Initializes a new instance of the CapeHessianInfoNotAvailableException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeHessianInfoNotAvailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeHessianInfoNotAvailableException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeHessianInfoNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeHessianInfoNotAvailableException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeHessianInfoNotAvailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeHessianInfoNotAvailableException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.CapeTimeOutException">
            <summary>
            Exception thrown when the time-out criterion is reached.
            </summary>
            <remarks>
            Exception thrown when the time-out criterion is reached.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeTimeOut">
            <summary>
            Exception thrown when the time-out criterion is reached.
            </summary>
            <remarks>
            Exception thrown when the time-out criterion is reached.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeTimeOutException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeTimeOutException.#ctor">
            <summary>
            Initializes a new instance of the CapeTimeOutException class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeTimeOutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeTimeOutException class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeTimeOutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeTimeOutException class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeTimeOutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeTimeOutException class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.COMCapeOpenExceptionWrapper">
            <summary>
            A wrapper class for COM-based exceptions.
            </summary>
            <remarks>
            <para>This class can be used when a COM-based CAPE-OPEN component returns a failure HRESULT.
            A failure HRESULT indicates an error condition has occurred. This class is used by the
            <see c = "COMExceptionHandler">COMExceptionHandler</see> to rethrow the COM-based
            error condition as a .Net-based exception.</para>
            <para>The CAPE-OPEN error handling process chose not to use the COM IErrorInfo API due to
            limitation of the Visual Basic programming language at the time that the error
            handling protocols were developed. Instead, the CAPE-OPEN error handling protocol 
            requires that component in which the error occurs expose the appropriate error
            interfaces. In practice, this typically means that all CAPE-OPEN objects
            implement the <see c = "ECapeRoot">ECapeRoot</see>,
            <see c = "ECapeUser">ECapeUser</see>, 
            and sometimes the <see c = "ECapeUnknown">ECapeUnknown</see> error interfaces.</para>
            <para>This class wraps the CAPE-OPEN object that threw the exception and creates the 
            appropriate .Net exception so users can use the .Net exception handling protocols.</para>
            </remarks>
            <see c = "COMExceptionHandler">COMExceptionHandler</see> 
        </member>
        <member name="M:CapeOpen.COMCapeOpenExceptionWrapper.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.COMCapeOpenExceptionWrapper.#ctor(System.String,System.Object,System.Int32,System.Exception)">
            <summary>
            Creates a new instance of the COMCapeOpenExceptionWrapper class.
            </summary>
            <remarks>
            <para>Creates a .Net based exception wrapper for COM-based CAPE-OPEN componets to 
            enable users to utilize .Net structured exception handling.</para>
            </remarks>
            <param name = "message">The error message text from the COM-based component.</param>
            <param name = "exceptionObject">The CAPE-OPEN object that raised the error.</param>
            <param name = "HRESULT">The COM HResult value.</param>
            <param name = "inner">An inner .Net-based exception obtained from the IErrorInfo
            object, if implemented or an accompanying .Net exception.</param>
        </member>
        <member name="T:CapeOpen.CapeThrmPropertyNotAvailableException">
            <summary>
            Exception thrown when a requested theromdynamic property is not available.
            </summary>
            <remarks>
            Exception thrown when a requested theromdynamic property is not available.
            </remarks>
        </member>
        <member name="T:CapeOpen.ECapeThrmPropertyNotAvailable">
            <summary>
            An exception that indicates the requested thermodynamic property was not available.
            </summary>
            <remarks>
            At least one item in the requested properties cannot be returned. This could be 
            because the property cannot be calculated at the specified conditions or for the 
            specified Phase. If the property calculation is not implemented then 
            <see cref="T:CapeOpen.ECapeLimitedImpl"/> should be returned.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeThrmPropertyNotAvailableException.Initialize">
            <summary>
            Initializes the description, interface name and name fields of this exception.
            </summary>
            <remarks>
            <para>Sets the values of the HResult, interface name and exception name.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeThrmPropertyNotAvailableException.#ctor">
            <summary>
            Initializes a new instance of the CapeThrmPropertyNotAvailable class. 
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a 
            system-supplied message that describes the error, such as "An application 
            error has occurred." This message takes into account the current system 
            culture.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeThrmPropertyNotAvailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CapeThrmPropertyNotAvailable class with a specified error message. 
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>This message takes into account the current system culture.</para>
            </remarks>
            <param name = "message">A message that describes the error.</param>
        </member>
        <member name="M:CapeOpen.CapeThrmPropertyNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CapeThrmPropertyNotAvailable class with serialized data.
            </summary>
            <remarks> This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream. For more information, see XML and 
            SOAP Serialization.</remarks>
            <param name = "info">The object that holds the serialized object data.</param>
            <param name = "context">The contextual information about the source or 
            destination. </param>
        </member>
        <member name="M:CapeOpen.CapeThrmPropertyNotAvailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CapeThrmPropertyNotAvailable class with a specified error message and a erence to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            <para>The content of the message parameter is intended to be understood by 
            humans. The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</para>
            <para>An exception that is thrown as a direct result of a previous exception 
            should include a erence to the previous exception in the InnerException 
            property. The InnerException property returns the same value that is passed 
            into the constructor, or a null erence if the InnerException property does 
            not supply the inner exception value to the constructor.</para>
            </remarks>
            <param name = "message">The error message string.</param>
            <param name = "inner">The inner exception erence.</param>
        </member>
        <member name="T:CapeOpen.COMExceptionHandler">
            <summary>
            A helper class for handling exceptions from COM-based CAPE-OPEN components.
            </summary>
            <remarks>
            <para>This class can be used when a COM-based CAPE-OPEN component returns a failure HRESULT.
            A failure HRESULT indicates an error condition has occurred. The <see c ="ExceptionForHRESULT">ExceptionForHRESULT</see> 
            ormats the .Net-bsed exception object and the COM-based CAPE-OPEN component to rethrow the COM-based
            error condition as a .Net-based exception using the <see c = "COMCapeOpenExceptionWrapper">COMCapeOpenExceptionWrapper</see> 
            wrapper class.</para>
            <para>The CAPE-OPEN error handling process chose not to use the COM IErrorInfo API due to
            limitation of the Visual Basic programming language at the time that the error
            handling protocols were developed. Instead, the CAPE-OPEN error handling protocol 
            requires that component in which the error occurs expose the appropriate error
            interfaces. In practice, this typically means that all CAPE-OPEN objects
            implement the <see c = "ECapeRoot">ECapeRoot</see>,
            <see c = "ECapeUser">ECapeUser</see>, 
            and sometimes the <see c = "ECapeUnknown">ECapeUnknown</see> error interfaces.</para>
            </remarks>
            <see c = "COMCapeOpenExceptionWrapper">COMCapeOpenExceptionWrapper</see> 
        </member>
        <member name="M:CapeOpen.COMExceptionHandler.ExceptionForHRESULT(System.Object,System.Exception)">
            <summary>
            Creates and returns a new instance of the COMCapeOpenExceptionWrapper class.
            </summary>
            <remarks>
            <para>Creates a .Net based exception wrapper for COM-based CAPE-OPEN componets to 
            enable users to utilize .Net structured exception handling. This method ormats 
            the .Net-bsed exception object and the COM-based CAPE-OPEN component to rethrow 
            the COM-based error condition as a .Net-based exception using the 
            <see c = "COMCapeOpenExceptionWrapper">COMCapeOpenExceptionWrapper</see> 
            wrapper class.</para>
            </remarks>
            <returns>
            The COM-based object that returned the error HRESULT wrapper as the appropriate .Net-based exception.</returns>
            <param name = "exceptionObject">The CAPE-OPEN object that raised the error.</param>
            <param name = "inner">An inner .Net-based exception obtained from the IErrorInfo
            object, if implemented or an accompanying .Net exception.</param>
            <see c = "COMCapeOpenExceptionWrapper">COMCapeOpenExceptionWrapper</see> 
        </member>
        <member name="T:CapeOpen.BaseUnitEditor">
            <summary>
            Base class for a unit operation editor.
            </summary>
            <remarks> This editor can be used by all unit operations. It creates a tabbed form 
            that exposes the unit's properties (parameters and ports) on the first tab. This 
            editor can be inherited and tabs added to the tab control to customize the form
            for a unit operation.
            </remarks>
        </member>
        <member name="F:CapeOpen.BaseUnitEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CapeOpen.BaseUnitEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CapeOpen.BaseUnitEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CapeOpen.BaseUnitEditor.#ctor(CapeOpen.CapeUnitBase)">
            <remarks>
            Constructor for a standard unit operation editor.
            </remarks>
            <param name = "unit">The unit operation to be edited.</param>
        </member>
        <member name="T:CapeOpen.UnitSelector">
            <summary>
            The unit selector class provides a graphical user interface (GUI) for the <see cref="T:CapeOpen.UnitOperationWrapper"/> class.
            </summary>
        </member>
        <member name="M:CapeOpen.UnitSelector.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:CapeOpen.UnitSelector"/> class.
            </summary>
        </member>
        <member name="F:CapeOpen.UnitSelector.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CapeOpen.UnitSelector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CapeOpen.UnitSelector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CapeOpen.UnitSelector.Unit">
            <summary>
            The type of the unit operation to be created.
            </summary>
            <value>The type of the unit operation to be created.</value>
        </member>
        <member name="T:CapeOpen.UnitOperationWrapper">
            <summary>
            This class provides access to unit operations based upon .Net-based assembly location rules.
            </summary>
            <remarks>
            <para>
            The CAPE-OPEN object model is based upon Microsoft's Component Object Model (COM).
            Computer security practices have evolved to incorporate the principle of least priviledge,
            where users rights on the computer are reduced. This protects various high-risk portions
            of the system, such as the Windows registry, from attack. The disadvantage of least priviledges
            and registry restriction is that it makes development and depolyment of COM-based PMCs difficult
            because the local user is unable to install and register the components. 
            </para>
            <para>
            This class utilizes various .Net file location schemes to enable users to develop and
            deploy new unit operation PMCs on their machine under the restrictions imposed by 
            least priviledges. In particular, it can detect if the debugger is attached and can identifiy 
            the assembly being debugged, making it available in the debugger to check the progress of
            the unit. Further, it creates and uses a "CapeOpen Objects" directory located in the current user's 
            %ProgramFiles%\CommonFiles directory. Subdirectories under this directory are also inspected.
            </para>
            <para>
            Assemblies that contain PMCs developed using this .Net-based class library should be 
            placed in a sudirectory under the %Program Files%\CommonFiles\CapeOpen Objects directory.
            </para>
            </remarks>
        </member>
        <member name="T:CapeOpen.ICapeUnit">
            <summary>
            This interface handles most of the interaction with the Flowsheet Unit.
            </summary>
            <remarks>
            This interface provides the basic funcational requirements for a unit operation 
            component that can be inserted into a flowsheeting package.
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeUnit.Calculate">
            <summary>
            Executes the necessary calculations involved in the unit operation model.
            </summary>
            <remarks>
            <para>The Flowsheet Unit performs its calculation, that is, computes the variables 
            that are missing at this stage in the complete description of the input and output 
            streams and computes any public parameter value that needs to be displayed. Calculate 
            will be able to do progress monitoring and checks for interrupts as required using 
            the simulation context. At present, there are no standards agreed for this.</para>
            <para>It is recommended that Flowsheet Units perform a suitable flash calculation on 
            all output streams. In some cases a Simulation Executive will be able to perform a 
            flash calculation but the writer of a Flowsheet Unit is in the best position to 
            decide the correct flash to use. </para>
            <para>Before performing the calculation, this method should perform any final 
            validation tests that are required. For example, at this point the validity of 
            Material Objects connected to ports can be checked.</para>
            <para>There are no input or output arguments for this method.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeTimeOut">ECapeTimeOut</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">ECapeSolvingError</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
        </member>
        <member name="M:CapeOpen.ICapeUnit.Validate(System.String@)">
            <summary>
            Validate the unit operation to verify that the parameters and ports are 
            all valid. If invalid, this method returns a message indicating the 
            reason that the unit is invalid.
            </summary>
            <remarks>
            <para>Sets the flag that indicates whether the Flowsheet Unit is valid by validating 
            the ports and parameters of the Flowsheet Unit. For example, this method could check 
            that all mandatory ports have connections and that the values of all parameters are 
            within bounds.</para>
            <para>Note that the Simulation Executive can call the Validate routine at any time, 
            in particular it may be called before the executive is ready to call the Calculate 
            method. This means that Material Objects connected to unit ports may not be correctly 
            configured when Validate is called. The recommended approach is for this method to 
            validate parameters and ports but not Material Object configuration. A second level 
            of validation to check Material Objects can be implemented as part of Calculate, when 
            it is reasonable to expect that the Material Objects connected to ports will be 
            correctly configured.</para>
            </remarks>
            <returns>
            <para>true, if the unit is valid.</para>
            <para>false, if the unit is not valid.</para>
            </returns>
            <param name="message">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadCOParameter">ECapeBadCOParameter</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
        </member>
        <member name="P:CapeOpen.ICapeUnit.ports">
            <summary>
            Gets the collection of unit operation ports.
            </summary>
            <remarks>
            <para>Return an interface to a collection containing the list of unit ports (e.g. 
            <see name="ICapeCollection"/>).</para>
            <para>Return the collection of unit ports (i.e. ICapeUnitCollection). These are 
            delivered as a collection of elements exposing the interfaces <see name="ICapeUnitPort"/>
            </para>
            </remarks>
            <value>The port collection of the unit operation.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
        </member>
        <member name="P:CapeOpen.ICapeUnit.ValStatus">
            <summary>
            Gets the flag to indicate the unit operation's validation status
            <see cref="T:CapeOpen.CapeValidationStatus">CapeValidationStatus</see>.
            </summary>
            <remarks>
            <para>Get the flag that indicates whether the Flowsheet Unit is valid (e.g. some 
            parameter values have changed but they have not been validated by using Validate). 
            It has three possible values:</para>
            <para>   (i)   notValidated(CAPE_NOT_VALIDATED): The PMC's <c>Validate()</c>
            method has not been called after the last time that its value had been 
            changed.</para>
            <para>   (ii)  invalid(CAPE_INVALID): The last time that the PMC's 
            <c>Validate()</c> method was called it returned false.</para>
            <para>   (iii) valid(CAPE_VALID): the last time that the PMC's
            Validate() method was called it returned true.</para>
            </remarks>
            <value>A flag that indiciates the validation status of the unit operation.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="T:CapeOpen.ICapeUtilities">
            <summary>
            Interface that exposes a PMC's parameters, controls the PMC's lifecycle, 
            provides access to the PME through the simulation context, and provides a 
            means for the PME to edit the PMC.
            </summary>
            <remarks>
            <para>When a PME requires some kind of functionality, with the help of the 
            CAPE-OPEN categories, the user is able to select and create a CO class which 
            will expose the required CO interfaces. There is the need for the PME to 
            exchange some information with this instance of the PMC. This information 
            consists in a set of simple unrelated functionalities that will be useful for 
            any kind of CAPE-OPEN component, since they will allow maximum integration 
            between clients and servers. All these functionalities can be grouped in a 
            single interface. Some of the functionalities to fulfil consist in exchanging 
            interface references between the PMC and the PME. Instead of adding these 
            properties to each business interfaces, it is much more convenient to
            add them to a single common interface which refers to the whole PMC.</para>
            <para>Furthermore, there is a need for getting parameters, editing and 
            lifecycling.</para>
            <para>The interface should fulfil the following requirements:</para>
            <para>Parameters:</para>
            <para>So far, only Unit Operations can expose their public parameters, through 
            property ICapeUnit.parameters, which returns a collection of parameters. This 
            property allows COSEs to support design specs between two CAPE-OPEN Unit 
            Operations. That means that the CAPE-OPEN interfaces are powerful enough to 
            allow that the design spec of a given Unit Operation (exposed through public 
            parameters) depends on transformations of public parameters exposed by other 
            CAPE-OPEN Unit Operations. If also other components, such as Material Object, 
            would be able to expose public parameters, the functionality the aforementioned 
            described functionality could be extended. Other functionalities would be:
            </para>
            <para>(i) allowing optimizers to use a public variable exposed by any 
            CAPE-OPEN component.</para>
            <para>(ii) Allow performing regression on the interaction parameters of a 
            CAPE-OPEN Property Package.</para>
            <para>Centralising the property that accesses these collections in a single 
            entry point, helps to clarify the life cycle usage standards for these 
            collections. That means that it will be easier for the PMC clients to know 
            how often they have to check whether the contents of these collections have 
            changed (although the collection object will be valid until the PMC is 
            destroyed). Setting general rules for the usage of these collections makes 
            the business interface specifications more regular and simpler. Obviously, 
            since too general rules may reduce flexibility, PMC specifications might point
            out exceptions to the general rule. Let’s see how would this affect the 
            particular PMC specifications:</para>
            <para>Simulation context:</para>
            <para>So far, most of CAPE-OPEN interfaces have been designed to allow a 
            client to access the functionality of a CAPE-OPEN component. Since clients 
            will often be Simulation Environment, CAPE-OPEN components would benefit from 
            using functionality provided by their client, a COSE for instance. These 
            services provided by any PMEs are defined within the Simulation Context COSE 
            Interface specification document.</para>
            <para>The following interfaces are designed:</para>
            <para>(i) Thermo Material Template Systems: Theses interface allows a PMC to 
            choose between all the Thermo Material factories supported by the PME. These 
            factories will allow the PMC to create a thermo material object associated to 
            the elected Property Package (which can be CAPE-OPEN or not).</para>
            <para>(ii) Diagnostics: This interface will allow to integrate seamlessly the 
            diagnostics messages generated by any PMC with the mechanisms supported by 
            the PME to display this information to the user.</para>
            <para>(iii) COSEUtilities: In the same idea of this specification document, 
            PME has also its own utilities interface in order to gather many basic 
            operations. For instance that allows the PME to supply a list of standardised 
            values.</para>
            <para>Edit:</para>
            <para>The Edit method defined by the UNIT specification proved to be very useful in 
            order to provide Graphical User Interface (GUI) capabilities highly customized 
            to each type of UNIT implementation. There’s no reason why other PMCs could 
            not benefit of this capability. Obviously, when a PMC provides Edit 
            functionality, being able to persist its state is a desired requirements, to 
            prevent the user from having to repeatedly reconfigure the PMC.</para>
            <para>LifeCycle:</para>
            <para>There is probably no strict necessity to expose directly initialization 
            nor destruction functions, since these should be invoked automatically by the 
            used middleware (COM/CORBA). That is, the initialization could be performed 
            in the constructor of the class and the destroy in its destructor. However, 
            in some cases the client could need to invoke them explicitly. For example, 
            all actions that could fail should be invoked by these methods. If these 
            actions were places in the constructor or destructor, potential failures 
            would cause memory leak, and they would be difficult to track, since it would 
            not be clear if the component has been created/destroyed or not. Examples of 
            cases where they are useful:</para>
            <para>(i) Initialize: The client might need to initialize a given set of PMC 
            in a specific order, in case that there are dependencies between them. Some 
            PMC may be wrappers to other components, or may need an external file to get 
            initialized. This initialization process may often fail, or the user may even 
            decide to cancel it. Moving these actions from the class constructor to the 
            initialize method allows communicating the client that the construction of
            the component must be aborted in some cases.</para>
            <para>(ii) Destructors: The PMC primary object should destroy here all its secondary 
            objects. Relying on the native destructor could cause deadlocks when loop 
            references exist between PMC objects. See in the example diagram below that 
            after the client releases its reference to the Unit Operation, both the Unit 
            and the Parameter are being used by another objects. So, without an explicit 
            terminate method, none of them would be ever terminated.</para>
            <para>Reference document: Utilities Common Interface</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeUtilities.Initialize">
            <summary>
            The component is asked to configure itself. For example a Unit Operation might create ports and parameters during this call
            </summary>
            <remarks>
            <para>Initially, this method was only present in the ICapeUnit interface. 
            Since ICapeUtilities.Initialize is now available for any kind of PMC, 
            ICapeUnit. Initialize is deprecated.</para>
            <para>The PME will order the PMC to get initialized through this method. 
            Any initialisation that could fail must be placed here. Initialize is 
            guaranteed to be the first method called by the client (except low level 
            methods such as class constructors or initialization persistence methods).
            Initialize has to be called once when the PMC is instantiated in a 
            particular flowsheet.</para>
            <para>When the initialization fails, before signalling an error, the PMC 
            must free all the resources that were allocated before the failure 
            occurred. When the PME receives this error, it may not use the PMC 
            anymore.</para>
            <para>The method terminate of the current interface must not either be 
            called. Hence, the PME may only release the PMC through the middleware 
            native mechanisms.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
        </member>
        <member name="M:CapeOpen.ICapeUtilities.Terminate">
            <summary>
            Clean-up tasks can be performed here. References to parameters and ports are released here.
            </summary>
            <remarks>
            <para>Initially, this method was only present in the ICapeUnit interface. 
            Since ICapeUtilities.Terminate is now available for any kind of PMC, 
            ICapeUnit.Terminate is deprecated.</para>
            <para>The PME will order the PMC to get destroyed through this method. 
            Any uninitialization that could fail must be placed here. ‘Terminate’ is 
            guaranteed to be the last method called by the client (except low level 
            methods such as class destructors). ‘Terminate’ may be called at any time, 
            but may be only called once.</para>
            <para>When this method returns an error, the PME should report the user. 
            However, after that the PME is not allowed to use the PMC anymore.</para>
            <para>The Unit specification stated that “Terminate may check if the data 
            has been saved and return an error if not.” It is suggested not to follow 
            this recommendation, since it’s the PME responsibility to save the state 
            of the PMC before terminating it. In the case that a user wants to close 
            a simulation case without saving it, it’s better to leave the PME to 
            handle the situation instead of each PMC providing a different 
            implementation.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
        </member>
        <member name="M:CapeOpen.ICapeUtilities.Edit">
            <summary>
            Displays the PMC graphic interface, if available.
            </summary>
            <remarks>
            The PMC displays its user interface and allows the Flowsheet User to 
            interact with it. If no user interface is available it returns an error.
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.ICapeUtilities.parameters">
            <summary>
            Gets the component's collection of parameters. 
            </summary>
            <remarks>
            <para>Return the collection of Public Unit Parameters (i.e. 
            <see cref="T:CapeOpen.ICapeCollection"/>.</para>
            <para>These are delivered as a collection of elements exposing the interface 
            <see cref="T:CapeOpen.ICapeParameter"/>. From there, the client could extract the 
            <see cref="T:CapeOpen.ICapeParameterSpec"/> interface or any of the typed
            interfaces such as <see cref="T:CapeOpen.ICapeRealParameterSpec"/>, once the client 
            establishes that the Parameter is of type double.</para>
            </remarks>
            <value>The parameter collection of the unit operation.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="P:CapeOpen.ICapeUtilities.simulationContext">
            <summary>
            Sets the component's simulation context.
            </summary>
            <remarks>
            <para>Allows the PME to convey the PMC a reference to the former’s 
            simulation  context. The simulation context will be PME objects which will 
            expose a given set of CO interfaces. Each of these interfaces will allow 
            the PMC to call back the PME in order to benefit from its exposed services 
            (such as creation of material templates, diagnostics or measurement unit 
            conversion). If the PMC does not support accessing the simulation context, 
            it is recommended to raise the ECapeNoImpl error.</para>
            <para>Initially, this method was only present in the ICapeUnit interface. 
            Since ICapeUtilities.SetSimulationContext is now available for any kind of 
            PMC, ICapeUnit.SetSimulationContext is deprecated.</para>
            </remarks>
            <value>
            The reference to the PME’s simulation context class. For the PMC to use 
            this class, this reference will have to be converted to each of the 
            defined CO Simulation Context interfaces.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="T:CapeOpen.ICapeUnitReport">
            <summary>
            This interface provides access to the active unit report and the available list of options. 
            </summary>
            <remarks>
            It also provides a trigger for the creation of a report.
            </remarks>
            
        </member>
        <member name="M:CapeOpen.ICapeUnitReport.ProduceReport(System.String@)">
            <summary>
            Produces the active report for the unit operation.
            </summary>
            <remarks>
            Produce the designated report. If no value has been set, it produces the default 
            report.
            </remarks>
            <param name="message">String containing the text for the currently selected report.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="P:CapeOpen.ICapeUnitReport.reports">
            <summary>
            Gets the list of possible reports for the unit operation.
            </summary>
            <remarks>
            Return the list of available Flowsheet Unit reports.
            </remarks>
            <value>
            The list of possible reports for the unit operation.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="P:CapeOpen.ICapeUnitReport.selectedReport">
            <summary>
            Gets and sets the current active report for the unit operation.
            </summary>
            <remarks>
            Return/set the active report in the Flowsheet Unit.
            </remarks>
            <value>
            The current active report for the unit operation.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="F:CapeOpen.UnitOperationWrapper.p_Unit">
            <summary>
            The wrapped unit operation.
            </summary>
        </member>
        <member name="M:CapeOpen.UnitOperationWrapper.#ctor">
            <summary>
            Creates an instance of the UnitOperationWrapper unit operation.
            </summary>
            <remarks>
            This constructor demonstates the addition of a <see cref="T:CapeOpen.BooleanParameter"/>,
            <see cref="T:CapeOpen.IntegerParameter"/>, <see cref="T:CapeOpen.OptionParameter"/>,
            and a <see cref="T:CapeOpen.RealParameter"/> parameter to the parameter collection.
            In addition, the mixer unit has three <see cref="T:CapeOpen.UnitPort"/> ports
            added to the port collection. See the documentation for the 
            <see cref="M:CapeOpen.MixerExample.OnCalculate"/> method for details on its implementation.
            </remarks>
        </member>
        <member name="M:CapeOpen.UnitOperationWrapper.RegisterFunction(System.Type)">
            <summary>
            The function that controls COM registration.  
            </summary>
            <remarks>
            This function adds the registration keys specified in the CAPE-OPEN Method and
            Tools specifications. In particular, it indicates that this unit operation implements
            the CAPE-OPEN Unit Operation Category Identification. It also adds the CapeDescription
            registry keys using the <see cref="T:CapeOpen.CapeNameAttribute"/>, <see cref="T:CapeOpen.CapeDescriptionAttribute"/>, <see cref="T:CapeOpen.CapeVersionAttribute"/>
            <see cref="T:CapeOpen.CapeVendorURLAttribute"/>, <see cref="T:CapeOpen.CapeHelpURLAttribute"/>, 
            and <see cref="T:CapeOpen.CapeAboutAttribute"/> attributes.
            </remarks>
            <param name="t">The type of the class being registered.</param> 
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.UnitOperationWrapper.UnregisterFunction(System.Type)">
            <summary>
            This function controls the removal of the class from the COM registry when the class is unistalled.  
            </summary>
            <remarks>
            The method will remove all subkeys added to the class' regristration, including the CAPE-OPEN
            specific keys added in the <see cref="M:CapeOpen.UnitOperationWrapper.RegisterFunction(System.Type)"/> method.
            </remarks>
            <param name="t">The type of the class being unregistered.</param> 
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.UnitOperationWrapper.Initialize">
            <summary>
            The component is asked to configure itself. For example a Unit Operation might create ports and parameters during this call
            </summary>
            <remarks>
            <para>Initially, this method was only present in the ICapeUnit interface. 
            Since ICapeUtilities.Initialize is now available for any kind of PMC, 
            ICapeUnit. Initialize is deprecated.</para>
            <para>The PME will order the PMC to get initialized through this method. 
            Any initialisation that could fail must be placed here. Initialize is 
            guaranteed to be the first method called by the client (except low level 
            methods such as class constructors or initialization persistence methods).
            Initialize has to be called once when the PMC is instantiated in a 
            particular flowsheet.</para>
            <para>When the initialization fails, before signalling an error, the PMC 
            must free all the resources that were allocated before the failure 
            occurred. When the PME receives this error, it may not use the PMC 
            anymore.</para>
            <para>The method terminate of the current interface must not either be 
            called. Hence, the PME may only release the PMC through the middleware 
            native mechanisms.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
        </member>
        <member name="M:CapeOpen.UnitOperationWrapper.Terminate">
            <summary>
            Clean-up tasks can be performed here. References to parameters and ports are released here.
            </summary>
            <remarks>
            <para>Initially, this method was only present in the ICapeUnit interface. 
            Since ICapeUtilities.Terminate is now available for any kind of PMC, 
            ICapeUnit.Terminate is deprecated.</para>
            <para>The PME will order the PMC to get destroyed through this method. 
            Any uninitialization that could fail must be placed here. ‘Terminate’ is 
            guaranteed to be the last method called by the client (except low level 
            methods such as class destructors). ‘Terminate’ may be called at any time, 
            but may be only called once.</para>
            <para>When this method returns an error, the PME should report the user. 
            However, after that the PME is not allowed to use the PMC anymore.</para>
            <para>The Unit specification stated that “Terminate may check if the data 
            has been saved and return an error if not.” It is suggested not to follow 
            this recommendation, since it’s the PME responsibility to save the state 
            of the PMC before terminating it. In the case that a user wants to close 
            a simulation case without saving it, it’s better to leave the PME to 
            handle the situation instead of each PMC providing a different 
            implementation.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
        </member>
        <member name="M:CapeOpen.UnitOperationWrapper.Edit">
            <summary>
            Displays the PMC graphic interface, if available.
            </summary>
            <remarks>
            The PMC displays its user interface and allows the Flowsheet User to 
            interact with it. If no user interface is available it returns an error.
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.UnitOperationWrapper.Calculate">
            <summary>
            Executes the necessary calculations involved in the unit operation model.
            </summary>
            <remarks>
            <para>The Flowsheet Unit performs its calculation, that is, computes the variables 
            that are missing at this stage in the complete description of the input and output 
            streams and computes any public parameter value that needs to be displayed. Calculate 
            will be able to do progress monitoring and checks for interrupts as required using 
            the simulation context. At present, there are no standards agreed for this.</para>
            <para>It is recommended that Flowsheet Units perform a suitable flash calculation on 
            all output streams. In some cases a Simulation Executive will be able to perform a 
            flash calculation but the writer of a Flowsheet Unit is in the best position to 
            decide the correct flash to use. </para>
            <para>Before performing the calculation, this method should perform any final 
            validation tests that are required. For example, at this point the validity of 
            Material Objects connected to ports can be checked.</para>
            <para>There are no input or output arguments for this method.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeTimeOut">ECapeTimeOut</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">ECapeSolvingError</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
        </member>
        <member name="M:CapeOpen.UnitOperationWrapper.Validate(System.String@)">
            <summary>
            Validate the unit operation to verify that the parameters and ports are 
            all valid. If invalid, this method returns a message indicating the 
            reason that the unit is invalid.
            </summary>
            <remarks>
            <para>Sets the flag that indicates whether the Flowsheet Unit is valid by validating 
            the ports and parameters of the Flowsheet Unit. For example, this method could check 
            that all mandatory ports have connections and that the values of all parameters are 
            within bounds.</para>
            <para>Note that the Simulation Executive can call the Validate routine at any time, 
            in particular it may be called before the executive is ready to call the Calculate 
            method. This means that Material Objects connected to unit ports may not be correctly 
            configured when Validate is called. The recommended approach is for this method to 
            validate parameters and ports but not Material Object configuration. A second level 
            of validation to check Material Objects can be implemented as part of Calculate, when 
            it is reasonable to expect that the Material Objects connected to ports will be 
            correctly configured.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadCOParameter">ECapeBadCOParameter</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
        </member>
        <member name="M:CapeOpen.UnitOperationWrapper.ProduceReport(System.String@)">
            <summary>
            Produces the active report for the unit operation.
            </summary>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="P:CapeOpen.UnitOperationWrapper.ComponentName">
            <summary>
            Gets and sets the name of the component.
            </summary>
            <remarks>
            <para>A particular Use Case in a system may contain several CAPE-OPEN components 
            of the same class. The user should be able to assign different names and 
            descriptions to each instance in order to refer to them unambiguously and in a 
            user-friendly way. Since not always the software components that are able to 
            set these identifications and the software components that require this information 
            have been developed by the same vendor, a CAPE-OPEN standard for setting and 
            getting this information is required.</para>
            <para>So, the component will not usually set its own name and description: the 
            user of the component will do it.</para>
            </remarks>
            <value>The unique name of the component.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.UnitOperationWrapper.ComponentDescription">
            <summary>
            Gets and sets the description of the component.
            </summary>
            <remarks>
            <para>A particular Use Case in a system may contain several CAPE-OPEN components 
            of the same class. The user should be able to assign different names and 
            descriptions to each instance in order to refer to them unambiguously and in a 
            user-friendly way. Since not always the software components that are able to 
            set these identifications and the software components that require this information 
            have been developed by the same vendor, a CAPE-OPEN standard for setting and 
            getting this information is required.</para>
            <para>So, the component will not usually set its own name and description: the 
            user of the component will do it.</para>
            </remarks>
            <value>The description of the component.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.UnitOperationWrapper.parameters">
            <summary>
            Gets the component's collection of parameters.
            </summary>
            <remarks>
            <para>Returns an ICapeCollection interface. This interface will contain a 
            collection of ICapeParameter interfaces. This method allows any client to 
            access all the CO Parameters exposed by a PMC. Initially, this method was 
            only present in the ICapeUnit interface. Since ICapeUtilities.GetParameters 
            is now available for any kind of PMC, ICapeUnit.GetParameters is 
            deprecated. Consult the “Open Interface Specification: Parameter Common 
            Interface” document for more information about parameter. Consult the 
            “Open Interface Specification: Collection Common Interface” document for 
            more information about collection.</para>
            <para>If the PMC does not support exposing its parameters, it should raise 
            the ECapeNoImpl error, instead of returning a NULL reference or an empty 
            Collection. But if the PMC supports parameters but has for this call no 
            parameters, it should return a valid ICapeCollection reference exposing 
            zero parameters.</para>
            </remarks>
            <value>The parameter collection for the unit operation.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="P:CapeOpen.UnitOperationWrapper.simulationContext">
            <summary>
            Sets the component's simulation context.
            </summary>
            <remarks>
            <para>Allows the PME to convey the PMC a reference to the former’s 
            simulation  context. The simulation context will be PME objects which will 
            expose a given set of CO interfaces. Each of these interfaces will allow 
            the PMC to call back the PME in order to benefit from its exposed services 
            (such as creation of material templates, diagnostics or measurement unit 
            conversion). If the PMC does not support accessing the simulation context, 
            it is recommended to raise the ECapeNoImpl error.</para>
            <para>Initially, this method was only present in the ICapeUnit interface. 
            Since ICapeUtilities.SetSimulationContext is now available for any kind of 
            PMC, ICapeUnit. SetSimulationContext is deprecated.</para>
            </remarks>
            <value>
            The reference to the PME’s simulation context class. For the PMC to use 
            this class, this reference will have to be converted to each of the 
            defined CO Simulation Context interfaces.
            </value>
            <value>The simulation context provided by the PME.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="P:CapeOpen.UnitOperationWrapper.ports">
            <summary>
            Gets the collection of unit operation ports.
            </summary>
            <remarks>
            <para>Return an interface to a collection containing the list of unit ports (e.g. 
            <see name="ICapeCollection"/>).</para>
            <para>Return the collection of unit ports (i.e. ICapeUnitCollection). These are 
            delivered as a collection of elements exposing the interfaces <see name="ICapeUnitPort"/>
            </para>
            </remarks>
            <value>The <see cref="T:CapeOpen.UnitPort"/> collection of the unit operation.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
        </member>
        <member name="P:CapeOpen.UnitOperationWrapper.ValStatus">
            <summary>
            Gets the flag to indicate the unit operation's validation status
            <see cref="T:CapeOpen.CapeValidationStatus">CapeValidationStatus</see>.
            </summary>
            <remarks>
            <para>Get the flag that indicates whether the Flowsheet Unit is valid (e.g. some 
            parameter values have changed but they have not been validated by using Validate). 
            It has three possible values:</para>
            <para>   (i)   notValidated(CAPE_NOT_VALIDATED): The PMC's <c>Validate()</c>
            method has not been called after the last time that its value had been 
            changed.</para>
            <para>   (ii)  invalid(CAPE_INVALID): The last time that the PMC's 
            <c>Validate()</c> method was called it returned false.</para>
            <para>   (iii) valid(CAPE_VALID): the last time that the PMC's
            Validate() method was called it returned true.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.UnitOperationWrapper.reports">
            <summary>
            Gets the list of possible reports for the unit operation.
            </summary>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="P:CapeOpen.UnitOperationWrapper.selectedReport">
            <summary>
            Gets and sets the current active report for the unit operation.
            </summary>
            <value>The report to be generated.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="T:CapeOpen.ICapeSimulationContext">
            <summary>
            Encloses the diagnostic functionality.
            </summary>
            <remarks>
            An intferace to be supported by the PME in order to pass a reference to the 
            ICapeUtilities:SetSimulation to the PMC. The PMC may then 
            use any of the PME COSE interfaces.
            </remarks>
        </member>
        <member name="T:CapeOpen.ICapeDiagnostic">
             <summary>
             Provides a mechanism to provide verbose messages to the user.
             </summary>
             <remarks>
             The communication of verbose information from the PMC to the PME (and hence to the
            user). PMCs should be able to log or display information to the user while it is executing 
             a flowsheet. Rather than each PMC performing these tasks by the means of different
             mechanisms, it is much preferable to redirect them all to the PME services for
             communicating with the user. The Error Common Interfaces do not fulfil these requirements,
             since they stop the execution of the PMC code and signal an abnormal situation to the PME.
             The document deals with the transferral of simple informative or warning messages.
             </remarks>
        </member>
        <member name="M:CapeOpen.ICapeDiagnostic.PopUpMessage(System.String)">
            <summary>
            Writes a message to the terminal.
            </summary>
            <remarks>
            <para>Write a string to the terminal.</para>
            <para>This method is called when a message needs to be brought to the user’s attention.
            The implementation should ensure that the string is written out to a dialogue box or 
            to a message list that the user can easily see.</para>
            <para>A priori this message has to be displayed as soon as possible to the user.</para>
            </remarks>
            <param name="message">The text to be displayed.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapeDiagnostic.LogMessage(System.String)">
            <summary>
            Writes a string to the PME's log file.
            </summary>
            <remarks>
            <para>Write a string to a log.</para>
            <para>This method is called when a message needs to be recorded for logging purposes. 
            The implementation is expected to write the string to a log file or other journaling 
            device.</para>
            </remarks>
            <param name="message">The text to be logged.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="T:CapeOpen.ICapeMaterialTemplateSystem">
            <summary>
            Creates a new thermo material template of the specified type.
            </summary>
            <remarks>
            When a Unit Operation needs to obtain thermodynamic calculations, it will 
            typically perform them on the material objects attached to the Unit ports. However, 
            in some cases, like distillation columns, there may be the need to utilise a different 
            Property Package. Even the user could be requested to choose which thermodynamic 
            model to must be used. All the mechanisms for accessing CAPE-OPEN Property Packages 
            are already in the COSE´s, as part of the functionality necessary for making use of 
            CAPE-OPEN Property Packages. Therefore, instead of each PMC implementing support for 
            performing this selection and creation of thermo engine, delegating that 
            responsibility to the COSE will result in thinner and easier to code Unit Operation
            Components. If configuration of Material Templates is in the PME side, the only 
            additional functionality the Unit Operation would require is that for accessing the 
            list of already configured Material Templates, and picking one of them.
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeMaterialTemplateSystem.CreateMaterialTemplate(System.String)">
            <summary>
            Creates a new thermo material template of the specified type.
            </summary>
            <remarks>
            When a Unit Operation needs to obtain thermodynamic calculations, it will 
            typically perform them on the material objects attached to the Unit ports. However, 
            in some cases, like distillation columns, there may be the need to utilise a different 
            Property Package. Even the user could be requested to choose which thermodynamic 
            model to must be used. All the mechanisms for accessing CAPE-OPEN Property Packages 
            are already in the COSE´s, as part of the functionality necessary for making use of 
            CAPE-OPEN Property Packages. Therefore, instead of each PMC implementing support for 
            performing this selection and creation of thermo engine, delegating that 
            responsibility to the COSE will result in thinner and easier to code Unit Operation
            Components. If configuration of Material Templates is in the PME side, the only 
            additional functionality the Unit Operation would require is that for accessing the 
            list of already configured Material Templates, and picking one of them.
            </remarks>
            <returns>
            Returns StringArray of material template names supported by the COSE. This can include:
            - CAPE-OPEN standalone property packages
            - CAPE-OPEN property packages that depend on a Property System
            - Property packages that are native to the COSE.
            </returns>
            <param name="materialTemplateName">TThe name of the material template to be resolved (which 
            must be included in the list returned by MaterialTemplates)</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeMaterialTemplateSystem.MaterialTemplates">
            <summary>
            Creates a new thermo material template of the specified type.
            </summary>
            <remarks>
            When a Unit Operation needs to obtain thermodynamic calculations, it will 
            typically perform them on the material objects attached to the Unit ports. However, 
            in some cases, like distillation columns, there may be the need to utilise a different 
            Property Package. Even the user could be requested to choose which thermodynamic 
            model to must be used. All the mechanisms for accessing CAPE-OPEN Property Packages 
            are already in the COSE´s, as part of the functionality necessary for making use of 
            CAPE-OPEN Property Packages. Therefore, instead of each PMC implementing support for 
            performing this selection and creation of thermo engine, delegating that 
            responsibility to the COSE will result in thinner and easier to code Unit Operation
            Components. If configuration of Material Templates is in the PME side, the only 
            additional functionality the Unit Operation would require is that for accessing the 
            list of already configured Material Templates, and picking one of them.
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="T:CapeOpen.ICapeCOSEUtilities">
            <summary>
            Provides a mechanism for the PMC to obtain a free FORTRAN channel from the PME.
            </summary>
            <remarks>
            When a PMC is wrapping a FORTRAN dll, there may be a technical problem when the PMC
            is loaded in the same process as the PME such as Simulator Execution. In this case, there
            may be a clash between different FORTRAN modules if two of them select the same output 
            channel for FORTRAN messaging. Hence the PME should centralise the generation of
            unique output channels for each PMC that may require them. This requirement only occurs
            when PME and PMC belong to the same computing process, obviously this FORTRAN
            channel functionality is only applicable when the architecture is not distributed. As we can
            have in the future this kind of information to exchange, a generic and extensible mechanism
            has to be set up. The calling pattern is a good candidate. Thus a specific string value for
            FORTRAN channel would be standardised.
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeCOSEUtilities.NamedValue(System.String)">
            <summary>
            Returns a value corresponding to the request name, including a free FORTRAN channel.
            </summary>
            <remarks>
            
            </remarks>
            <returns>
            Returns the value corresponding to the value named name. Be aware that two 
            consecutive calls passing the same name may return different values. The COSE will 
            return a different FORTRAN channel each time the FreeFORTRANchannel NamedValue is 
            called for this property. The COSE may not use any of the returned FORTRAN channels 
            for any internally used FORTRAN module.
            </returns>
            <param name="value">Name of the requested value (which must be included in the list
            returned by NamedValueList).</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.ICapeCOSEUtilities.NamedValueList">
            <summary>
            The list of named values supported by the PME.
            </summary>
            <remarks>
            The list of NamedValues provided by the PME.
            </remarks>
            <returns>
            Returns a String Array list of named values supported by the COSE. Included in this list
            should be the FreeFORTRANchannel named value which will provide the name of free FORTRAN
            channel.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.WARalgorithm">
            <summary>
            Performs US EPA Waste Reduction (WAR) algorithm calculation on a flowsheet accessed using the 
            <see cref="T:CapeOpen.ICapeFlowsheetMonitoring"/> interface.
            </summary>
            <remarks>
            <para>
            The WAR plug-in works by directly access the unit operations and material flows within the flowsheet. 
            Once the WAR plug-in has been instantiated by the flowsheeting environment, in this case, COFE, the WAR 
            plug-in is initialized and provided with a reference to the flowsheet monitoring interface enabling the 
            plug-in to directly access the flowsheet’s unit operation and stream collections. The flowsheet 
            monitoring interface is one of the features of the simulation context provided by COFE to the WAR 
            plug-in.</para>
            <para>
            Upon activation, the WAR plug-in enumerates all of the unit operations and streams contained within the 
            flowsheet using the flowsheet monitoring interface. First, the plug-in places references to the streams 
            in two stream collections, separate input and output stream collections. The unit operations in the unit
            operation collection are queried for inlet and outlet ports. The streams connected to these ports are 
            matched against the streams in the input and/or output stream collections. Streams that are attached to 
            input ports for a unit operation are then removed from the output stream collections as the no longer 
            leave the process. Likewise, streams that are attached to an outlet port are removed from the input 
            stream collection as they originate within the process. That is, streams not connected to any unit 
            operation outlet port are considered feed streams, and streams that are not connected to any unit
            operation inlet port are considered output streams. An exception to this rule is that some PMEs utilize 
            “source” unit operations that only have a single outlet stream and no inlet streams. These units are 
            considered to be feed units, and the stream connected to it is considered to be a feed stream. 
            Analogously, unit operations that have only a single inlet port and no outlet ports are considered to 
            be product units; the streams connected to it are considered to be product streams.
            </para>
            <para>This plug-in also allows users to select only portions of the flowsheet for a WAR analysis. This 
            is accomplished by having the user select the unit operations of interest. The feed and product stream 
            algorithms for a sub-set of the total unit operation collection are similar to the algorithm described 
            above for the total flowsheet. 
            </para>
            <para>Once the feed and product streams have been identified, the plug-in performs its WAR calculation. 
            The specific PEI, ψ<sub>(k,i)</sub><sup>S</sup>, for each chemical is calculated by averaging the impact category scores 
            for all the chemicals in the database and normalizing by dividing the chemical’s score by the average 
            value. Once the normalized ψ<sub>(k,i)</sub><sup>S</sup> has been calculated, the PEI generated by the 
            process, İ<sub>gen</sub>, is calculated using the normalized value of ψ<sub>(k,i)</sub><sup>S</sup> for 
            the individual categories, category weighting factor mass flow rates and the concentration of the 
            chemical of each stream. The plug-in allows the user to designate product streams and account for 
            energy usage in the WAR algorithm.
            </para>
            </remarks>
        </member>
        <member name="M:CapeOpen.WARalgorithm.#ctor(System.Data.DataTable,CapeOpen.ICapeFlowsheetMonitoring)">
            <summary>
            Creates a new instance of the <see cref="T:CapeOpen.WARalgorithm"/> class.
            </summary>
            <param name="warDataTable"> <see cref="T:System.Data.DataTable"/>containing chemical data used in the WAR Algorithm Calculation.</param>
            <param name="Monitoring">An <see cref="T:CapeOpen.ICapeFlowsheetMonitoring"/> reference to the current flowsheet in the process modeling 
            environment (PME).</param>
        </member>
        <member name="F:CapeOpen.WARalgorithm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CapeOpen.WARalgorithm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CapeOpen.WARalgorithm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CapeOpen.IIntegerParameterSpecEvents">
            <summary>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:CapeOpen.IIntegerParameterSpecEvents.ParameterDefaultValueChanged(System.Object,System.Object)">
            <summary>
            Occurs when the user changes of the default value of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterDefaultValueChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterDefaultValueChanged</c> in a derived class, be sure to call the base class's <c>OnParameterDefaultValueChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="M:CapeOpen.IIntegerParameterSpecEvents.ParameterDefaultValueChanged(System.Object,System.Object)">ParameterDefaultValueChanged</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.IIntegerParameterSpecEvents.ParameterLowerBoundChanged(System.Object,System.Object)">
            <summary>
            Occurs when the user changes of the lower bound of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnComponentNameChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnComponentNameChanged</c> in a derived class, be sure to call the base class's <c>OnComponentNameChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="T:CapeOpen.ParameterValueChangedEventArgs">ParameterValueChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.IIntegerParameterSpecEvents.ParameterUpperBoundChanged(System.Object,System.Object)">
            <summary>
            Occurs when the user changes of the upper bound of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterUpperBoundChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterUpperBoundChanged</c> in a derived class, be sure to call the base class's <c>OnParameterUpperBoundChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="T:CapeOpen.ParameterLowerBoundChangedEventArgs">ParameterUpperBoundChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.IIntegerParameterSpecEvents.ParameterValidated(System.Object,System.Object)">
            <summary>
            Occurs when a parameter is validated.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterValidated</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterValidated</c> in a derived class, be sure to call the base class's <c>OnParameterValidated</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="T:CapeOpen.ParameterValidatedEventArgs">ParameterValidatedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="T:CapeOpen.IntegerParameter">
            <summary>
            Intger-Valued parameter for use in the CAPE-OPEN parameter collection.
            </summary>
            <remarks>
            Intger-Valued parameter for use in the CAPE-OPEN parameter collection.
            </remarks>
        </member>
        <member name="M:CapeOpen.IntegerParameter.#ctor(System.String,System.Int32,CapeOpen.CapeParamMode)">
            <summary>
            Creates a new instance of the integer-valued parameter class.
            </summary>
            <remarks>
            <para>The default value is set to the inital value of the parameter. The upper
            bound is set to Int32.MaxValue (2,147,483,647) and the lower bound is set to 
            Int32.MinValue (-2,147,483,648). The mode is set to CapeParamMode.CAPE_INPUT_OUTPUT.</para>
            </remarks>
            <param name = "name">Sets as the ComponentName of the parameter's ICapeIdentification interface.</param>
            <param name = "value">Sets the inital value of the parameter.</param>
            <param name = "mode">Sets the CapeParamMode mode of the parameter</param>
        </member>
        <member name="M:CapeOpen.IntegerParameter.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,CapeOpen.CapeParamMode)">
            <summary>
            Creates a new instance of the integer-valued parameter class using the values enterred. 
            </summary>
            <remarks>
            The default value, upper and lower 
            bound, as well as the mode of the parameter are specified in this constructor.
            </remarks>
            <param name = "name">Sets as the ComponentName of the parameter's ICapeIdentification interface.</param>
            <param name = "description">Sets as the ComponentDescription of the parameter's ICapeIdentification interface.</param>
            <param name = "value">Sets the inital value of the parameter.</param>
            <param name = "defaultValue">Sets the default value of the parameter.</param>
            <param name = "minValue">Sets the lower bound of the parameter.</param>
            <param name = "maxValue">Sets the upper bound of the parameter.</param>
            <param name = "mode">Sets the CapeParamMode mode of the parameter.</param>
        </member>
        <member name="M:CapeOpen.IntegerParameter.OnParameterDefaultValueChanged(CapeOpen.ParameterDefaultValueChangedEventArgs)">
            <summary>
            Occurs when the user changes of the default value of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterDefaultValueChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterDefaultValueChanged</c> in a derived class, be sure to call the base class's <c>OnParameterDefaultValueChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="M:CapeOpen.IntegerParameter.OnParameterDefaultValueChanged(CapeOpen.ParameterDefaultValueChangedEventArgs)">OnParameterDefaultValueChanged</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.IntegerParameter.OnParameterLowerBoundChanged(CapeOpen.ParameterLowerBoundChangedEventArgs)">
            <summary>
            Occurs when the user changes of the lower bound of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnComponentNameChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnComponentNameChanged</c> in a derived class, be sure to call the base class's <c>OnComponentNameChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.ParameterValueChangedEventArgs">ParameterValueChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.IntegerParameter.OnParameterUpperBoundChanged(CapeOpen.ParameterUpperBoundChangedEventArgs)">
            <summary>
            Occurs when the user changes of the upper bound of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterUpperBoundChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterUpperBoundChanged</c> in a derived class, be sure to call the base class's <c>OnParameterUpperBoundChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.ParameterLowerBoundChangedEventArgs">ParameterUpperBoundChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.IntegerParameter.System#ICloneable#Clone">
            <summary>
            Creates a copy of the parameter.
            </summary>
            <remarks><para>The clone method is used to create a deep copy of the parameter.</para>
            </remarks>
            <returns>A copy of the current parameter.</returns>
        </member>
        <member name="M:CapeOpen.IntegerParameter.Validate(System.String@)">
            <summary>
            Validates the current value of the parameter against the 
            specification of the parameter.
            </summary>
            <remarks>
            The parameter is considered valid if the current value is between the 
            upper and lower bound. The message is used to return the reason that 
            the parameter is invalid.
            </remarks>
            <returns>
            True if the parameter is valid, false if not valid.
            </returns>
            <param name="message">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.IntegerParameter.Reset">
            <summary>
            Sets the value of the parameter to its default value.
            </summary>
            <remarks>
             This method sets the parameter's value to the default value.
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.IntegerParameter.Validate(System.Int32,System.String@)">
            <summary>
            Validates the value sent against the specification of the parameter. 
            </summary>
            <remarks>
            The parameter is considered valid if the current value is between 
            the upper and lower bound. The message is used to return the reason 
            that the parameter is invalid.
            </remarks>
            <returns>
            True if the parameter is valid, false if not valid.
            </returns>
            <param name="value">Integer value that will be validated against the parameter's current specification.</param>
            <param name="message">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.IntegerParameter.CapeOpen#ICapeParameter#Specification">
            <summary>
            Gets the Specification for this Parameter.
            </summary>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.IntegerParameter.CapeOpen#ICapeParameter#value">
            <summary>
            Gets and sets the value for this Parameter.
            </summary>
            <remarks>
            This value uses the System.Object data type for compatibility with 
            COM-based CAPE-OPEN.
            </remarks>
            <returns>System.Object</returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.IntegerParameter.CapeOpen#ICapeParameterSpec#Dimensionality">
            <summary>
            Gets the dimensionality of the parameter.
            </summary>
            <returns>
            Null pointer.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="E:CapeOpen.IntegerParameter.ParameterDefaultValueChanged">
            <summary>
            Occurs when the user changes of the default value of the parameter changes.
            </summary>
        </member>
        <member name="E:CapeOpen.IntegerParameter.ParameterLowerBoundChanged">
            <summary>
            Occurs when the user changes of the lower bound of the parameter changes.
            </summary>
        </member>
        <member name="E:CapeOpen.IntegerParameter.ParameterUpperBoundChanged">
            <summary>
            Occurs when the user changes of the upper bound of the parameter changes.
            </summary>
        </member>
        <member name="P:CapeOpen.IntegerParameter.Value">
            <summary>
            Gets and sets the value for this Parameter. 
            </summary>
            <remarks>
            The value of the parameter.
            </remarks>
            <value>
            The value of the parameter.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.IntegerParameter.Type">
            <summary>
            Gets the type of the parameter. 
            </summary>
            <remarks>
            Gets the <see cref="T:CapeOpen.CapeParamType"/> of the parameter for which this is a specification: real 
            (CAPE_REAL), integer(CAPE_INT), option(CAPE_OPTION), boolean(CAPE_BOOLEAN) 
            or array(CAPE_ARRAY).
            </remarks>
            <value>The parameter type. </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed.</exception>
        </member>
        <member name="P:CapeOpen.IntegerParameter.DefaultValue">
            <summary>
            Gets and sets the default value of the parameter.
            </summary>
            <remarks>
            Gets and sets the default value of the parameter.
            </remarks>
            <value>The default value for the parameter. </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.IntegerParameter.LowerBound">
            <summary>
            Gets and sets the lower bound of the parameter.
            </summary>
            <remarks>
            The lower bound can be an valid integer. By default, it is set to 
            Int32.MinValue, 2,147,483,648; that is, hexadecimal 0x80000000
            </remarks>
            <value>The lower bound for the parameter. </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.IntegerParameter.UpperBound">
            <summary>
            Gets and sets the upper bound of the parameter.
            </summary>
            <remarks>
            The lower bound can be an valid integer. By default, it is set to 
            Int32.MaxValue, 2,147,483,647; that is, hexadecimal 0x7FFFFFFF.
            </remarks>
            <value>The upper bound for the parameter. </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="T:CapeOpen.Resources.WARdata_xml">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CapeOpen.Resources.WARdata_xml.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CapeOpen.Resources.WARdata_xml.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CapeOpen.Resources.WARdata_xml.WARdata">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
            &lt;dataroot xmlns:od=&quot;urn:schemas-microsoft-com:officedata&quot; generated=&quot;2008-09-23T14:52:13&quot;&gt;
            &lt;data&gt;
            &lt;ChemicalName&gt;THERMINOL 55&lt;/ChemicalName&gt;
            &lt;CAS&gt; 68855-24-3&lt;/CAS&gt;
            &lt;Rat_LD50_Value&gt;3500&lt;/Rat_LD50_Value&gt;
            &lt;Rat_LD50_Notes&gt;est&lt;/Rat_LD50_Notes&gt;
            &lt;Rat_LD50_Source&gt;C&lt;/Rat_LD50_Source&gt;
            &lt;OSHA_TWA_Notes&gt;N&lt;/OSHA_TWA_Notes&gt;
            &lt;FHM_LC50_Value&gt;171&lt;/FHM_LC50_Value&gt;
            &lt;FHM_LC50_Notes&gt;est - ave&lt;/FHM_LC50_Notes&gt;
            &lt;FHM_LC50_Source&gt;Q&lt;/FHM_LC50_Source&gt;
            &lt;/data&gt;
            &lt;data&gt;
            &lt;ChemicalName&gt;CAL [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:CapeOpen.CapeReactionType">
            <summary>
            Enumeration for the type of reaction.
            </summary>
            <remarks>
            Indicates whether the reaction package is for equilibrium or kinetic type reactions.
            </remarks>
        </member>
        <member name="F:CapeOpen.CapeReactionType.CAPE_EQUILIBRIUM">
            <summary>
            Equilibrium reactions.
            </summary>
        </member>
        <member name="F:CapeOpen.CapeReactionType.CAPE_KINETIC">
            <summary>
            Kinetic reactions.
            </summary>
        </member>
        <member name="T:CapeOpen.CapeReactionRateBasis">
            <summary>
            Enumeration for the rate basis for the reaction.
            </summary>
            <remarks>
            Indicates whether the reaction occurs in a homgeneous phase of is a heterogeneous reaction..
            </remarks>
        </member>
        <member name="F:CapeOpen.CapeReactionRateBasis.CAPE_HOMOGENEOUS">
            <summary>
            Homogeneous reaction.
            </summary>
        </member>
        <member name="F:CapeOpen.CapeReactionRateBasis.CAPE_HETEROGENEOUS">
            <summary>
            Heterogeneous reaction.
            </summary>
        </member>
        <member name="T:CapeOpen.ICapeKineticReactionContext">
            <summary>
            Provides access to the properties of a set of kinetic reactions.
            </summary>
            <remarks>
            <para>
            This interface allows a reaction object to be passed to a
            component that needs access to the properties of a set of kinetic reactions.
            </para>
            <para>
            This interface is used to set the reaction object upon which reaction calculations
            will take place. Calculated reaction properties will be stored in this reaction object.
            </para>
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeKineticReactionContext.SetReactionObject(System.Object@)">
            <summary>
            Provides access to the properties of a set of kinetic reactions.
            </summary>
            <remarks>
            <para>
            Used to pass the <see cref="T:CapeOpen.ICapeReactionProperties"/> interface of a reaction object to a 
            component that needs to access the properties of a set of kinetic reactions.
            </para>
            </remarks>
            <param name="reactionsObject">The ICapeReactionProperties interface of a reaction object.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ICapeElectrolyteReactionContext">
            <summary>
            Provides access to the properties of a set of electrolyte reactions.
            </summary>
            <remarks>
            <para>
            This interface allows a reaction object to be passed to a
            component that needs access to the properties of a set of equilibrium reactions.
            </para>
            <para>
            This interface is used to set the reaction object upon which reaction calculations
            will take place. Calculated reaction properties will be stored in this reaction object.
            </para>
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeElectrolyteReactionContext.SetReactionObject(System.Object@)">
            <summary>
            Provides access to the properties of a set of equilibrium reactions.
            </summary>
            <remarks>
            <para>
            Used to pass the <see cref="T:CapeOpen.ICapeReactionProperties"/> interface of a reaction object to a 
            component that needs to access the properties of a set of kinetic reactions.
            </para>
            </remarks>
            <param name="reactionsObject">The ICapeReactionProperties interface of a reaction object.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ICapeReactionsPackageManager">
            <summary>
            Similar in scope to the <see cref="T:CapeOpen.ICapeThermoSystem"/>. These interfaces will be implemented by a 
            Reactions Package Manager component.
            </summary>
            <remarks>
            Provides a list of all supported reaction packages and resolves the selected package.
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeReactionsPackageManager.GetListOfReactionsPackages">
            <summary>
            A list of all available reaction packages.
            </summary>
            <remarks>
            Returns a list of the names of all Reactions Packages available within the Reactions Package Manager..
            </remarks>
            <value>Returns a list of all available reaction packages.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeReactionsPackageManager.ResolveReactionsPackage(System.String)">
            <summary>
            Resolves a reaction routine.
            </summary>
            <remarks>
            <para>
            Returns the Reactions Package specified by the client of the Reactions Package Manager.
            </para>
            </remarks>
            <param name="reactionsPkg">The name of the reactions routine to be resolved.</param>
            <returns>Returns the Reactions Package specified by the client of the Reactions Package Manager.</returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ICapeReactionChemistry">
            <summary>
            Provides information about the reactions in the reaction package.
            </summary>
            <remarks>
            A component or a PME that needs to describe a set of reactions will implement this 
            interface. A set of reactions is described in terms of the compounds that take part
            in the reactions and the compounds that are produced. For example, in the case of 
            electrolyte	systems, salt complexes and ions. In the case of detailed reaction mechanisms, 
            radicals. 
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeReactionChemistry.GetNumberOfReactions">
            <summary>
            Number of reactions contained within this reaction package.
            </summary>
            <remarks>
            Returns the number of reactions contained in this reactions package.
            </remarks>
            <returns>Returns the number of reactions contained in this reactions package.</returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeReactionChemistry.GetReactionsIds">
            <summary>
            The string identifiers of the reactions contained within this reaction package.
            </summary>
            <remarks>
            Returns the identifiers of all the reactions contained within the Reactions Package.
            </remarks>
            <returns>Returns the string identifiers for each one of the reactions.</returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeReactionChemistry.GetReactionType(System.String)">
            <summary>
            The <see cref="T:CapeOpen.CapeReactionType"/> of the reaction.
            </summary>
            <remarks>
            Returns the <see cref="T:CapeOpen.CapeReactionType"/> of a particular reaction. Only needed for non-electrolyte
            reactions. It informs whether the reaction is an equilibrium or kinetic
            reaction
            </remarks>
            <param name="reacID">The name of the reaction obtained from the <see cref="M:CapeOpen.ICapeReactionChemistry.GetReactionsIds"/> method.</param>
            <returns>Returns the <see cref="T:CapeOpen.CapeReactionType"/> type of a particular reaction.</returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeReactionChemistry.GetNumberOfReactionCompounds(System.String)">
            <summary>
            The number of compounds in the specified reaction.
            </summary>
            <remarks>
            Gets the number of compounds occurring in a particular reaction within a Reactions Package.
            </remarks>
            <param name="reacID">The name of the reaction obtained from the <see cref="M:CapeOpen.ICapeReactionChemistry.GetReactionsIds"/> method.</param>
            <returns>Returns the number of compounds participating in the specified reaction.</returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeReactionChemistry.GetReactionCompoundIds(System.String,System.Object@,System.Object@,System.Object@)">
            <summary>
            Get the identifiers of the components participating in the specified reaction 
            within the reaction set defined in the Reactions Package.
            </summary>
            <remarks>
            This method returns both compound name and CAS registry number. The CAS Registry 
            number should be used to identify the compounds for validation purposes because 
            it is unambiguous.
            </remarks>
            <param name="reacId">The name of the reaction obtained from the <see cref="M:CapeOpen.ICapeReactionChemistry.GetReactionsIds"/> method.</param>
            <param name="compIds">List of compound IDs.</param>
            <param name="compCharge">The charge for each compound.</param>
            <param name="compCASNumber">The CAS Registry numbers for the compounds.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeReactionChemistry.GetStoichiometricCoefficients(System.String)">
            <summary>
            Get the stoichiometry of the specified reaction.
            </summary>
            <remarks>
            Returns the stoichiometric coefficients of the specified reaction (positive 
            numbers indicate products, negative numbers indicate reactants). Stoichiometric 
            coefficients are ordered consistently with the list of compounds returned by 
            the <see cref="M:CapeOpen.ICapeReactionChemistry.GetReactionCompoundIds(System.String,System.Object@,System.Object@,System.Object@)"/> method for the same reaction.
            </remarks>
            <returns>The stoichiometry of the specified reaction.</returns>
            <param name="reacId">The name of the reaction obtained from the <see cref="M:CapeOpen.ICapeReactionChemistry.GetReactionsIds"/> method.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeReactionChemistry.GetReactionPhase(System.String)">
            <summary>
            Gets the phase on which a particular reaction contained in the Reactions Package will take place.
            </summary>
            <remarks>
            The string returned by this method must match one of the phase labels known to the Property Package.
            </remarks>
            <returns>The phase label of the phase where the reaction tackes place.</returns>
            <param name="reacId">The name of the reaction obtained from the <see cref="M:CapeOpen.ICapeReactionChemistry.GetReactionsIds"/> method.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeReactionChemistry.GetReactionRateBasis(System.String)">
            <summary>
            Get the basis for the reaction rate will be expressed in (i.e. homogeneous
            or heterogeneous).
            </summary>
            <remarks>
            Gets the phase on which the reactions contained in the package will take place. The 
            reaction rate basis (i.e. “Homogeneous” or “Heterogeneous”). Homogeneous reactions 
            will be provided in kgmole/h/m3 and heterogeneous will be provided in 
            kgmole/h/kg-cat.
            </remarks>
            <returns>A <see cref="T:CapeOpen.CapeReactionRateBasis"/> for the rate basis.</returns>
            <param name="reacId">The name of the reaction obtained from the <see cref="M:CapeOpen.ICapeReactionChemistry.GetReactionsIds"/> method.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeReactionChemistry.GetReactionConcBasis(System.String)">
            <summary>
            Get the concentration basis the reaction package will use to calculate the
            specified reaction rate.
            </summary>
            <remarks>
            <para>
            Gets the concentration basis required that will be used by a particular reaction in 
            its rate equation.
            </para>
            <para>
            Qualifiers defined in the THRM spec can be used here (i.e. “fugacity”, 
            “moleFraction”, etc).
            </para>
            </remarks>
            <returns>The concentration basis the reaction package will use to calculate the
            specified reaction rate.</returns>
            <param name="reacId">The name of the reaction obtained from the <see cref="M:CapeOpen.ICapeReactionChemistry.GetReactionsIds"/> method.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeReactionChemistry.GetBaseReactant(System.String)">
            <summary>
            Get the base reactant for the specified reaction.
            </summary>
            <remarks>
            Returns the name of the base reactant for a particular reaction..
            </remarks>
            <returns>The name of the base reactant for a particular reaction.</returns>
            <param name="reacId">The name of the reaction obtained from the <see cref="M:CapeOpen.ICapeReactionChemistry.GetReactionsIds"/> method.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeReactionChemistry.GetPhaseCompounds(System.String,System.Int32@,System.Object@)">
            <summary>
            Returns the number and ids of the compounds in the specified phase.
            </summary>
            <remarks>
            Returns the number and ids of the compounds in the specified phase.
            </remarks>
            <returns>The name of the base reactant for a particular reaction.</returns>
            <param name="reacID">Label of the required phase.</param>
            <param name="compNo">The number of compounds in the requested phase.</param>
            <param name="compIds">The ids of the compounds present in the specified phase.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeReactionChemistry.GetReactionParameters(System.String)">
            <summary>
            Returns a collection containing the rate expression parameters for a particular reaction.
            </summary>
            <remarks>
            <para>
            GetReactionParameters returns a collection of CAPE-OPEN parameters [6] that 
            characterize the rate expression used by the reaction model in a Reaction Package. 
            For a PowerLaw model this collection would contain parameters for activation energy, 
            pre-exponential factor and compound exponents for example. It is up to the Reactions 
            Package implementor to decide whether a client can update the values of these 
            parameters. If this operation is allowed, then the implementor must also provide 
            support for persistence [5] interfaces, so that the updated values can be saved and 
            restored. In this case the COSE is also responsible for calling the persistence
            methods.
            </para>
            <para>
            Deliberately, the standard does not define the names of the parameters that may 
            appear in such a collection, even for well-known reaction models, such as PowerLaw 
            and Langmuir – Hinshelwood – Hougen – Watson (LHHW). This is because the formulation 
            of well-known models is not fixed, and because the standard needs to support custom 
            models as well as the well-known models. 
            </para>
            <para>
            This decision is not expected to be restrictive: in most cases the (software) client 
            of a Reactions Package does not need to know what model the package implements and 
            what parameters it has. However, the parameters may be of interest to an end-user who 
            wants to adjust or estimate the parameter values. In these cases the COSE can invoke 
            the Reaction Package’s own GUI, or, if it doesn’t have one, present the parameters in 
            a generic grid. It is the Reaction Package implementor’s responsibility to provide 
            documentation for the parameters so that an enduser can understand how they are used.
            </para>
            </remarks>
            <returns>A collection containing the rate expression parameters for a particular reaction.</returns>
            <param name="reacId">The name of the reaction obtained from the <see cref="M:CapeOpen.ICapeReactionChemistry.GetReactionsIds"/> method.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ICapeReactionProperties">
            <summary>
            Provides access to the properties of a particular reaction.
            </summary>
            <remarks>
            Similar in scope to ICapeThermoMaterialObject. A component or a PME that needs to 
            provide access to the properties of a particular reaction will implement this interface. 
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeReactionProperties.GetReactionProp(System.String,System.String,System.Object,System.String)">
            <summary>
            Gets the value of the specified reaction property within a reactions object.
            </summary>
            <remarks>
            The qualifiers passed in determine the reactions, phase and calculation basis for 
            which the property will be got. The order of the array is the same as in the passed
            in reacIds array (i.e. property value for reaction reacIds[1] will be stored in 
            property[1]).
            </remarks>
            <returns>The name of the base reactant for a particular reaction.</returns>
            <param name="property">The Reaction Property to be retrieved.</param>
            <param name="phase">The qualified phase for the Reaction Property.</param>
            <param name="reacIds">The qualified reactions for the Reaction Property. NULL to
            specify all reactions in the set.</param>
            <param name="basis"><para>Qualifies the basis of the Reaction Property (i.e., mass 
            /mole). Default is mole. Use NULL only as a placeholder for property for which basis 
            does not apply.</para>
            <para> This qualifier could be extended with values such as activity, fugacity, 
            fractions, molality…This way when an equilibrium constant is requested its basis can 
            be specified.</para>
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeReactionProperties.SetReactionProp(System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            Sets the values of the specified reaction property within a reactions object.
            </summary>
            <remarks>
            The qualifiers passed in determine the reactions, phase and calculation basis for 
            which the property will be retrieved.
            </remarks>
            <returns>The name of the base reactant for a particular reaction.</returns>
            <param name="property">The Reaction Property to be retrieved.</param>
            <param name="phase">The qualified phase for the Reaction Property.</param>
            <param name="reacIds">The qualified reactions for the Reaction Property. NULL to
            specify all reactions in the set.</param>
            <param name="basis"><para>Qualifies the basis of the Reaction Property (i.e., mass 
            /mole). Default is mole. Use NULL only as a placeholder for property for which basis 
            does not apply.</para>
            <para> This qualifier could be extended with values such as activity, fugacity, 
            fractions, molality…This way when an equilibrium constant is requested its basis can 
            be specified.</para>
            </param>
            <param name="propVals">The values of the requested reaction property. The order of 
            the array is the same as in the passed in reacIds array (i.e. property value for 
            reaction reacIds[1] will be stored in property[1]).</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ICapeThermoContext">
            <summary>
            Provides a material object for physical property calculations.
            </summary>
            <remarks>
            Allows a material object to be passed between a PME and the Reactions components it is 
            using so that the Reactions components can make Physical Property calculation calls. 
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeThermoContext.SetMaterial(System.Object)">
            <summary>
            Allows the client of a component that implements this interface to pass an 
            <see cref="T:CapeOpen.ICapeThermoMaterialObject"/> interface to the component, so that 
            it can access the properties of a material and request property calculations.
            </summary>
            <remarks>
            The SetMaterial method allows a Reactions component to be given the 
            <see cref="T:CapeOpen.ICapeThermoMaterialObject"/> interface of a Material Object. 
            This interface gives the component access to the description of the material for 
            which Property calculations are required. A component can also use the 
            <see cref="T:CapeOpen.ICapeThermoMaterialObject"/> interface to to get lists of components 
            and phases.
            </remarks>
            <param name="materialObject">The interface of an object support the 
            <see cref="T:CapeOpen.ICapeThermoMaterialObject"/> interface.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ICapeReactionsRoutine">
            <summary>
            Calculates the values of reaction (or reaction related) properties.
            </summary>
            <remarks>
            Similar in scope to ICapeThermoPropertyPackage. A software component or a PME that can 
            calculate values of reaction (or reaction related) properties will implement this 
            interface. It may also be implemented by a Physical Property package component
            that deals with electrolytes.
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeReactionsRoutine.CalcReactionProp(System.Object,System.String,System.Object,System.String)">
            <summary>
            Sets the values of the specified reaction property within a reactions object.
            </summary>
            <remarks>
            <para>
            The Reactions Package is passed a list of reaction properties to be calculated, the 
            reaction IDS for which the properties are required, and the calculation basis for the 
            reaction properties (i.e. mole or mass). A material object containing the 
            thermodynamic state variables that need to be used for calculating the reaction 
            properties (e.g. T, P and compositions) is passed separately via a call to the 
            setMaterial method of the Reaction Package’s <see cref="T:CapeOpen.ICapeThermoContext"/> interface.
            </para>
            <para>
            The results of the calculation will be written to the reaction object passed to the 
            Reactions Package via either the <see cref="T:CapeOpen.ICapeKineticReactionContext"/> interface for a 
            kinetic reaction package, or the <see cref="T:CapeOpen.ICapeElectrolyteReactionContext"/> interface for an 
            Electrolyte Property Package.
            </para>
            </remarks>
            <returns>The name of the base reactant for a particular reaction.</returns>
            <param name="props">The Reaction Property to be calculated.</param>
            <param name="phase">The qualified phase for the results.</param>
            <param name="reacIds">The qualified reactions for the Reaction Property. NULL to
            specify all reactions in the set.</param>
            <param name="basis">Qualifies the basis of the Reaction Property (i.e., mass 
            /mole). Default is mole. Use NULL only as a placeholder for property for which basis 
            does not apply.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.WARAddIn">
            <summary>
            Summary for WAR
            </summary>
        </member>
        <member name="T:CapeOpen.CapeObjectBase">
            <summary>
            Abstract base class that implements ICapeIdentification and ICapeUtilities. 
            </summary>
            <remarks>
            This abstract class contains all required functionality for ICapeIdentification and ICapeUtilities
            It can be inherited and used as any generalized PMC. The derived class will register itself as a 
            CAPE-OPEN Component (Category GUID of 678c09a1-7d66-11d2-a67d-00105a42887f) and a Flowsheet
            monitoring Object (Category GUID of 7BA1AF89-B2E4-493d-BD80-2970BF4CBE99).
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeObjectBase.CapeOpen#ICapeUtilities#Terminate">
            <summary>
            Clean-up tasks can be performed here. 
            </summary>
            <remarks>
            <para>The CAPE-OPEN object should releases all of its allocated resources during this call. This is 
            called before the object destructor by the PME. Terminate may check if the data has been 
            saved and return an error if not.</para>
            <para>There are no input or output arguments for this method.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
        </member>
        <member name="M:CapeOpen.CapeObjectBase.CapeOpen#ICapeUtilities#Initialize">
            <summary>
            Initialization can be performed here. 
            </summary>
            <remarks>
            <para>The CAPE_OPEN object can allocated resources during this method. This is 
            called after the object constructor by the PME. .</para>
            <para>There are no input or output arguments for this method.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
        </member>
        <member name="M:CapeOpen.CapeObjectBase.#ctor">
            <summary>
            Constructor for the unit operation.
            </summary>
            <remarks>
            This method is creates the parameter collections for the object. As a result, 
            parameters can be added in the constructor
            for the derived object or during the <c>Initialize()</c> call. 
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
        </member>
        <member name="M:CapeOpen.CapeObjectBase.RegisterFunction(System.Type)">
            <summary>
            The function that controls COM registration.  
            </summary>
            <remarks>
            This function adds the registration keys specified in the CAPE-OPEN Method and
            Tools specifications. In particular, it indicates that this unit operation implements
            the CAPE-OPEN Unit Operation Category Identification. It also adds the CapeDescription
            registry keys using the <see cref="T:CapeOpen.CapeNameAttribute"/>, <see cref="T:CapeOpen.CapeDescriptionAttribute"/>, <see cref="T:CapeOpen.CapeVersionAttribute"/>
            <see cref="T:CapeOpen.CapeVendorURLAttribute"/>, <see cref="T:CapeOpen.CapeHelpURLAttribute"/>, 
            and <see cref="T:CapeOpen.CapeAboutAttribute"/> attributes.
            </remarks>
            <param name="t">The type of the class being registered.</param> 
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeObjectBase.UnregisterFunction(System.Type)">
            <summary>
            This function controls the removal of the class from the COM registry when the class is unistalled.  
            </summary>
            <remarks>
            The method will remove all subkeys added to the class' regristration, including the CAPE-OPEN
            specific keys added in the <see cref="M:CapeOpen.CapeObjectBase.RegisterFunction(System.Type)"/> method.
            </remarks>
            <param name="t">The type of the class being unregistered.</param> 
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeObjectBase.Validate(System.String@)">
            <summary>
            Validates the PMC. 
            </summary>
            <remarks>
            <para>Validates the parameter collection. This base-class implementation of this method 
            traverses the parameter collections and calls the  <see cref="M:CapeOpen.CapeObjectBase.Validate(System.String@)"/> method of each 
            member parameter. The PMC is valid if all parameters are valid, which is 
            signified by the Validate method returning <c>true</c>.</para>
            </remarks>
            <returns>
            <para>true, if the unit is valid.</para>
            <para>false, if the unit is not valid.</para>
            </returns>
            <param name="message">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadCOParameter">ECapeBadCOParameter</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
        </member>
        <member name="M:CapeOpen.CapeObjectBase.Edit">
            <summary>
            Displays the PMC graphic interface, if available.
            </summary>
            <remarks>
            <para>By default, this method throws a <see cref="T:CapeOpen.CapeNoImplException">CapeNoImplException</see>
            that according to the CAPE-OPEN specification, is interpreted by the process
            modeling environment as indicating that the PMC does not have a editor 
            GUI, and the PME must perform editing steps.</para>
            <para>In order for a PMC to provide its own editor, the Edit method will
            need to be overridden to create a graphical editor. When the user requests the flowheet
            to show the editor, this method will be called to edit the unit. Overriden classes should
            not return a failure (throw and exception) as this will be interpreted by the flowsheeting 
            tool as the unit not providing its own editor.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeObjectBase.throwException(System.Exception)">
            <summary>
            Throws and exceptiona and exposes the exception object.
            </summary>
            <remarks>
            This method allows the derived class to conform to the CAPE-OPEN error handling standards and still use .Net 
            exception handling. In order to use this class, create an exception object that derives from <see cref="T:CapeOpen.ECapeUser"/>.
            Use the exception object as the argument to this function. As a result, the information in the expcetion will be exposed using the CAPE-OPEN 
            exception handing and will be thrown to .Net clients.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeObjectBase.PopUpMessage(System.String)">
            <summary>
            Writes a message to the terminal.
            </summary>
            <remarks>
            <para>Write a string to the terminal.</para>
            <para>This method is called when a message needs to be brought to the user’s attention.
            The implementation should ensure that the string is written out to a dialogue box or 
            to a message list that the user can easily see.</para>
            <para>A priori this message has to be displayed as soon as possible to the user.</para>
            </remarks>
            <param name="message">The text to be displayed.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.CapeObjectBase.LogMessage(System.String)">
            <summary>
            Writes a string to the PME's log file.
            </summary>
            <remarks>
            <para>Write a string to a log.</para>
            <para>This method is called when a message needs to be recorded for logging purposes. 
            The implementation is expected to write the string to a log file or other journaling 
            device.</para>
            </remarks>
            <param name="message">The text to be logged.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.CapeObjectBase.CapeOpen#ICapeUtilities#parameters">
            <summary>
            Gets the component's collection of parameters.
            </summary>
            <returns>
            Return type is System.Object and this method is simply here for classic 
            COM-based CAPE-OPEN interop.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="P:CapeOpen.CapeObjectBase.CapeOpen#ICapeUtilities#simulationContext">
            <summary>
            Sets the component's simulation context.
            </summary>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="P:CapeOpen.CapeObjectBase.Parameters">
            <summary>
            Gets the component's collection of parameters. 
            </summary>
            <remarks>
            <para>Return the collection of Public Parameters (i.e. 
            <see cref="T:CapeOpen.ICapeCollection"/>.</para>
            <para>These are delivered as a collection of elements exposing the interface 
            <see cref="T:CapeOpen.ICapeParameter"/>. From there, the client could extract the 
            <see cref="T:CapeOpen.ICapeParameterSpec"/> interface or any of the typed
            interfaces such as <see cref="T:CapeOpen.ICapeRealParameterSpec"/>, once the client 
            establishes that the Parameter is of type double.</para>
            </remarks>
            <value>The parameter collection of the unit operation.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="P:CapeOpen.CapeObjectBase.SimulationContext">
            <summary>
            Gets and sets the component's simulation context.
            </summary>
            <remarks>
            This method provides access to the COSE's interfaces <see cref="T:CapeOpen.ICapeDiagnostic"/>, 
            <see cref="T:CapeOpen.ICapeMaterialTemplateSystem"/> and <see cref="T:CapeOpen.ICapeCOSEUtilities"/>.
            </remarks>
            <value>The simulation context assigned by the Flowsheeting Environment.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="P:CapeOpen.CapeObjectBase.FlowsheetMonitoring">
            <summary>
            Gets the component's flowsheet monitoring object.
            </summary>
            <remarks>
            This method provides access to the COSE's interfaces <see cref="T:CapeOpen.ICapeDiagnostic"/>, 
            <see cref="T:CapeOpen.ICapeMaterialTemplateSystem"/> and <see cref="T:CapeOpen.ICapeCOSEUtilities"/>.
            </remarks>
            <value>The simulation context assigned by the Flowsheeting Environment.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="P:CapeOpen.CapeObjectBase.CapeOpen#ECapeRoot#Name">
            <summary>
            The name of the exception being thrown.
            </summary>
            <remarks>
            The name of the exception being thrown.
            </remarks>
            <value>
            The name of the exception being thrown.
            </value>
        </member>
        <member name="P:CapeOpen.CapeObjectBase.CapeOpen#ECapeUser#code">
            <summary>
            Code to designate the subcategory of the error. 
            </summary>
            <remarks>
            The assignment of values is left to each implementation. So that is a 
            proprietary code specific to the CO component provider. By default, set to 
            the CAPE-OPEN error HRESULT <see cref="T:CapeOpen.CapeErrorInterfaceHR"/>.
            </remarks>
            <value>
            The HRESULT value for the exception.
            </value>
        </member>
        <member name="P:CapeOpen.CapeObjectBase.CapeOpen#ECapeUser#description">
            <summary>
            The description of the error.
            </summary>
            <remarks>
            The error description can include a more verbose description of the condition that
            caused the error.
            </remarks>
            <value>
            A string description of the exception.
            </value>
        </member>
        <member name="P:CapeOpen.CapeObjectBase.CapeOpen#ECapeUser#scope">
            <summary>
            The scope of the error.
            </summary>
            <remarks>
            This property provides a list of packages where the error occurred. 
            For example <see cref="T:CapeOpen.ICapeIdentification"/>.
            </remarks>
            <value>The source of the error.</value>
        </member>
        <member name="P:CapeOpen.CapeObjectBase.CapeOpen#ECapeUser#interfaceName">
            <summary>
            The name of the interface where the error is thrown. This is a mandatory field."
            </summary>
            <remarks>
            The interface that the error was thrown.
            </remarks>
            <value>The name of the interface.</value>
        </member>
        <member name="P:CapeOpen.CapeObjectBase.CapeOpen#ECapeUser#operation">
            <summary>
            The name of the operation where the error is thrown. This is a mandatory field.
            </summary>
            <remarks>
            This field provides the name of the operation being perfomed when the exception was raised.
            </remarks>
            <value>The operation name.</value>
        </member>
        <member name="P:CapeOpen.CapeObjectBase.CapeOpen#ECapeUser#moreInfo">
            <summary>
            An URL to a page, document, web site,  where more information on the error can be found. The content of this information is obviously implementation dependent.
            </summary>
            <remarks>
            This field provides an internet URL where more information about the error can be found.
            </remarks>
            <value>The URL.</value>
        </member>
        <member name="M:CapeOpen.WARAddIn.#ctor">
            <summary>
            Displays the PMC graphic interface, if available.
            </summary>
            <remarks>
            The PMC displays its user interface and allows the Flowsheet User to 
            interact with it. If no user interface is available it returns an error.
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.WARAddIn.Edit">
            <summary>
            Displays the PMC graphic interface, if available.
            </summary>
            <remarks>
            The PMC displays its user interface and allows the Flowsheet User to 
            interact with it. If no user interface is available it returns an error.
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ParameterCollection">
            <summary>
            A type-safe collection of ICapeParameter objects.
            </summary>
            <remarks>
            <para>This collection uses the BindingList generic collection to create a collection that only
            objects that implement the <seealse cref="T:CapeOpen.ICapeParameter"/> interface. This class also implements the 
            ICustomTypeDescriptor to provide dynamic infomation about the collection.</para>
            <para>
            Since this class utilizes a generic collection class, .Net based objects can obtain 
            the Parameter objects directly by using the index of the object. The .Net collection is 0-index, that is, the 
            index of the first parameter is 0, and the nth parameter has an index of n-1.
            </para>
            <para>
            In addition, the collection can be accessed through the <see cref="T:CapeOpen.ICapeCollection"/> interface.
            The ICapeCollection members are implemented privately, making them available only available through the interface.
            </para>
            </remarks>
        </member>
        <member name="T:CapeOpen.ICapeCollection">
            <summary>
            This interface provides the behaviour for a read-only collection. It can be 
            used for storing ports or parameters.
            </summary>
            <remarks>
            <para>The aim of the Collection interface is to give a CAPE-OPEN component 
            the possibility to expose a list of objects to any client of the component. 
            The client will not be able to modify the collection, i.e. removing, 
            replacing or adding elements. However, since the client will have access to 
            any CAPE-OPEN interface exposed by the items of the collection, it will be 
            able to modify the state of any element.</para>
            <para>CAPE-OPEN Collections don’t allow exposing basic types such as 
            numerical values or strings. Indeed, using CapeArrays is more convenient 
            here.</para>
            <para>Not all the items of a collection must belong to the same class. It is 
            enough if they implement the same interface or set of interfaces. A CAPE-OPEN 
            specification a component that exposes a collection interface must state 
            clearly which interfaces must be implemented by all the items of the 
            collection.</para>
            <para>Reference document: Collection Common Interface</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeCollection.Item(System.Object)">
            <summary>
            Gets the specific item stored within the collection, identified by its 
            ICapeIdentification.ComponentName or 1-based index passed as an argument 
            to the method.
            </summary>
            <remarks>
            Return an element from the collection. The requested element can be 
            identified by its actual name (e.g. type CapeString) or by its position 
            in the collection (e.g. type CapeLong). The name of an element is the 
            value returned by the ComponentName() method of its ICapeIdentification 
            interface. The advantage of retrieving an item by name rather than by 
            position is that it is much more efficient. This is because it is faster 
            to check all names from the server part than checking then from the 
            client, where a lot of COM/CORBA calls would be required.
            </remarks>
            <param name="index">
            <para>Identifier for the requested item:</para>
            <para>name of item (the variant contains a string)</para>
            <para>position in collection (it contains a long)</para>
            </param>
            <returns>
            System.Object containing the requested collection item.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeOutOfBounds">ECapeOutOfBounds</exception>
        </member>
        <member name="M:CapeOpen.ICapeCollection.Count">
            <summary>
            Gets the number of items currently stored in the collection.
            </summary>
            <remarks>Return the number of items in the collection.</remarks>
            <returns>Return the number of items in the collection.</returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
        </member>
        <member name="M:CapeOpen.ParameterCollection.CapeOpen#ICapeCollection#Count">
            <summary>
            Gets the number of items currently stored in the collection.
            </summary>
            <remarks>
            Gets the number of items currently stored in the collection.
            </remarks>
            <returns>
            Gets the number of items currently stored in the collection.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
        </member>
        <member name="M:CapeOpen.ParameterCollection.CapeOpen#ICapeCollection#Item(System.Object)">
            <summary>
            Gets the specific item stored within the collection, identified by its ICapeIdentification.ComponentName or 1-based index passed as an argument to the method.
            </summary>
            <remarks>
            The object will be a COM Variant.
            </remarks>
            <returns>
            Gets the number of items currently stored in the collection.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeOutOfBounds">ECapeOutOfBounds</exception>
        </member>
        <member name="M:CapeOpen.ParameterCollection.#ctor">
            <summary>
            Initailizes a new instance of the <see cref="T:CapeOpen.ParameterCollection"/> collection class.
            </summary>
            <remarks>This will create a new instance of the collection.
            </remarks>
        </member>
        <member name="M:CapeOpen.ParameterCollection.System#ICloneable#Clone">
            <summary>
            Creates a copy of the collection.
            </summary>
            <remarks><para>The clone method is used to create a deep copy of the entire collection,
            including a copy of the parameters contained in the collection.</para>
            </remarks>
            <returns>A copy of the current collection.</returns>
        </member>
        <member name="M:CapeOpen.ParameterCollection.OnComponentNameChanged(CapeOpen.NameChangedEventArgs)">
            <summary>
            Occurs when the user changes of the description of a component.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnComponentNameChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnComponentNameChanged</c> in a derived class, be sure to call the base class's <c>OnComponentNameChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.NameChangedEventArgs">NameChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.ParameterCollection.OnComponentDescriptionChanged(CapeOpen.DescriptionChangedEventArgs)">
            <summary>
            Occurs when the user changes of the description of a component.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnComponentDescriptionChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnComponentDescriptionChanged</c> in a derived class, be sure to call the base class's <c>OnComponentDescriptionChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.DescriptionChangedEventArgs">DescriptionChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="E:CapeOpen.ParameterCollection.ComponentNameChanged">
            <summary>
            Occurs when the user changes of the name of a component.
            </summary>
            <remarks>The event to be handles when the name of the PMC is changed.</remarks> 
        </member>
        <member name="E:CapeOpen.ParameterCollection.ComponentDescriptionChanged">
            <summary>
            Occurs when the user changes of the description of a component.
            </summary>
            <remarks>The event to be handles when the description of the PMC is changed.</remarks> 
        </member>
        <member name="P:CapeOpen.ParameterCollection.ComponentName">
            <summary>
            Gets and sets the name of the component.
            </summary>
            <remarks>
            <para>A particular Use Case in a system may contain several CAPE-OPEN components 
            of the same class. The user should be able to assign different names and 
            descriptions to each instance in order to refer to them unambiguously and in a 
            user-friendly way. Since not always the software components that are able to 
            set these identifications and the software components that require this information 
            have been developed by the same vendor, a CAPE-OPEN standard for setting and 
            getting this information is required.</para>
            <para>So, the component will not usually set its own name and description: the 
            user of the component will do it.</para>
            </remarks>
            <value>The unique name of the component.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.ParameterCollection.ComponentDescription">
            <summary>
             Gets and sets the description of the component.
            </summary>
            <remarks>
            <para>A particular Use Case in a system may contain several CAPE-OPEN components 
            of the same class. The user should be able to assign different names and 
            descriptions to each instance in order to refer to them unambiguously and in a 
            user-friendly way. Since not always the software components that are able to 
            set these identifications and the software components that require this information 
            have been developed by the same vendor, a CAPE-OPEN standard for setting and 
            getting this information is required.</para>
            <para>So, the component will not usually set its own name and description: the 
            user of the component will do it.</para>
            </remarks>
            <value>The description of the component.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ParameterCollectionPropertyDescriptor">
            <summary>
            Summary description for CollectionpublicDescriptor.
            </summary>
        </member>
        <member name="T:CapeOpen.IBooleanParameterSpecEvents">
            <summary>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:CapeOpen.IBooleanParameterSpecEvents.ParameterDefaultValueChanged(System.Object,System.Object)">
            <summary>
            Occurs when the user changes of the default value of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterDefaultValueChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterDefaultValueChanged</c> in a derived class, be sure to call the base class's <c>OnParameterDefaultValueChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="M:CapeOpen.IBooleanParameterSpecEvents.ParameterDefaultValueChanged(System.Object,System.Object)">ParameterDefaultValueChanged</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.IBooleanParameterSpecEvents.ParameterValidated(System.Object,System.Object)">
            <summary>
            Occurs when a parameter is validated.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterValidated</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterValidated</c> in a derived class, be sure to call the base class's <c>OnParameterValidated</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="T:CapeOpen.ParameterValidatedEventArgs">ParameterValidatedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="T:CapeOpen.BooleanParameter">
            <summary>
            Boolean-Valued parameter for use in the CAPE-OPEN parameter collection.
            </summary>
            <remarks>
            Boolean-Valued parameter for use in the CAPE-OPEN parameter collection.
            </remarks>
        </member>
        <member name="M:CapeOpen.BooleanParameter.#ctor(System.String,System.Boolean,CapeOpen.CapeParamMode)">
            <summary>
            Constructor for the boolean-valued parameter
            </summary>
            <remarks>
            This constructor sets the <see cref="P:CapeOpen.ICapeIdentification.ComponentName"/> of the 
            parameter. The parameter's value and default value are set to the value. 
            Additionally, the parameters <see cref="T:CapeOpen.CapeParamMode"/> is set.
            </remarks>
            <param name="name">Sets as the ComponentName of the parameter's ICapeIdentification interface.</param>
            <param name="value">Sets the inital value of the parameter.</param>
            <param name="mode">Sets the CapeParamMode mode of the parameter.</param>
        </member>
        <member name="M:CapeOpen.BooleanParameter.#ctor(System.String,System.String,System.Boolean,System.Boolean,CapeOpen.CapeParamMode)">
            <summary>
            Constructor for the boolean-valued parameter
            </summary>
            <remarks>
            This constructor sets the <see cref="P:CapeOpen.ICapeIdentification.ComponentName"/> and 
            <see cref="P:CapeOpen.ICapeIdentification.ComponentDescription"/> of the 
            parameter. The parameter's value and default value are set to the value. 
            Additionally, the parameters CapeParamMode is set.
            </remarks>
            <param name="name">Sets as the ComponentName of the parameter's ICapeIdentification interface.</param>
            <param name="description">Sets as the ComponentDescription of the parameter's ICapeIdentification interface.</param>
            <param name="value">Sets the inital value of the parameter.</param>
            <param name="defaultValue">Sets the default value of the parameter.</param>
            <param name="mode">Sets the CapeParamMode mode of the parameter.</param>
        </member>
        <member name="M:CapeOpen.BooleanParameter.System#ICloneable#Clone">
            <summary>
            Creates a copy of the parameter.
            </summary>
            <remarks><para>The clone method is used to create a deep copy of the parameter.</para>
            </remarks>
            <returns>A copy of the current parameter.</returns>
        </member>
        <member name="M:CapeOpen.BooleanParameter.OnParameterDefaultValueChanged(CapeOpen.ParameterDefaultValueChangedEventArgs)">
            <summary>
            Occurs when the user changes of the default value of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterDefaultValueChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterDefaultValueChanged</c> in a derived class, be sure to call the base class's <c>OnParameterDefaultValueChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="M:CapeOpen.BooleanParameter.OnParameterDefaultValueChanged(CapeOpen.ParameterDefaultValueChangedEventArgs)">OnParameterDefaultValueChanged</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.BooleanParameter.Validate(System.String@)">
            <summary>
            Validates the current value of the parameter against the 
            specification of the parameter.
            </summary>
            <remarks>
            This method checks the current value of the parameter to determine if it is an allowed value. Any valid boolean value (true/false) 
            valid for the <see cref="T:CapeOpen.ICapeBooleanParameterSpec"/> paramaters.
            </remarks>
            <returns>
            True if the parameter is valid, false if not valid.
            </returns>
            <param name="message">The message is used to return the reason that the parameter is invalid.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed.</exception>
        </member>
        <member name="M:CapeOpen.BooleanParameter.Reset">
            <summary>
            Sets the value of the parameter to its default value.
            </summary>
            <remarks>
            Sets the value of the parameter to its default value.
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.BooleanParameter.Validate(System.Boolean,System.String@)">
            <summary>
            Validates the value sent against the specification of the parameter.
            </summary>
            <remarks>
            Validates whether the argument is accepted by the parameter as a valid value. 
            It returns a flag to indicate the success or failure of the validation together 
            with a text message which can be used to convey the reasoning to the client/user.
            </remarks>
            <returns>
            True if the parameter is valid, false if not valid.
            </returns>
            <param name="value">Boolean value that will be validated against the parameter's current specification.</param>
            <param name="message">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.BooleanParameter.CapeOpen#ICapeParameter#Specification">
            <summary>
            Gets the Specification for this Parameter
            </summary>
            <remarks>
            Gets the specification of the parameter. The Get method returns the 
            specification as an interface to the correct specification type.
            </remarks>
            <value>
            An object implementing the <see cref="T:CapeOpen.ICapeParameterSpec"/>, as well as the
            <see cref="T:CapeOpen.ICapeBooleanParameterSpec"/> interface.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.BooleanParameter.CapeOpen#ICapeParameter#value">
            <summary>
            Gets and sets the value for this Parameter.
            </summary>
            <remarks>
            This value uses the System.Object data type for compatibility with 
            COM-based CAPE-OPEN.
            </remarks>
            <returns>A boxed boolean value of the parameter.</returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.BooleanParameter.CapeOpen#ICapeParameterSpec#Dimensionality">
            <summary>
            Gets the dimensionality of the parameter.
            </summary>
            <remarks>
            Physical dimensions are not applicable to boolean values.
            </remarks>
            <returns>
            Null pointer.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="E:CapeOpen.BooleanParameter.ParameterDefaultValueChanged">
            <summary>
            Occurs when the user changes of the default value of the parameter changes.
            </summary>
        </member>
        <member name="P:CapeOpen.BooleanParameter.Value">
            <summary>
            Gets and sets the value for this Parameter. 
            </summary>
            <remarks>
            The value of the parameter.
            </remarks>
            <value>
            The value of the parameter.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.BooleanParameter.Type">
            <summary>
            Gets the type of the parameter. 
            </summary>
            <remarks>
            Gets the <see cref="T:CapeOpen.CapeParamType"/> of the parameter for which this is a specification: real 
            (CAPE_REAL), integer(CAPE_INT), option(CAPE_OPTION), boolean(CAPE_BOOLEAN) 
            or array(CAPE_ARRAY).
            </remarks>
            <value>The parameter type. </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed.</exception>
        </member>
        <member name="P:CapeOpen.BooleanParameter.DefaultValue">
            <summary>
            Gets and sets the default value of the parameter.
            </summary>
            <remarks>
            Gets and sets the default value of the parameter.
            </remarks>
            <value>
            The default value of the parameter.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="T:CapeOpen.Resources.unitCategories_xml">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CapeOpen.Resources.unitCategories_xml.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CapeOpen.Resources.unitCategories_xml.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CapeOpen.Resources.unitCategories_xml.unitCategories">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;CategorySpecifications&gt;
              &lt;Category_Spec&gt;
                &lt;Category&gt;Mass&lt;/Category&gt;
                &lt;Aspen&gt;MASS&lt;/Aspen&gt;
                &lt;SI_Unit&gt;kg&lt;/SI_Unit&gt;
                &lt;Mass&gt;1&lt;/Mass&gt;
                &lt;Time&gt;0&lt;/Time&gt;
                &lt;Length&gt;0&lt;/Length&gt;
                &lt;ElectricalCurrent&gt;0&lt;/ElectricalCurrent&gt;
                &lt;Temperature&gt;0&lt;/Temperature&gt;
                &lt;AmountOfSubstance&gt;0&lt;/AmountOfSubstance&gt;
                &lt;Luminous&gt;0&lt;/Luminous&gt;
                &lt;Currency&gt;0&lt;/Currency&gt;
                &lt;Comment&gt;
                &lt;/Comment&gt;
              &lt;/Category_Spec&gt;
              &lt;Category_Spec&gt;
                &lt;Category&gt;Time&lt;/Category [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:CapeOpen.MixerExample">
            <summary>
            This is a mixer eample class that models an adiabtic mixer.
            </summary>
            <remarks>
            <para>The mixer  conducts a material and energy balance to determine output flow
            from the input flows.</para>
            <para> There are four parameters. Only one is used in the calculation, the
            real-valued pressure drop. The pressure of the material attached to the outlet
            port is set to the pressure of the lower inlet material objects less the 
            value of the pressure drop parameter. The remaining parameters are provided
            as a demonstration of integer, boolean and option parameters.</para>
            </remarks>
        </member>
        <member name="T:CapeOpen.CapeUnitBase">
            <summary>
            Abstract base class to be used to develop unit operation models. 
            </summary>
            <remarks>
            This abstract class contains all required functionality for a unit operation
            PMC except the <c>Calculate()</c> method, which is a pure virtual function that 
            must be overridden. To use, add  parameters and ports to the appropriate collection 
            and implement the <c>Calculate()</c> method.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeUnitBase.#ctor">
            <summary>
            Constructor for the unit operation.
            </summary>
            <remarks>
            This method is creates the port and parameter collections for the unit 
            operation. As a result, ports and parameters can be added in the constructor
            for the derived unt or during the <c>Initialize()</c> call. 
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
        </member>
        <member name="M:CapeOpen.CapeUnitBase.OnPortCollectionListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Occurs when the list or an item in the list changes.
            </summary>
            <remarks>ListChanged notifications for item value changes are only raised if the 
            list item type implements the INotifyPropertyChanged interface.</remarks> 
            <param name="args">A <see cref="T:System.ComponentModel.ListChangedEventArgs">System.ComponentModel.ListChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.CapeUnitBase.OnPortCollectionAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary>
            Occurs before an item is added to the list.
            </summary>
            <remarks>
            The AddingNew event occurs before a new object is added to the collection 
            represented by the Items property. This event is raised after the AddNew method is 
            called, but before the new item is created and added to the internal list. By 
            handling this event, the programmer can provide custom item creation and insertion 
            behavior without being forced to derive from the BindingList&gt;T&lt; class. 
            </remarks>
            <param name="args">A <see cref="T:System.ComponentModel.AddingNewEventArgs">System.ComponentModel.AddingNewEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.CapeUnitBase.OnUnitOperationValidated(CapeOpen.UnitOperationValidatedEventArgs)">
            <summary>
            Occurs when a unit operation is validated.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnUnitOperationValidated</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnUnitOperationValidated</c> in a derived class, be sure to call the base class's <c>OnUnitOperationValidated</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.UnitOperationValidatedEventArgs">UnitOperationValidatedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.CapeUnitBase.OnUnitOperationBeginCalculation(System.String)">
            <summary>
            Occurs at the start of a unit operation calculation process.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnUnitOperationBeginCalculation</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnUnitOperationBeginCalculation</c> in a derived class, be sure to call the base class's <c>OnUnitOperationBeginCalculation</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name = "message">A string that contains information about the the calculation.</param>
        </member>
        <member name="M:CapeOpen.CapeUnitBase.OnUnitOperationEndCalculation(System.String)">
            <summary>
            Occurs at the completion of a unit operation calculation process.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnUnitOperationEndCalculation</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnUnitOperationEndCalculation</c> in a derived class, be sure to call the base class's <c>OnUnitOperationBeginCalculation</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name = "message">A string that contains information about the the calculation.</param>
        </member>
        <member name="M:CapeOpen.CapeUnitBase.RegisterFunction(System.Type)">
            <summary>
            The function that controls COM registration.  
            </summary>
            <remarks>
            This function adds the registration keys specified in the CAPE-OPEN Method and
            Tools specifications. In particular, it indicates that this unit operation implements
            the CAPE-OPEN Unit Operation Category Identification. It also adds the CapeDescription
            registry keys using the <see cref="T:CapeOpen.CapeNameAttribute"/>, <see cref="T:CapeOpen.CapeDescriptionAttribute"/>, <see cref="T:CapeOpen.CapeVersionAttribute"/>
            <see cref="T:CapeOpen.CapeVendorURLAttribute"/>, <see cref="T:CapeOpen.CapeHelpURLAttribute"/>, 
            and <see cref="T:CapeOpen.CapeAboutAttribute"/> attributes.
            </remarks>
            <param name="t">The type of the class being registered.</param> 
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeUnitBase.UnregisterFunction(System.Type)">
            <summary>
            This function controls the removal of the class from the COM registry when the class is unistalled.  
            </summary>
            <remarks>
            The method will remove all subkeys added to the class' regristration, including the CAPE-OPEN
            specific keys added in the <see cref="M:CapeOpen.CapeUnitBase.RegisterFunction(System.Type)"/> method.
            </remarks>
            <param name="t">The type of the class being unregistered.</param> 
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeUnitBase.Edit">
            <summary>
            Displays the PMC graphic interface, if available.
            </summary>
            <remarks>
            <para>By default, this method throws a <see cref="T:CapeOpen.CapeNoImplException">CapeNoImplException</see>
            that according to the CAPE-OPEN specification, is interpreted by the process
            modeling environment as indicating that the PMC does not have a editor 
            GUI, and the PME must perform editing steps.</para>
            <para>In order for a PMC to provide its own editor, the Edit method will
            need to be overridden to create a graphical editor. When the user requests the flowheet
            to show the editor, this method will be called to edit the unit. Overriden classes should
            not return a failure (throw and exception) as this will be interpreted by the flowsheeting 
            tool as the unit not providing its own editor.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeUnitBase.Calculate">
            <summary>
            Executes the necessary calculations involved in the unit operation model.
            </summary>
            <remarks>
            <para>The Flowsheet Unit performs its calculation, that is, computes the variables 
            that are missing at this stage in the complete description of the input and 
            output streams and computes any public parameter value that needs to be 
            displayed. Calculate will be able to do progress monitoring and checks for 
            interrupts as required using the simulation context. At present, there are no
            standards agreed for this.</para>
            <para>It is recommended that Flowsheet Units perform a suitable flash 
            calculation on all output streams. In some cases a Simulation Executive will 
            be able to perform a flash calculation but the writer of a Flowsheet Unit is 
            in the best position to decide the correct flash to use.</para>
            <para>Before performing the calculation, this method should perform any final 
            validation tests that are required. For example, at this point the validity of 
            Material Objects connected to ports can be checked.</para>
            <para>There are no input or output arguments for this method.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeTimeOut">ECapeTimeOut</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">ECapeSolvingError</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
        </member>
        <member name="M:CapeOpen.CapeUnitBase.OnCalculate">
            <summary>
            Executes the necessary calculations involved in the unit operation model.
            </summary>
            <remarks>
            <para>The Flowsheet Unit performs its calculation, that is, computes the variables 
            that are missing at this stage in the complete description of the input and 
            output streams and computes any public parameter value that needs to be 
            displayed. Calculate will be able to do progress monitoring and checks for 
            interrupts as required using the simulation context. At present, there are no
            standards agreed for this.</para>
            <para>It is recommended that Flowsheet Units perform a suitable flash 
            calculation on all output streams. In some cases a Simulation Executive will 
            be able to perform a flash calculation but the writer of a Flowsheet Unit is 
            in the best position to decide the correct flash to use.</para>
            <para>Before performing the calculation, this method should perform any final 
            validation tests that are required. For example, at this point the validity of 
            Material Objects connected to ports can be checked.</para>
            <para>There are no input or output arguments for this method.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeTimeOut">ECapeTimeOut</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">ECapeSolvingError</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
        </member>
        <member name="M:CapeOpen.CapeUnitBase.Validate(System.String@)">
            <summary>
            Validates the unit operation. 
            </summary>
            <remarks>
            <para>Sets the flag that indicates whether the Flowsheet Unit is valid by 
            validating the ports and parameters of the Flowsheet Unit. For example, this 
            method could check that all mandatory ports have connections and that the 
            values of all parameters are within bounds.</para>
            <para>Note that the Simulation Executive can call the Validate routine at any 
            time, in particular it may be called before the executive is ready to call 
            the Calculate method. This means that Material Objects connected to unit ports 
            may not be correctly configured when Validate is called. The recommended approach 
            is for this method to validate parameters and ports but not Material Object 
            configuration. A second level of validation to check Material Objects can be
            implemented as part of Calculate, when it is reasonable to expect that the 
            Material Objects connected to ports will be correctly configured. </para>
            <para>The base-class implementation of this method traverses the port and 
            parameter collections and calls the  <see cref="M:CapeOpen.CapeUnitBase.Validate(System.String@)"/> method of each 
            member. The unit is valid if all port and parameters are valid, which is 
            signified by the Validate method returning <c>true</c>.</para>
            </remarks>
            <returns>
            <para>true, if the unit is valid.</para>
            <para>false, if the unit is not valid.</para>
            </returns>
            <param name="message">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadCOParameter">ECapeBadCOParameter</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
        </member>
        <member name="M:CapeOpen.CapeUnitBase.ProduceReport(System.String@)">
            <summary>
            Produces the active report for the unit operation.
            </summary>
            <remarks>
            Produce the designated report. If no value has been set, it produces the default report.
            </remarks>
            <param name="message">String containing the text for the currently selected report.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="P:CapeOpen.CapeUnitBase.CapeOpen#ICapeUnit#ports">
            <summary>
            Gets the collection of unit operation ports. 
            </summary>
            <remarks>
            Return type is System.Object and this method is simply here for classic 
            COM-based CAPE-OPEN interop.
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
        </member>
        <member name="P:CapeOpen.CapeUnitBase.CapeOpen#ICapeUnitReport#reports">
            <summary>
            Gets the list of possible reports for the unit operation.
            </summary>
            <returns>
            Return type is System.Object and this method is simply here for 
            classic =COM-based CAPE-OPEN interop.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="E:CapeOpen.CapeUnitBase.PortCollectionListChanged">
            <summary>
            Occurs when the list or an item in the list changes.
            </summary>
            <remarks>ListChanged notifications for item value changes are only raised if the 
            list item type implements the INotifyPropertyChanged interface.</remarks> 
        </member>
        <member name="E:CapeOpen.CapeUnitBase.PortCollectionAddingNew">
            <summary>
            Occurs when the user Adds a new element to the port collection.
            </summary>
            <remarks>The event to be handles when the name of the PMC is changed.</remarks> 
        </member>
        <member name="E:CapeOpen.CapeUnitBase.UnitOperationValidated">
            <summary>
            Occurs when the user validates the unit operation.
            </summary>
        </member>
        <member name="E:CapeOpen.CapeUnitBase.UnitOperationBeginCalculation">
            <summary>
            Occurs when the user begins the calculation of the unit operation.
            </summary>
        </member>
        <member name="E:CapeOpen.CapeUnitBase.UnitOperationEndCalculation">
            <summary>
            Occurs at the completion of a calculation of a unit operation.
            </summary>
        </member>
        <member name="P:CapeOpen.CapeUnitBase.Ports">
            <summary>
            Gets the collection of unit operation ports.
            </summary>
            <remarks>
            <para>Return an interface to a collection containing the list of unit ports 
            (e.g. <see cref="T:CapeOpen.ICapeCollection"/>).</para>
            <para>Return the collection of unit ports (i.e. ICapeCollection). 
            These are delivered as a collection of elements exposing the interfaces 
            <see cref="T:CapeOpen.ICapeUnitPort"/>.</para>
            </remarks>
            <value>The port collection of the unit operation.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
        </member>
        <member name="P:CapeOpen.CapeUnitBase.ValStatus">
            <summary>
            Gets the flag to indicate the unit operation's validation status
            </summary>
            <remarks>
            <para> Get the flag that indicates whether the Flowsheet Unit is valid (e.g. some 
            parameter values have changed but they have not been validated by using 
            Validate). It has three possible values:</para>
            <list type="bullet"> 
            <item>notValidated(CAPE_NOT_VALIDATED)</item>
            <description>The unit’s validate() method has not 
            been called since the last operation that could have changed the validation 
            status of the unit, for example an update to a parameter value of a connection 
            to a port.</description>
            <item>invalid(CAPE_INVALID)</item>
            <description>The last time the unit’s validate() method was 
            called it returned false.</description>
            <item>valid(CAPE_VALID)</item>
            <description>The last time the unit’s validate() method was 
            called it returned true.</description>
            </list>
            </remarks>
            <value>A flag that indiciates the validation status of the unit operation.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <see cref="T:CapeOpen.CapeValidationStatus">CapeValidationStatus</see>.
        </member>
        <member name="P:CapeOpen.CapeUnitBase.Reports">
            <summary>
            Gets the list of possible reports for the unit operation.
            </summary>
            <remarks>
            Gets the list of possible reports for the unit operation.
            </remarks>
            <value>
            The list of possible reports for the unit operation.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="P:CapeOpen.CapeUnitBase.selectedReport">
            <summary>
            Gets and sets the current active report for the unit operation.
            </summary>
            <remarks>
            Gets and sets the current active report for the unit operation.
            </remarks>
            <value>
            The current active report for the unit operation.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.MixerExample.#ctor">
            <summary>
            Creates an instance of the CMixerExample unit operation.
            </summary>
            <remarks>
            This constructor demonstates the addition of a <see cref="T:CapeOpen.BooleanParameter"/>,
            <see cref="T:CapeOpen.IntegerParameter"/>, <see cref="T:CapeOpen.OptionParameter"/>,
            and a <see cref="T:CapeOpen.RealParameter"/> parameter to the parameter collection.
            In addition, the mixer unit has three <see cref="T:CapeOpen.UnitPort"/> ports
            added to the port collection. See the documentation for the 
            <see cref="M:CapeOpen.MixerExample.OnCalculate"/> method for details on its implementation.
            </remarks>
            <example>
            An example of how to create a unit operation. Parameter and port objects are created 
            and added the their respective collections. Ports are implemented by the <see cref="T:CapeOpen.UnitPort"/> 
            class and are placed in the Port Collection. Parameters are added to the Parameter Collection 
            class. The available parameter classes are <see cref="T:CapeOpen.RealParameter"/>, <see cref="T:CapeOpen.IntegerParameter"/>, 
            <see cref="T:CapeOpen.BooleanParameter"/>, and <see cref="T:CapeOpen.OptionParameter"/>.
            <code>
            public MixerExample()
            {
                // Add Ports using the UnitPort constructor.
                this.Ports.Add(new UnitPort("Inlet Port1", "Test Inlet Port1", CapePortDirection.CAPE_INLET, CapePortType.CAPE_MATERIAL));
                this.Ports.Add(new UnitPort("Inlet Port2", "Test Inlet Port2", CapePortDirection.CAPE_INLET, CapePortType.CAPE_MATERIAL));
                this.Ports.Add(new UnitPort("Outlet Port", "Test Outlet Port", CapePortDirection.CAPE_OUTLET, CapePortType.CAPE_MATERIAL));
            
                // Add a real valued parameter using the RealParameter  constructor.
                RealParameter real = new RealParameter("PressureDrop", "Drop in pressure between the outlet from the mixer and the pressure of the lower pressure inlet.", 0.0, 0.0, 0.0, 100000000.0, CapeParamMode.CAPE_INPUT, "Pa");
                this.Parameters.Add(real);
            
                // Add a real valued parameter using the IntegerParameter  constructor.
                this.Parameters.Add(new IntegerParameter("Integer Parameter", "This is an example of an integer parameter.", 12, 12, 0, 100, CapeParamMode.CAPE_INPUT_OUTPUT));
            
                // Add a real valued parameter using the BooleanParameter  constructor.
                this.Parameters.Add(new BooleanParameter("Boolean Parameter", "This is an example of a boolean parameter.", false, false, CapeOpen.CapeParamMode.CAPE_INPUT_OUTPUT));
            
                // Create an array of strings for the option parameter restricted value list.
                String[] options = { "Test Value", "Another Value" };
            
                // Add a string valued parameter using the OptionParameter constructor.
                this.Parameters.Add(new OptionParameter("OptionParameter", "This is an example of an option parameter.", "Test Value", "Test Value", options, true, CapeParamMode.CAPE_INPUT_OUTPUT));
            
                // Add an available report.
                this.Reports.Add("Report 2");
            }
            </code>
            </example>
        </member>
        <member name="M:CapeOpen.MixerExample.OnCalculate">
             <summary>
             Calculation method for the MixerExample unit operation.
             </summary>
             <remarks>
             A mixer unit operation combined the material flows from two inlet ports into the flow of a single outlet port.
             In order to do this calculation, the mixer unit obtains flow information from each inlet port,
             the adds the flows to obtain the flow of the outlet port. In the case of the mixer below, it is assumed that the
             components are the same in each material object and that the components are listed in the same order.
             After the combined flow is calculated at the values set to the outlet port, along with the 
             enthalpy of the stream calculated from an energy balance and the pressure determined from
             the inlet pressures, the outlet stream can be flahsed to determine equilibrium conditions.
             The last task is releasing any duplicate material objects obtained.
             </remarks>
             <example>
             <para>An example of how to calculate a unit operation. This method obtains material objects 
             from each of ports using the <see cref="T:CapeOpen.PortCollection"/> class. The <see cref="T:CapeOpen.ICapeThermoMaterialObject"/>
             interface is used to obtain the names using the CompIds() method, flows of each of the 
             components present in the material object, overall pressure and overall enthalpy are
             obtained using the <see cref="M:CapeOpen.ICapeThermoMaterialObject.GetProp(System.String,System.String,System.Object,System.String,System.String)"/> method. The overall enthalpy of the stram is 
             calculated using <see cref="M:CapeOpen.ICapeThermoMaterialObject.CalcProp(System.Object,System.Object,System.String)"/> method. The unit then combines the flows, 
             calculates the output stream enthalpy, and determines output pressure from the lower of 
             the two streams' pressure and pressure drop parameter. Lastly, the results of the 
             calculations are applied to the output material object using the <see cref="M:CapeOpen.ICapeThermoMaterialObject.SetProp(System.String,System.String,System.Object,System.String,System.String,System.Object)"/> 
             method. The last method of the calculate method is to call the material's 
             <see cref="M:CapeOpen.ICapeThermoMaterialObject.CalcEquilibrium(System.String,System.Object)"/> method.</para>
             <para>
             In this case, the inlet materials need to be released. This is accomplished using the
             <see cref="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)"/> method.
             Using this method to release the outlet material object would result in an null object reference error.
             </para>
             <para>
             The method also documents use of the <see cref="M:CapeOpen.CapeObjectBase.throwException(System.Exception)"/> method to provide
             CAPE-OPEN compliant error handling.
             </para>
             <code>
             public override void OnCalculate()
             {
                 // Log a message using the simulation context (pop-up message commented out.
                 if (this.SimulationContext != null)
                 {
                     ((ICapeDiagnostic)this.SimulationContext).LogMessage("Starting Mixer Calculation");
                     ((CapeOpen.ICapeDiagnostic)this.SimulationContext).PopUpMessage("Starting Mixer Calculation");
                 }
             
                 // Get the material Object from Port 0.
                 ICapeThermoMaterialObject in1 = null;
                 try
                 {
                     in1 = (ICapeThermoMaterialObject)this.Ports[0].connectedObject;
                 }
                 catch (System.Exception p_Ex)
                 {
                     CapeOpen.CapeInvalidOperationException ex = new CapeOpen.CapeInvalidOperationException("Material object does not support CAPE-OPEN Thermodynamics 1.0.", p_Ex);
                     this.throwException(ex);
                 }
             
                 // Duplicate the port, its an input port, always use a duplicate.
                 try
                 {
                     in1 = (ICapeThermoMaterialObject)in1.Duplicate();
                 }
                 catch (System.Exception p_Ex)
                 {
                     CapeOpen.CapeInvalidOperationException ex = new CapeOpen.CapeInvalidOperationException("Object connected to Inlet Port 1 does not support CAPE-OPEN Thermodynamics 1.0.", p_Ex);
                     this.throwException(ex);
                 }
             
                 // Arrays for the GetProps and SetProps call for enthaply.
                 String[] phases = { "Overall" };
                 String[] props = { "enthalpy" };
             
                 // Declare variables for calculations.
                 String[] in1Comps = null;
                 double[] in1Flow = null;
                 double[] in1Enthalpy = null;
                 double[] pressure = null;
                 double totalFlow1 = 0;
             
                 // Exception catching code...
                 try
                 {
                     // Get Strings, must cast to string array data type.
                     in1Comps = (String[])in1.ComponentIds;
             
                     // Get flow. Arguments are the property; phase, in this case, Overall; compound identifications
                     // in this case, the null returns the property for all components; calculation type, in this case,  
                     // null, no calculation type; and lastly, the basis, moles. Result is cast to a double array, and will contain one value.
                     in1Flow = (double[])in1.GetProp("flow", "Overall", null, null, "mole");
             
                     // Get pressure. Arguments are the property; phase, in this case, Overall; compound identifications
                     // in this case, the null returns the property for all components; calculation type, in this case, the 
                     // mixture; and lastly, the basis, moles. Result is cast to a double array, and will contain one value.
                     pressure = (double[])in1.GetProp("Pressure", "Overall", null, "Mixture", null);
             
                     // The following code adds the individual flows to get the total flow for the stream.
                     for (int i = 0; i &lt; in1Flow.Length; i++)
                     {
                         totalFlow1 = totalFlow1 + in1Flow[i];
                     }
             
                     // Calculates the mixture enthalpy of the stream.
                     in1.CalcProp(props, phases, "Mixture");
             
                     // Get the enthalpy of the stream. Arguments are the property, enthalpy; the phase, overall;
                     // a null pointer, required as the overall enthalpy is desired; the calculation type is
                     // mixture; and the basis is moles.
                     in1Enthalpy = (double[])in1.GetProp("enthalpy", "Overall", null, "Mixture", "mole");
                 }
                 catch (System.Exception p_Ex)
                 {
                     // Exception handling, wraps a COM exception, shows the message, and re-throws the excecption.
             
                     if (p_Ex is System.Runtime.InteropServices.COMException)
                     {
                         System.Runtime.InteropServices.COMException comException = (System.Runtime.InteropServices.COMException)p_Ex;
                         p_Ex = CapeOpen.COMExceptionHandler.ExceptionForHRESULT(in1, p_Ex);
                     }
                     this.throwException(p_Ex);
                 }
             
                 // Release the material object if it is a COM object.
                 if (in1.GetType().IsCOMObject) System.Runtime.InteropServices.Marshal.ReleaseComObject(in1);
             
                 // Get the second inlet port material object. In this case, the Material Object wrapper is used.
                 MaterialObjectWrapper in2 = new MaterialObjectWrapper(this.Ports[1].connectedObject);
             
                 // Duplicate the material object.
                 in2 = in2.Duplicate();
             
                 // Declare variables.
                 String[] in2Comps = null;
                 double[] in2Flow = null;
                 double[] in2Enthalpy = null;
                 double totalFlow2 = 0;
             
                 // Try block.
                 try
                 {
                     // Get the component identifications.
                     in2Comps = in2.ComponentIds;
             
                     // Get flow. Arguments are the property; phase, in this case, Overall; compound identifications
                     // in this case, the null returns the property for all components; calculation type, in this case,  
                     // null, no calculation type; and lastly, the basis, moles. Result is cast to a double array, and will contain one value.
                     in2Flow = in2.GetProp("flow", "Overall", null, null, "mole");
             
                     // Get pressure. Arguments are the property; phase, in this case, Overall; compound identifications
                     // in this case, the null returns the property for all components; calculation type, in this case, the 
                     // mixture; and lastly, the basis, moles. Result is cast to a double array, and will contain one value.
                     double[] press = in2.GetProp("Pressure", "Overall", null, "Mixture", null);
                     if (press[0] &lt; pressure[0]) pressure[0] = press[0];
             
                     // The following code adds the individual flows to get the total flow for the stream.
                     for (int i = 0; i &lt; in2Flow.Length; i++)
                     {
                         totalFlow2 = totalFlow2 + in2Flow[i];
                     }
             
                     // Calculates the mixture enthalpy of the stream.
                     in2.CalcProp(props, phases, "Mixture");
             
                     // Get the enthalpy of the stream. Arguments are the property, enthalpy; the phase, overall;
                     // a null pointer, required as the overall enthalpy is desired; the calculation type is
                     // mixture; and the basis is moles.
                     in2Enthalpy = in2.GetProp("enthalpy", "Overall", null, "Mixture", "mole");
                 }
                 catch (System.Exception p_Ex)
                 {
                     System.Runtime.InteropServices.COMException comException = (System.Runtime.InteropServices.COMException)p_Ex;
                     if (comException != null)
                     {
                         p_Ex = CapeOpen.COMExceptionHandler.ExceptionForHRESULT(in2, p_Ex);
                     }
                     this.throwException(p_Ex);
                 }
             
                 // Release the material object if it is a COM object.
                 in2.Dispose();
             
                 // Get the outlet material object.
                 MaterialObjectWrapper outPort = new MaterialObjectWrapper(this.Ports[2].connectedObject);
             
                 // An empty, one-member array to set values in the outlet material stream.
                 double[] values = new double[1];
             
                 // Use energy balanace to calculate the outlet enthalpy.
                 values[0] = (in1Enthalpy[0] * totalFlow1 + in2Enthalpy[0] * totalFlow2) / (totalFlow1 + totalFlow2);
                 try
                 {
                     // Set the outlet enthalpy, for the overall phase, with a mixture calculation type
                     // to the value calculated above.
                     outPort.SetProp("enthalpy", "Overall", null, "Mixture", "mole", values);
             
                     // Set the outlet pressure to the lower of the to inlet pressures less the value of the 
                     // pressure drop parameter.
                     pressure[0] = pressure[0] - (double)(this.Parameters[0].value);
             
                     // Set the outlet pressure.
                     outPort.SetProp("Pressure", "Overall", null, null, null, pressure);
             
                     // Resize the value array for the number of components.
                     values = new double[in1Comps.Length];
             
                     // Calculate the individual flow for each component.
                     for (int i = 0; i &lt; in1Comps.Length; i++)
                     {
                         values[i] = in1Flow[i] + in2Flow[i];
                     }
                     // Set the outlet flow by component. Note, this is for overall phase and mole flows.
                     // The component Identifications are used as a check.
                     outPort.SetProp("flow", "Overall", in1Comps, null, "mole", values);
             
                     // Calculate equilibrium using a "pressure-enthalpy" flash type.
                     outPort.CalcEquilibrium("PH", null);
                 }
                 catch (System.Exception p_Ex)
                 {
                     System.Runtime.InteropServices.COMException comException = (System.Runtime.InteropServices.COMException)p_Ex;
                     if (comException != null)
                     {
                         p_Ex = CapeOpen.COMExceptionHandler.ExceptionForHRESULT(outPort, p_Ex);
                     }
                     this.throwException(p_Ex);
                 }
             
                 // Log the end of the calculation.
                 if (this.SimulationContext != null)
                 {
                     ((CapeOpen.ICapeDiagnostic)this.SimulationContext).LogMessage("Ending Mixer Calculation");
                     ((CapeOpen.ICapeDiagnostic)this.SimulationContext).PopUpMessage("Ending Mixer Calculation");
                 }
             }
             
            </code>
             </example>
             <see cref="T:CapeOpen.ICapeThermoMaterialObject"/>
             <see cref="T:CapeOpen.COMExceptionHandler"/>
        </member>
        <member name="M:CapeOpen.MixerExample.ProduceReport(System.String@)">
            <summary>
            Produces the active report for the Mixer Example unit operation.
            </summary>
            <remarks>
            The ProduceReport method creates the active report for the unit operation. The method looks to the 
            <see cref="P:CapeOpen.CapeUnitBase.selectedReport"/> and generates the required report. If a local report has
            ben added likne in <see cref="M:CapeOpen.MixerExample.#ctor"/>, this method must generate that report.
            </remarks>
            <example>
            An example of how to produce a report for a unit operation. In this case, the report can be either 
            "Report 2" defined in the <see cref="M:CapeOpen.MixerExample.#ctor"/> or the "Default Report" from 
            <see cref="T:CapeOpen.CapeUnitBase"/>. If "Default Report" is selected, then the <see cref="M:CapeOpen.CapeUnitBase.ProduceReport(System.String@)"/>
            method is called, and the message parameter forwarded. Otherwise, the report is generated in this method.
            "Default Report" gen.
            <code>
            public override void ProduceReport(ref String message)
            {
            if (this.selectedReport == "Default Report") base.ProduceReport(ref message);
            if (this.selectedReport == "Report 2") message = "This is the alternative Report.";
            }
            </code>
            </example>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="T:CapeOpen.ICapeThermoReliability">
            <summary>
            Interface for the reliability of the Thermo Object.
            </summary>
            <remarks>
            The ThermoReliability object is still an uncertain
            interface. This object holds some measure of the reliability of
            the physical property calculation.  It might be a boolean.  It
            might be an enumerated type, or it might be a real number.
            </remarks>
        </member>
        <member name="T:CapeOpen.ICapeThermoMaterialTemplate">
            <summary>
            Material Template interface
            </summary>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialTemplate.CreateMaterialObject">
            <summary>
            Create a material object from this Template
            </summary>
            <remarks>
            Allows a Material Object to be created from the Material Template interface.
            </remarks>
            <returns>
            The created/initialized Material Object.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialTemplate.SetProp(System.String,System.Object)">
            <summary>
            Set some property value(s)
            </summary>
            <remarks>
            Allows custom property and values to be set on the Material Template to 
            support pseudo components.
            </remarks>
            <param name="property">
            The custom property to set.
            </param>
            <param name="values">
            The actual values of the property. A System.Object containing a double 
            array marshalled from a COM Object.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
        </member>
        <member name="T:CapeOpen.ICapeThermoMaterialObject">
            <summary>
            Material object interface
            </summary>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialObject.GetUniversalConstant(System.Object)">
            <summary>
            Get some universal constant(s)
            </summary>
            <remarks>
            Retrieves universal constants from the Property Package.
            </remarks>
            <returns>
            Values of the requested universal constants in an array of doubles as a 
            System.Object, which is marshalled as a Object COM-based CAPE-OPEN.
            </returns>
            <param name="props">
            List of universal constants to be retrieved. A System.Object containing a 
            String array.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialObject.GetComponentConstant(System.Object,System.Object)">
            <summary>
            Get some pure component constant(s)
            </summary>
            <remarks>
            Retrieve component constants from the Property Package. See Notes for more 
            information.
            </remarks>
            <returns>
            Component Constant values returned from the Property Package for all the 
            components in the Material Object It is a Object containing a 1 dimensional 
            array of Objects. If we call P to the number of requested properties and C to 
            the number requested components the array will contain C*P Objects. The C 
            first ones (from position 0 to C-1) will be the values for the first requested 
            property (one Object for each component). After them (from position C to 2*C-1) 
            there will be the values of constants for the second requested property, and 
            so on. An array of doubles as a System.Object, which is marshalled as a Object 
            COM-based CAPE-OPEN.
            </returns>
            <param name="props">
            List of component constants. A System.Object containing a String array 
            marshalled from a COM Object.
            </param>
            <param name="compIds">
            List of component IDs for which constants are to be retrieved. emptyObject 
            for all components in the Material Object. A System.Object containing a String 
            array marshalled from a COM Object.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialObject.CalcProp(System.Object,System.Object,System.String)">
            <summary>
            Calculate some properties
            </summary>
            <remarks>
            This method is responsible for doing all property calculations and delegating 
            these calculations to the associated thermo system. This method is further 
            defined in the descriptions of the CAPE-OPEN Calling Pattern and the User 
            Guide Section. See Notes for a more detailed explanation of the arguments and 
            CalcProp description in the notes for a general discussion of the method.
            </remarks>
            <param name="props">
            The List of Properties to be calculated. A System.Object containing a String 
            array.
            </param>
            <param name="phases">
            List of phases for which the properties are to be calculated. A System.Object 
            containing a String array.
            </param>
            <param name="calcType">
            Type of calculation: Mixture Property or Pure Component Property. For partial 
            property, such as fugacity coefficients of components in a mixture, use 
            “Mixture” CalcType. For pure component fugacity coefficients, use “Pure” 
            CalcType.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">ECapeSolvingError</exception>
            <exception cref="T:CapeOpen.ECapeOutOfBounds">ECapeOutOfBounds</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialObject.GetProp(System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            Get some pure component constant(s)
            </summary>
            <remarks>
            This method is responsible for retrieving the results from calculations from 
            the MaterialObject. See Notesfor a more detailed explanation of the arguments.
            </remarks>
            <returns>
            Results vector containing property values in SI units arranged by the defined 
            qualifiers. The array is one dimensional containing the properties, in order 
            of the "props" array for each of the compounds, in order of the compIds array. 
            An array of doubles as a System.Object, which is marshalled as a Object 
            COM-based CAPE-OPEN. 
            </returns>
            <param name="property">
            The Property for which results are requested from the MaterialObject.
            </param>
            <param name="phase">
            The qualified phase for the results.
            </param>
            <param name="compIds">
            The qualified components for the results. emptyObject to specify all 
            components in the Material Object. For mixture property such as liquid 
            enthalpy, this qualifier is not required. Use emptyObject as place holder.
            A System.Object containing a String array marshalled from a COM Object.
            </param>
            <param name="calcType">
            The qualified type of calculation for the results. (valid Calculation Types: 
            Pure and Mixture)
            </param>
            <param name="basis">
            Qualifies the basis of the result (i.e., mass /mole). Default is mole. Use 
            NULL for default or as place holder for property for which basis does not 
            apply (see also Specific properties.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialObject.SetProp(System.String,System.String,System.Object,System.String,System.String,System.Object)">
            <summary>
            Get some pure component constant(s)
            </summary>
            <remarks>
            This method is responsible for setting the values for properties of the 
            Material Object. See Notes for a more detailed explanation of the arguments.
            </remarks>
            <param name="property">
            The Property for which results are requested from the MaterialObject.
            </param>
            <param name="phase">
            The qualified phase for the results.
            </param>
            <param name="compIds">
            The qualified components for the results. emptyObject to specify all 
            components in the Material Object. For mixture property such as liquid 
            enthalpy, this qualifier is not required. Use emptyObject as place holder.
            A System.Object containing a String array marshalled from a COM Object.
            </param>
            <param name="calcType">
            The qualified type of calculation for the results. (valid Calculation Types: 
            Pure and Mixture)
            </param>
            <param name="basis">
            Qualifies the basis of the result (i.e., mass /mole). Default is mole. Use 
            NULL for default or as place holder for property for which basis does not 
            apply (see also Specific properties.
            </param>
            <param name="values">
            Values to set for the property.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialObject.CalcEquilibrium(System.String,System.Object)">
            <summary>
            Calculate some equilibrium values
            </summary>
            <remarks>
            This method is responsible for delegating flash calculations to the 
            associated Property Package or Equilibrium Server. It must set the amounts, 
            compositions, temperature and pressure for all phases present at equilibrium, 
            as well as the temperature and pressure for the overall mixture, if not set 
            as part of the calculation specifications. See CalcProp and CalcEquilibrium 
            for more information.
            </remarks>
            <param name="flashType">
            The type of flash to be calculated.
            </param>
            <param name="props">
            Properties to be calculated at equilibrium. emptyObject for no properties. 
            If a list, then the property values should be set for each phase present at 
            equilibrium. A System.Object containing a String array marshalled from 
            a COM Object.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">ECapeSolvingError</exception>
            <exception cref="T:CapeOpen.ECapeOutOfBounds">ECapeOutOfBounds</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialObject.SetIndependentVar(System.Object,System.Object)">
            <summary>
            Set the independent variable for the state
            </summary>
            <remarks>
            Sets the independent variable for a given Material Object.
            </remarks>
            <param name = "indVars">
            Independent variables to be set (see names for state variables for list of 
            valid variables). A System.Object containing a String array marshalled from 
            a COM Object.
            </param>
            <param name = "values">
            Values of independent variables.
            An array of doubles as a System.Object, which is marshalled as a Object 
            COM-based CAPE-OPEN. 
            </param>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialObject.GetIndependentVar(System.Object)">
            <summary>
            Get the independent variable for the state
            </summary>
            <remarks>
            Sets the independent variable for a given Material Object.
            </remarks>
            <param name = "indVars">
            Independent variables to be set (see names for state variables for list of 
            valid variables). A System.Object containing a String array marshalled from 
            a COM Object.
            </param>
            <returns>
            Values of independent variables.
            An array of doubles as a System.Object, which is marshalled as a Object 
            COM-based CAPE-OPEN. 
            </returns>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialObject.PropCheck(System.Object)">
            <summary>
            Check a property is valid
            </summary>
            <remarks>
            Checks to see if given properties can be calculated.
            </remarks>
            <returns>
            Returns Boolean List associated to list of properties to be checked.
            An array of booleans (VT_BOOL) as a System.Object, which is marshalled as a 
            Object COM-based CAPE-OPEN. 
            </returns>
            <param name="props">
            Properties to check. A System.Object containing a String array marshalled from 
            a COM Object.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialObject.AvailableProps">
            <summary>
            Check which properties are available
            </summary>
            <remarks>
            Gets a list properties that have been calculated.
            </remarks>
            <returns>
            Properties for which results are available.in a String array as a 
            System.Object, which is marshalled as a Object COM-based CAPE-OPEN.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialObject.RemoveResults(System.Object)">
            <summary>
            Remove any previously calculated results for given properties
            </summary>
            <remarks>
            Remove all or specified property results in the Material Object.
            </remarks>
            <param name = "props">
            Properties to be removed. emptyObject to remove all properties. A 
            System.Object containing a String array marshalled from a COM Object.
            </param>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialObject.CreateMaterialObject">
            <summary>
            Create another empty material object
            </summary>
            <remarks>
            Create a Material Object from the parent Material Template of the current 
            Material Object. This is the same as using the CreateMaterialObject method 
            on the parent Material Template.
            </remarks> 
            <returns>
            The created/initialized Material Object.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialObject.Duplicate">
            <summary>
            Duplicate this material object
            </summary>
            <remarks>
            Create a duplicate of the current Material Object.
            </remarks>
            <returns>
            The created/initialized Material Object.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialObject.ValidityCheck(System.Object)">
            <summary>
            Check the validity of the given properties
            </summary>
            <remarks>
            Checks the validity of the calculation.
            </remarks>
            <returns>
            Returns the reliability scale of the calculation.
            </returns>
            <param name="props">
            The properties for which reliability is checked. emptyObject to remove all 
            properties. A System.Object containing a String array marshalled from a COM 
            Object.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialObject.GetPropList">
            <summary>
            Get the list of properties
            </summary>
            <remarks>
            Returns list of properties supported by the property package and corresponding 
            CO Calculation Routines. The properties TEMPERATURE, PRESSURE, FRACTION, FLOW, 
            PHASEFRACTION, TOTALFLOW cannot be returned by GetPropList, since all 
            components must support them. Although the property identifier of derivative 
            properties is formed from the identifier of another property, the GetPropList 
            method will return the identifiers of all supported derivative and 
            non-derivative properties. For instance, a Property Package could return 
            the following list: enthalpy, enthalpy.Dtemperature, entropy, entropy.Dpressure.
            </remarks>
            <returns>
            String list of all supported properties of the property package.
            A System.Object containing a String array marshalled from a COM Object.
            </returns>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialObject.GetNumComponents">
            <summary>
            Get the number of components in this material object
            </summary>
            <remarks>
            Returns number of components in Material Object.
            </remarks>
            <returns>
            Number of components in the Material Object.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.ICapeThermoMaterialObject.ComponentIds">
            <summary>
            Get the component ids for this MO
            </summary>
            <remarks>
            Returns the list of components Ids of a given Material Object.
            </remarks>
            <returns>
            The names of the compounds in the matieral object in a String array 
            as a System.Object, which is marshalled as a Object COM-based CAPE-OPEN.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.ICapeThermoMaterialObject.PhaseIds">
            <summary>
            Get the phase ids for this MO
            </summary>
            <remarks>
            It returns the phases existing in the MO at that moment. The Overall phase 
            and multiphase identifiers cannot be returned by this method. See notes on 
            Existence of a phase for more information.
            </remarks>
            <returns>
            The phases present in the material in a String array as a 
            System.Object, which is marshalled as a Object COM-based CAPE-OPEN.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ICapeThermoSystem">
            <summary>
            Interface that provides access to property packages supported by a Thermodynamics Package.
            </summary>
            <remarks>
            <para>This interface is used to access the various substiuent Property Packages provided by a thermodynamic system.</para>
            <para>In the class library, the <see cref="T:CapeOpen.CapeThermoSystem">CapeThermoSystem</see> class provides a list of all
            classes Property Packages registered with COM and all .Net-based property packages that are contained in the Global Assembly Cache.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeThermoSystem.GetPropertyPackages">
            <summary>
            Get the list of available property packages
            </summary>
            <remarks>
            Returns StringArray of property pacakge names supported by the thermo system.
            </remarks>
            <returns>
            The returned set of supported property packages.
            A System.Object containing a String array marshalled from a COM Object.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoSystem.ResolvePropertyPackage(System.String)">
            <summary>
            Resolve a particular property package
            </summary>
            <remarks>
            Resolves referenced property package to a property package interface.
            </remarks>
            <returns>
            The Property Package Interface.
            </returns>
            <param name="propertyPackage">
            The property package to be resolved.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
        </member>
        <member name="T:CapeOpen.ICapeThermoPropertyPackage">
            <summary>
            Interface implemented by a CAPE-OPEN version 1.0 Physical Property Package.
            </summary>
            <remarks>
            <para>A Simple Properties Package (SPP) is a complete, consistent, reusable, ready-to-use collection of 
            methods, chemical components and model parameters for calculating any of a set of known properties for
            the phases of a multiphase system. It includes all the pure component methods and data, together with 
            the relevant mixing rules and interaction parameters. A package normally covers only a small subset of 
            the chemical components and methods accessible through a Properties System. It is thus established by 
            selecting methods etc from within a larger system, possibly adding to or replacing these methods by 
            third party components.
            </para> 
            <para>These additional methods will normally be CAPE-OPEN compliant methods which may have been specially 
            written, or may come from another properties system. (They can only come from another system where that 
            system provides them as CAPE-OPEN compliant components). A Properties Package may be a Simple 
            Properties Package, or at a vendors discretion, made up from Option Sets (see definition of Option Set).
            </para>
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyPackage.GetPhaseList">
            <summary>
            Get the phase list
            </summary>
            <remarks>
            Provides the list of the supported phases. When supported, the Overall phase 
            and multiphase identifiers must be returned by this method.
            </remarks>
            <returns>
            The list of phases supported by the property package.
            A System.Object containing a String array marshalled from a COM Object.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyPackage.GetComponentList(System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@)">
            <summary>
            Get the component list
            </summary>
            <remarks>
            <para>Returns the list of components of a given property package.</para>
            <para>In order to identify the components of a Property Package, the 
            Executive will use the ‘casno’ argument instead of the compIds. The reason is 
            that different COSEs may give different names to the same chemical compounds, 
            whereas CAS Numbers are universal. Nevertheless, GetProp/SetProp... will still 
            require their compIds argument to have the usual contents ("hydrogen",
            "methane",...). Be aware that some simulators may have a limitation on the 
            length of the names for pure components. Hence, it is recommended that each 
            identifier returned by the compIds argument should not contain more than 8 
            characters. See notes on Description of component constants for more 
            information.</para>
            <para>If the package does not return a value for the ‘casno’ argument, or its 
            value is not recognised by the Executive, then the compIds will be interpreted 
            as the component’s English name: such as "benzene", "water",... Obviously, it 
            is recommended to provide a value for the casno argument.</para>
            <para>The same information can also be extracted using the 
            ICapeThermoPropertyPackage GetComponentConstant method, using the 
            casRegistryNumber property identifier.</para>
            </remarks>
            <param name="compIds">
            Reference value to the list of component IDs.
            A reference to a System.Object containing a String array marshalled from a 
            COM Object.
            </param>
            <param name="formulae">
            List of component formulae.
            A reference to a System.Object containing a String array marshalled from a 
            COM Object.
            </param>
            <param name="names">
            List of component names.
            A reference to a System.Object containing a String array marshalled from a 
            COM Object.
            </param>
            <param name="boilTemps">
            List of boiling point temperatures.
            A reference to a System.Object containing a double array marshalled from a 
            COM Object.
            </param>
            <param name="molWt">
            List of molecular weight.
            A reference to a System.Object containing a double array marshalled from a 
            COM Object.
            </param>
            <param name="casNo">
            List of CAS number.
            A reference to a System.Object containing a String array marshalled from a 
            COM Object.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyPackage.GetUniversalConstant(System.Object,System.Object)">
            <summary>
            Get some universal constant(s)
            </summary>
            <remarks>
            Returns the values of the Universal Constants.
            </remarks>
            <param name="materialObject">
            The Material object.
            </param>
            <param name="props">
            List of requested universal constants.
            A reference to a System.Object containing a String array marshalled as a 
            COM Object.
            </param>
            <returns>
            Values of universal constants.
            A reference to a System.Object containing an System.Object array marshalled 
            from a COM Object.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyPackage.GetComponentConstant(System.Object,System.Object)">
            <summary>
            Get some pure component constant(s)
            </summary>
            <remarks>
            Returns the values of the Constant properties of the components contained in 
            the passed Material Object.
            </remarks>
            <param name="materialObject">
            The Material object.
            </param>
            <param name="props">
            The list of properties.
            A reference to a System.Object containing a String array marshalled as a 
            COM Object.
            </param>
            <returns>
            Component Constant values. See description of return value of the 
            <see cref="M:CapeOpen.ICapeThermoMaterialObject.GetComponentConstant(System.Object,System.Object)"/> method.
            A reference to a System.Object containing an System.Object array marshalled 
            from a COM Object.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyPackage.CalcProp(System.Object,System.Object,System.Object,System.String)">
            <summary>
            Calculate some proeprties.
            </summary>
            <remarks>
            This method is responsible for doing all calculations and is implemented by 
            the associated thermo system. This method is further defined in the 
            descriptions of the CAPE-OPEN Calling Pattern and the User Guide
            Section.
            </remarks>
            <param name="materialObject">
            The MaterialObject for the Calculation.
            </param>
            <param name="props">
            The List of Properties to be calculated.
            A reference to a System.Object containing a String array marshalled as a 
            COM Object.
            </param>
            <param name="phases">
            List of phases for which the properties are to be calculated.
            A reference to a System.Object containing a String array marshalled as a 
            COM Object.
            </param>
            <param name="calcType">
            Type of calculation: Mixture Property or Pure Component Property. For partial 
            property, such as fugacity coefficients of components in a mixture, use 
            “Mixture” CalcType. For pure component fugacity coefficients, use “Pure” 
            CalcType.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyPackage.CalcEquilibrium(System.Object,System.String,System.Object)">
            <summary>
            Calculate some equilibrium values
            </summary>
            <remarks>
            Method responsible for calculating/delegating flash calculation requests. It 
            must set the amounts, compositions, temperature and pressure for all phases 
            present at equilibrium, as well as the temperature and pressure for the overall 
            mixture, if not set as part of the calculation specifications. See CalcProp 
            and CalcEquilibrium for more information.
            </remarks>
            <param name="materialObject">
            The MaterialObject for the Calculation.
            </param>
            <param name="props">
            Properties to be calculated at equilibrium. emptyObject for no properties. 
            If a list, then the property values should be set for each phase present at 
            equilibrium.
            A reference to a System.Object containing a String array marshalled as a 
            COM Object.
            </param>
            <param name="flashType">
            Flash calculation type.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">ECapeSolvingError</exception>
            <exception cref="T:CapeOpen.ECapeOutOfBounds">ECapeOutOfBounds</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyPackage.PropCheck(System.Object,System.Object)">
            <summary>
            Check a property is valid
            </summary>
            <remarks>
            Check to see if properties can be calculated.
            </remarks>
            <returns>
            The array of booleans for each property.
            A System.Object containing an System.Boolean (marshalled as VT_BOOL) array 
            marshalled as a COM Object.
            </returns>
            <param name="materialObject">
            The MaterialObject for the Calculation.
            </param>
            <param name="props">
            List of Properties to check.
            A System.Object containing a String array marshalled as a COM Object.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyPackage.ValidityCheck(System.Object,System.Object)">
            <summary>
            Check the validity of the given properties
            </summary>
            <remarks>
            Checks the validity of the calculation.
            </remarks>
            <returns>
            The properties for which reliability is checked.
            A System.Object containing an System.Boolean (marshalled as VT_BOOL) array 
            marshalled as a COM Object.
            </returns>
            <param name="materialObject">
            The MaterialObject for the Calculation.
            </param>
            <param name="props">
            List of Properties to check.
            A System.Object containing a CapeArrayThermoReliability marshalled as a 
            COM Object.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyPackage.GetPropList">
            <summary>
            Get the list of properties
            </summary>
            <remarks>
            <para>Returns list of Thermo System supported properties. The properties TEMPERATURE, 
            PRESSURE, FRACTION, FLOW, PHASEFRACTION, TOTALFLOW cannot be returned by 
            GetPropList, since all components must support them. Although the property 
            identifier of derivative properties is formed from the identifier of another 
            property, the GetPropList method will return the identifiers of all supported 
            derivative and non-derivative properties. For instance, a Property Package 
            could return the following list:
            </para>
            <para>
            enthalpy, enthalpy.Dtemperature, entropy, entropy.Dpressure.
            </para>
            </remarks>
            <returns>
            String list of all supported Properties.
            A System.Object containing an System.String array marshalled as a COM Object.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ICapeThermoCalculationRoutine">
            <summary>
            ICapeThermoCalculationRoutine is a mechanism for adding foreign calculation 
            routines to a physical property package.
            </summary>
        </member>
        <member name="M:CapeOpen.ICapeThermoCalculationRoutine.CalcProp(System.Object,System.Object,System.Object,System.String)">
            <summary>
            Calculate some properties
            </summary>
            <remarks>
            This method is responsible for doing all calculations on behalf of the 
            calculation routine component. This method is further defined in the 
            descriptions of the CAPE-OPEN Calling Pattern and the User Guide Section.
            </remarks>
            <param name="materialObject">
            The MaterialObject for the Calculation.
            </param>
            <param name="props">
            The List of Properties to be calculated.
            A reference to a System.Object containing a String array marshalled as a 
            COM Object.
            </param>
            <param name="phases">
            List of phases for which the properties are to be calculated.
            A reference to a System.Object containing a String array marshalled as a 
            COM Object.
            </param>
            <param name="calcType">
            Type of calculation: Mixture Property or Pure Component Property. For partial 
            property, such as fugacity coefficients of components in a mixture, use 
            “Mixture” CalcType. For pure component fugacity coefficients, use “Pure” 
            CalcType.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">ECapeSolvingError</exception>
            <exception cref="T:CapeOpen.ECapeOutOfBounds">ECapeOutOfBounds</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoCalculationRoutine.PropCheck(System.Object,System.Object)">
            <summary>
            Check a property is valid
            </summary>
            <remarks>
            Check to see if properties can be calculated.
            </remarks>
            <returns>
            The array of booleans for each property.
            A System.Object containing an System.Boolean (marshalled as VT_BOOL) array 
            marshalled as a COM Object.
            </returns>
            <param name="materialObject">
            The MaterialObject for the Calculation.
            </param>
            <param name="props">
            List of Properties to check.
            A System.Object containing a String array marshalled as a COM Object.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoCalculationRoutine.GetPropList">
            <summary>
            Get the list of properties
            </summary>
            <remarks>
            <para>Returns list of Thermo System supported properties. The properties TEMPERATURE, 
            PRESSURE, FRACTION, FLOW, PHASEFRACTION, TOTALFLOW cannot be returned by 
            GetPropList, since all components must support them. Although the property 
            identifier of derivative properties is formed from the identifier of another 
            property, the GetPropList method will return the identifiers of all supported 
            derivative and non-derivative properties. For instance, a Property Package 
            could return the following list:
            </para>
            <para>
            enthalpy, enthalpy.Dtemperature, entropy, entropy.Dpressure.
            </para>
            </remarks>
            <returns>
            String list of all supported Properties.
            A System.Object containing an System.String array marshalled as a COM Object.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoCalculationRoutine.ValidityCheck(System.Object,System.Object)">
            <summary>
            Check the validity of the given properties
            </summary>
            <remarks>
            Checks the validity of the calculation.
            </remarks>
            <returns>
            The properties for which reliability is checked.
            A System.Object containing an System.Boolean (marshalled as VT_BOOL) array 
            marshalled as a COM Object.
            </returns>
            <param name="materialObject">
            The MaterialObject for the Calculation.
            </param>
            <param name="props">
            List of Properties to check.
            A System.Object containing a CapeArrayThermoReliability marshalled as a 
            COM Object.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="T:CapeOpen.ICapeThermoEquilibriumServer">
            <summary>
            ICapeThermoCalculationRoutine interface is the mechanism for adding foreign
            calculation routines to a physical property package.
            </summary>
        </member>
        <member name="M:CapeOpen.ICapeThermoEquilibriumServer.CalcEquilibrium(System.Object,System.String,System.Object)">
            <summary>
            Calculate some equilibrium values
            </summary>
            <remarks>
            Calculates the equilibrium properties requested. It must set the amounts, compositions, temperature 
            and pressure for all phases present at equilibrium, as well as the temperature and pressure for the 
            overall mixture, if not set as part of the calculation specifications. See CalcProp and 
            CalcEquilibrium for more information.
            </remarks>
            <param name="materialObject">The material object of the calculation.</param>
            <param name="flashType">Flash calculation type.</param>
            <param name="props">Properties to be calculated at equilibrium. emptyVariant for no properties. 
            If a list, then the property values should be set for each phase present at equilibrium.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
            other error(s), specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value was passed, for example UNDEFINED for property.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">Error raised to indicate that a precondition for this operation
            has not been performed.</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">An error occurred while calculating equilibrium conditions.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfBounds">Indicates that one of the values used in this calculation are
            outside their acceptable limits.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoEquilibriumServer.PropCheck(System.Object,System.String,System.Object,System.Object@)">
            <summary>
            Checks that a property is valid.
            </summary>
            <remarks>
            Checks to see if a given type of flash calculations can be performed and whether the properties can 
            be calculated after the flash calculation.
            </remarks>
            <param name="valid">The array of booleans for flash and property. First element is reserved for 
            flashType.</param>
            <param name="materialObject">The material object of the calculation.</param>
            <param name="flashType">Flash calculation type.</param>
            <param name="props">Properties to be calculated at equilibrium. emptyVariant for no properties. 
            If a list, then the property values should be set for each phase present at equilibrium.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
            other error(s), specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value was passed, for example UNDEFINED for property.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoEquilibriumServer.ValidityCheck(System.Object,System.Object,System.Object@)">
            <summary>
            Checks the validity of the given properties.
            </summary>
            <remarks>Checks the reliability of the calculation.</remarks>
            <param name="relList">The properties for which reliability is checked. First element reserved for 
            reliability of flash calculations.</param>
            <param name="materialObject">The material object of the calculation.</param>
            <param name="props">Properties to be calculated at equilibrium. emptyVariant for no properties. 
            If a list, then the property values should be set for each phase present at equilibrium.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
            other error(s), specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value was passed, for example UNDEFINED for property.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoEquilibriumServer.PropList(System.Object@,System.Object@,System.Object@,System.Object@)">
            <summary>
            Gets the list of properties.
            </summary>
            <remarks>
            Returns the flash types, properties, phases, and calculation types that are supported by a given 
            Equilibrium Server Routine.
            </remarks>
            <param name="flashType">Type of flash calculations supported.</param>
            <param name="props">List of supported properties.</param>
            <param name="phases">List of supported phases.</param>
            <param name="calcType">List of supported calculation types. (Pure &amp; Mixture)</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
            other error(s), specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value was passed, for example UNDEFINED for property.</exception>
        </member>
        <member name="T:CapeOpen.ICapeThermoMaterial">
            <summary>
            A Material Object is a container of information that describes a Material stream. 
            Calculations of thermophysical and thermodynamic properties are performed by a 
            Property Package using information stored in a Material Object. Results of such 
            calculations may be stored in the Material Object for further usage. The 
            ICapeThermoMaterial interface provides the methods to gather information and 
            perform checks in preparation for a calculation, to request a calculation and 
            to retrieve results and information stored in the Material Object.
            </summary>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterial.ClearAllProps">
            <summary>
            Remove all stored Physical Property values.
            </summary>
            <remarks>
            <para>
            ClearAllProps removes all stored Physical Properties that have been set 
            using the SetSinglePhaseProp, SetTwoPhaseProp or SetOverallProp methods. 
            This means that any subsequent call to retrieve Physical Properties will 
            result in an exception until new values have been stored using one of the 
            Set methods. ClearAllProps does not remove the configuration information 
            for a Material, i.e. the list of Compounds and Phases.
            </para>
            <para>
            Using the ClearAllProps method results in a Material Object that is in 
            the same state as when it was first created. It is an alternative to using 
            the CreateMaterial method but it is expected to have a smaller overhead in 
            operating system resources.
            </para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists but 
            it is not supported by the current implementation</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
            other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterial.CopyFromMaterial(System.Object@)">
            <summary>
            Copies all the stored non-constant Physical Properties (which have been set 
            using the SetSinglePhaseProp, SetTwoPhaseProp or SetOverallProp) from the 
            source Material Object to the current instance of the Material Object.
            </summary>
            <remarks>
            <para>Before using this method, the Material Object must have been configured 
            with the same exact list of Compounds and Phases as the source one. Otherwise, 
            calling the method will raise an exception. There are two ways to perform the 
            configuration: through the PME proprietary mechanisms and with 
            CreateMaterial. Calling CreateMaterial on a Material Object S and 
            subsequently calling CopyFromMaterial(S) on the newly created Material 
            Object N is equivalent to the deprecated method ICapeMaterialObject.Duplicate.
            </para>
            <para>The method is intended to be used by a client, for example a Unit 
            Operation that needs a Material Object to have the same state as one of the 
            Material Objects it has been connected to. One example is the representation 
            of an internal stream in a distillation column.</para>
            </remarks>
            <param name="source">
            Source Material Object from which stored properties will be copied.
            </param>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even 
            if this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists but it is not supported 
            by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites for copying 
            the non-constant Physical Properties of the Material Object are not valid. 
            The necessary initialisation, such as configuring the current Material with 
            the same Compounds and Phases as the source, has not been performed or has 
            failed.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">The physical resources necessary to 
            copy the non-constant Physical Properties are out of limits.</exception>
            <exception cref="T:CapeOpen.ECapeNoMemory">The physical memory necessary to copy the 
            non-constant Physical Properties is out of limit.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
            other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterial.CreateMaterial">
            <summary>
            Creates a Material Object with the same configuration as the current 
            Material Object.
            </summary>
            <remarks>
            The Material Object created does not contain any non-constant Physical 
            Property value but has the same configuration (Compounds and Phases) as 
            the current Material Object. These Physical Property values must be set 
            using SetSinglePhaseProp, SetTwoPhaseProp or SetOverallProp. Any attempt to 
            retrieve Physical Property values before they have been set will result in 
            an exception.
            </remarks>
            <returns>
            The interface for the Material Object.
            </returns>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists but it is not supported 
            by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The physical resources 
            necessary to the creation of the Material Object are out of limits.
            </exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">The operation is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists but 
            it is not supported by the current implementation</exception>
            <exception cref="T:CapeOpen.ECapeNoMemory">The physical memory necessary to the 
            creation of the Material Object is out of limit.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
            other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterial.GetOverallProp(System.String,System.String,System.Object@)">
            <summary>
            Retrieves non-constant Physical Property values for the overall mixture.
            </summary>
            <remarks>
            <para>
            The Physical Property values returned by GetOverallProp refer to the overall 
            mixture. These values are set by calling the SetOverallProp method. Overall 
            mixture Physical Properties are not calculated by components that implement 
            the ICapeThermoMaterial interface. The property values are only used as 
            input specifications for the CalcEquilibrium method of a component that 
            implements the ICapeThermoEquilibriumRoutine interface.
            </para>
            <para>It is expected that this method will normally be able to provide 
            Physical Property values on any basis, i.e. it should be able to convert 
            values from the basis on which they are stored to the basis requested. This 
            operation will not always be possible. For example, if the molecular weight 
            is not known for one or more Compounds, it is not possible to convert 
            between a mass basis and a molar basis.
            </para>
            <para>Although the result of some calls to GetOverallProp will be a single 
            value, the return type is CapeArrayDouble and the method must always return 
            an array even if it contains only a single element.</para>
            </remarks>
            <param name="results"> A double array containing the results vector of 
            Physical Property value(s) in SI units.</param>
            <param name="property">A String identifier of the Physical Property for 
            which values are requested. This must be one of the single-phase Physical 
            Properties or derivatives that can be stored for the overall mixture. The 
            standard identifiers are listed in sections 7.5.5 and 7.6.
            </param>
            <param name="basis">A String indicating the basis of the results. Valid 
            settings are: “Mass” for Physical Properties per unit mass or “Mole” for 
            molar properties. Use UNDEFINED as a place holder for a Physical Property 
            for which basis does not apply. See section 7.5.5 for details.
            </param>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetOverallProp is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists but 
            it is not supported by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">The Physical Property 
            required is not available from the Material Object, possibly for the basis 
            requested. This exception is raised when a Physical Property value has not 
            been set following a call to the CreateMaterial or ClearAllProps methods.
            </exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value was passed, for example UNDEFINED for property.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites are not 
            valid. The necessary initialisation has not been performed or has failed.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
            other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterial.GetOverallTPFraction(System.Double@,System.Double@,System.Object@)">
             <summary>
             Retrieves temperature, pressure and composition for the overall mixture.
             </summary>
             <remarks>
             <para>
            This method is provided to make it easier for developers to make efficient 
             use of the CAPEOPEN interfaces. It returns the most frequently requested 
             information from a Material Object in a single call.
             </para>
             <para>
             There is no choice of basis in this method. The composition is always 
             returned as mole fractions.
             </para>
             </remarks>
             <param name="temperature">A reference to a double Temperature (in K)</param>
             <param name="pressure">A reference to a double Pressure (in Pa)</param>
             <param name="composition">A reference to an array of doubles containing 
             the  Composition (mole fractions)</param>
             <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetOverallProp is “not” 
             implemented even if this method can be called for reasons of compatibility 
             with the CAPE-OPEN standards. That is to say that the operation exists but 
             it is not supported by the current implementation.</exception>
             <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">The Physical Property 
             required is not available from the Material Object, possibly for the basis 
             requested. This exception is raised when a Physical Property value has not 
             been set following a call to the CreateMaterial or ClearAllProps methods.
             </exception>
             <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites are not 
             valid. The necessary initialisation has not been performed or has failed.</exception>
             <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
             other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterial.GetPresentPhases(System.Object@,System.Object@)">
            <summary>
            Returns Phase labels for the Phases that are currently present in the 
            Material Object.
            </summary>
            <remarks>
            <para>
            This method is intended to work in conjunction with the SetPresentPhases 
            method. Together these methods provide a means of communication between a 
            PME (or another client) and an Equilibrium Calculator (or other component 
            that implements the ICapeThermoEquilibriumRoutine interface). The following 
            sequence of operations is envisaged.
            </para>
            <para>1. Prior to requesting an Equilibrium Calculation, a PME will use the 
            SetPresentPhases method to define a list of Phases that may be considered in 
            the Equilibrium Calculation. Typically, this is necessary because an 
            Equilibrium Calculator may be capable of handling a large number of Phases 
            but for a particular application, it may be known that only certain Phases 
            will be involved. For example, if the complete Phase list contains Phases 
            with the following labels (with the obvious interpretation): vapour, 
            hydrocarbonLiquid and aqueousLiquid and it is required to model a liquid 
            decanter, the present Phases might be set to hydrocarbonLiquid and 
            aqueousLiquid.</para>
            <para>2. The GetPresentPhases method is then used by the CalcEquilibrium 
            method of the ICapeThermoEquilibriumRoutine interface to obtain the list 
            of Phase labels corresponding to the Phases that may be present at 
            equilibrium.</para>
            <para>3. The Equilibrium Calculation determines which Phases actually 
            co-exist at equilibrium. This list of Phases may be a sub-set of the Phases 
            considered because some Phases may not be present at the prevailing 
            conditions. For example, if the amount of water is sufficiently small the 
            aqueousLiquid Phase in the above example may not exist because all the water 
            dissolves in the hydrocarbonLiquid Phase.</para>
            <para>4. The CalcEquilibrium method uses the SetPresentPhases method to indicate 
            the Phases present following the equilibrium calculation (and sets the phase 
            properties).</para>
            <para>5. The PME uses the GetPresentPhases method to find out the Phases present 
            following the calculation and it can then use the GetSinglePhaseProp or 
            GetTPFraction methods to get the Phase properties.</para>
            <para>To indicate that a Phase is ‘present’ in a Material Object (or other 
            component that implements the ICapeThermoMaterial interface) it must be 
            specified by the SetPresentPhases method of the ICapeThermoMaterial 
            interface. Even if a Phase is present, it does not imply that any Physical 
            Properties are actually set unless the phaseStatus is Cape_AtEquilibrium 
            or Cape_Estimates (see below). </para>
            <para>If no Phases are present, UNDEFINED should be returned for both the 
            phaseLabels and phaseStatus arguments.</para>
            <para>The phaseStatus argument contains as many entries as there are Phase 
            labels. The valid settings are listed in the following table:</para>
            <para>Cape_UnknownPhaseStatus - This is the normal setting when a Phase is
            specified as being available for an Equilibrium Calculation.</para>
            <para>Cape_AtEquilibrium - The Phase has been set as present as a result of 
            an Equilibrium Calculation.</para>
            <para> Cape_Estimates - Estimates of the equilibrium state have been set in 
            the Material Object.</para>
            <para>All the Phases with a status of Cape_AtEquilibrium have values of 
            temperature, pressure, composition and Phase fraction set that correspond 
            to an equilibrium state, i.e. equal temperature, pressure and fugacities of 
            each Compound. Phases with a Cape_Estimates status have values of temperature,
            pressure, composition and Phase fraction set in the Material Object. These 
            values are available for use by an Equilibrium Calculator component to 
            initialise an Equilibrium Calculation. The stored values are available but 
            there is no guarantee that they will be used.
            </para>
            <para>
            Using the ClearAllProps method results in a Material Object that is in 
            the same state as when it was first created. It is an alternative to using 
            the CreateMaterial method but it is expected to have a smaller overhead in 
            operating system resources.
            </para>
            </remarks>
            <param name="phaseLabels">A reference to a String array that contains the 
            list of Phase labels (identifiers – names) for the Phases present in the 
            Material Object. The Phase labels in the Material Object must be a
            subset of the labels returned by the GetPhaseList method of the 
            ICapeThermoPhases interface.</param>
            <param name="phaseStatus">A CapeArrayEnumeration which is an array of 
            Phase status flags corresponding to each of the Phase labels. 
            See description below.</param>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists but 
            it is not supported by the current implementation</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
            other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterial.GetSinglePhaseProp(System.String,System.String,System.String,System.Object@)">
             <summary>
             Retrieves single-phase non-constant Physical Property values for a mixture.
             </summary>
             <remarks>
             <para>The results argument returned by GetSinglePhaseProp is either a 
             CapeArrayDouble that contains one or more numerical values, e.g. temperature, 
             or a CapeInterface that may be used to retrieve single-phase Physical 
             Properties described by a more complex data structure, e.g. distributed 
             properties.</para>
             <para>Although the result of some calls to GetSinglePhaseProp may be a 
             single numerical value, the return type for numerical values is 
             CapeArrayDouble and in such a case the method must return an array even if 
             it contains only a single element.</para>
             <para>A Phase is ‘present’ in a Material if its identifier is returned by 
             the GetPresentPhases method. An exception is raised by the GetSinglePhaseProp 
             method if the Phase specified is not present. Even if a Phase is present, 
             this does not mean that any Physical Properties are available.</para>
             <para>The Physical Property values returned by GetSinglePhaseProp refer to 
             a single Phase. These values may be set by the SetSinglePhaseProp method, 
             which may be called directly, or by other methods such as the CalcSinglePhaseProp 
             method of the ICapeThermoPropertyRoutine interface or the CalcEquilibrium 
             method of the ICapeThermoEquilibriumRoutine interface. Note: Physical 
             Properties that depend on more than one Phase, for example surface tension 
             or K-values, are returned by the GetTwoPhaseProp method.</para>
             <para>It is expected that this method will normally be able to provide 
             Physical Property values on any basis, i.e. it should be able to convert 
             values from the basis on which they are stored to the basis requested. This 
             operation will not always be possible. For example, if the molecular weight 
             is not known for one or more Compounds, it is not possible to convert from 
             mass fractions or mass flows to mole fractions or molar flows.</para>
             </remarks>
             <param name="property">CapeString The identifier of the Physical Property 
             for which values are requested. This must be one of the single-phase Physical 
             Properties or derivatives. The standard identifiers are listed in sections 
             7.5.5 and 7.6.</param>
             <param name="phaseLabel">CapeString Phase label of the Phase for which 
             the Physical Property is required. The Phase label must be one of the 
            identifiers returned by the GetPresentPhases method of this interface.</param>
             <param name="basis">CapeString Basis of the results. Valid settings are: 
             “Mass” for Physical Properties per unit mass or “Mole” for molar properties. 
             Use UNDEFINED as a place holder for a Physical Property for which basis does 
             not apply. See section 7.5.5 for details.</param>
             <param name="results">CapeVariant Results vector (CapeArrayDouble) 
             containing Physical Property value(s) in SI units or CapeInterface (see 
             notes).	</param>
             <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” 
             implemented even if this method can be called for reasons of compatibility 
             with the CAPE-OPEN standards. That is to say that the operation exists but 
             it is not supported by the current implementation</exception>
             <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">The property required is 
             not available from the Material Object possibly for the Phase label or 
             basis requested. This exception is raised when a property value has not been 
             set following a call to the CreateMaterial or the value has been erased by 
             a call to the ClearAllProps methods.</exception>
             <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
             value was passed: for example UNDEFINED for property, or an unrecognised 
             identifier for phaseLabel.</exception>
             <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites are not 
             valid. The necessary initialisation has not been performed, or has failed. 
             This exception is returned if the Phase specified does not exist.</exception>
             <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
             other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterial.GetTPFraction(System.String,System.Double@,System.Double@,System.Object@)">
            <summary>
            Retrieves temperature, pressure and composition for a Phase.
            </summary>
            <remarks>
            <para>
            This method is provided to make it easier for developers to make efficient 
            use of the CAPEOPEN interfaces. It returns the most frequently requested 
            information from a Material Object in a single call.
            </para>
            <para>There is no choice of basis in this method. The composition is always 
            returned as mole fractions.
            </para>
            <para>To get the equivalent information for the overall mixture the 
            GetOverallTPFraction method of the ICapeThermoMaterial interface should be 
            used.
            </para>
            </remarks>
            <returns>
            No return.
            </returns>
            <param name="phaseLabel">Phase label of the Phase for which the property 
            is required. The Phase label must be one of the identifiers returned by the 
            GetPresentPhases method of this interface.</param>
            <param name="temperature">Temperature (in K)</param>
            <param name="pressure">Pressure (in Pa)</param>
            <param name="composition">Composition (mole fractions)</param>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetTPFraction is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists but 
            it is not supported by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">One of the properties is 
            not available from the Material Object. This exception is raised when a 
            property value has not been set following a call to the CreateMaterial or 
            the value has been erased by a call to the ClearAllProps methods.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value was passed: for example UNDEFINED for property, or an unrecognised 
            identifier for phaseLabel.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites are not 
            valid. The necessary initialisation has not been performed, or has failed. 
            This exception is returned if the Phase specified does not exist.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
            other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterial.GetTwoPhaseProp(System.String,System.Object,System.String,System.Object@)">
             <summary>
             Retrieves two-phase non-constant Physical Property values for a mixture.
             </summary>
             <remarks>
             <para>
            The results argument returned by GetTwoPhaseProp is either a CapeArrayDouble 
             that contains one or more numerical values, e.g. kvalues, or a CapeInterface 
             that may be used to retrieve 2-phase Physical Properties described by a more 
             complex data structure, e.g.distributed Physical Properties.
            </para>
             <para>Although the result of some calls to GetTwoPhaseProp may be a single 
             numerical value, the return type for numerical values is CapeArrayDouble and 
             in such a case the method must return an array even if it contains only a 
             single element.
            </para>
             <para>A Phase is ‘present’ in a Material if its identifier is returned by 
             the GetPresentPhases method. An exception is raised by the GetTwoPhaseProp 
             method if any of the Phases specified is not present. Even if all Phases are 
             present, this does not mean that any Physical Properties are available.
            </para>
             <para>The Physical Property values returned by GetTwoPhaseProp depend on two 
             Phases, for example surface tension or K-values. These values may be set by 
             the SetTwoPhaseProp method that may be called directly, or by other methods 
             such as the CalcTwoPhaseProp method of the ICapeThermoPropertyRoutine 
             interface, or the CalcEquilibrium method of the ICapeThermoEquilibriumRoutine 
             interface. Note: Physical Properties that depend on a single Phase are 
             returned by the GetSinglePhaseProp method.
            </para>
             <para>It is expected that this method will normally be able to provide 
             Physical Property values on any basis, i.e. it should be able to convert 
             values from the basis on which they are stored to the basis requested. This 
             operation will not always be possible. For example, if the molecular weight 
             is not known for one or more Compounds, it is not possible to convert between 
             a mass basis and a molar basis.
            </para>
             <para>If a composition derivative is requested this means that the 
             derivatives are returned for both Phases in the order in which the Phase 
             labels are specified. The number of values returned for a composition 
             derivative will depend on the dimensionality of the property. For example,
             if there are N Compounds then the results vector for the surface tension 
             derivative will contain N composition derivative values for the first Phase, 
             followed by N composition derivative values for the second Phase. For K-value 
             derivative there will be N2 derivative values for the first phase followed by 
             N2 values for the second phase in the order defined in 7.6.2. 
            </para>
             </remarks>
             <param name="property">The identifier of the property for which values are
             requested. This must be one of the two-phase Physical Properties or Physical 
             Property derivatives listed in sections 7.5.6 and 7.6.</param>
             <param name="phaseLabels">List of Phase labels of the Phases for which the
             property is required. The Phase labels must be two of the identifiers 
             returned by the GetPhaseList method of the Material Object.</param>
             <param name="basis">Basis of the results. Valid settings are: “Mass” for
             Physical Properties per unit mass or “Mole” for molar properties. Use 
             UNDEFINED as a place holder for a Physical Property for which basis does not 
             apply. See section 7.5.5 for details.</param>
             <param name="results">Results vector (CapeArrayDouble) containing property
             value(s) in SI units or CapeInterface (see notes).</param>
             <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
             this method can be called for reasons of compatibility with the CAPE-OPEN 
             standards. That is to say that the operation exists, but it is not supported 
             by the current implementation. This could be the case if two-phase non-constant 
             Physical Properties are not required by the PME and so there is no particular 
             need to implement this method.</exception>
             <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">The property required is 
             not available from the Material Object possibly for the Phases or basis 
             requested.</exception>
             <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites are not 
             valid. This exception is raised when a call to the SetTwoPhaseProp method 
             has not been performed, or has failed, or when one or more of the Phases 
             referenced does not exist.</exception>
             <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
             value was passed: for example, UNDEFINED for property, or an unrecognised 
             identifier in phaseLabels.</exception>
             <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
             other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterial.SetOverallProp(System.String,System.String,System.Object)">
            <summary>
            Sets non-constant property values for the overall mixture.
            </summary>
            <remarks>
            <para>The property values set by SetOverallProp refer to the overall mixture. 
            These values are retrieved by calling the GetOverallProp method. Overall 
            mixture properties are not calculated by components that implement the 
            ICapeThermoMaterial interface. The property values are only used as input 
            specifications for the CalcEquilibrium method of a component that implements 
            the ICapeThermoEquilibriumRoutine interface.</para>
            <para>Although some properties set by calls to SetOverallProp will have a 
            single value, the type of argument values is CapeArrayDouble and the method 
            must always be called with values as an array even if it contains only a 
            single element.</para>
            </remarks>
            <param name="property"> CapeString The identifier of the property for which 
            values are set. This must be one of the single-phase properties or derivatives 
            that can be stored for the overall mixture. The standard identifiers are 
            listed in sections 7.5.5 and 7.6.</param>
            <param name="basis">Basis of the results. Valid settings are: “Mass” for
            Physical Properties per unit mass or “Mole” for molar properties. Use 
            UNDEFINED as a place holder for a Physical Property for which basis does not 
            apply. See section 7.5.5 for details.</param>
            <param name="values">Values to set for the property.</param>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported 
            by the current implementation. This method may not be required if the PME 
            does not deal with any single-phase property.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value was passed, that is a value that does not belong to the valid list 
            described above, for example UNDEFINED for property.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfBounds">One or more of the entries in the 
            values argument is outside of the range of values accepted by the Material 
            Object.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the SetSinglePhaseProp operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterial.SetPresentPhases(System.Object,System.Object)">
             <summary>
             Allows the PME or the Property Package to specify the list of Phases that 
             are currently present.
             </summary>
             <remarks>
             <para>SetPresentPhases may be used:</para>
             <para>• to restrict an Equilibrium Calculation (using the CalcEquilibrium 
             method of a component that implements the ICapeThermoEquilibriumRoutine 
             interface) to a subset of the Phases supported by the Property Package 
             component;</para>
             <para>• when the component that implements the ICapeThermoEquilibriumRoutine 
             interface needs to specify which Phases are present in a Material Object 
             after an Equilibrium Calculation has been performed.</para>
             <para>If a Phase in the list is already present, its Physical Properties are 
             unchanged by the action of this method. Any Phases not in the list when 
             SetPresentPhases is called are removed from the Material Object. This means 
             that any Physical Property values that may have been stored on the removed 
             Phases are no longer available (i.e. a call to GetSinglePhaseProp or 
             GetTwoPhaseProp including this Phase will return an exception). A call to 
             the GetPresentPhases method of the Material Object will return the same list 
             as specified by SetPresentPhases.</para>
             <para>The phaseStatus argument must contain as many entries as there are 
             Phase labels. The valid settings are listed in the following table:</para>
             <para>Cape_UnknownPhaseStatus - This is the normal setting when a Phase is 
             specified as being available for an Equilibrium Calculation.</para>
             <para>Cape_AtEquilibrium - The Phase has been set as present as a result of 
             an Equilibrium Calculation.</para>
             <para>Cape_Estimates - Estimates of the equilibrium state have been set in 
             the Material Object.</para>
             <para>All the Phases with a status of Cape_AtEquilibrium must have 
             properties that correspond to an equilibrium state, i.e. equal temperature, 
             pressure and fugacities of each Compound (this does not imply that the 
             fugacities are set as a result of the Equilibrium Calculation). The
             Cape_AtEquilibrium status should be set by the CalcEquilibrium method of a 
             component that implements the ICapeThermoEquilibriumRoutine interface 
             following a successful Equilibrium Calculation. If the temperature, pressure 
             or composition of an equilibrium Phase is changed, the Material Object 
             implementation is responsible for resetting the status of the Phase to 
             Cape_UnknownPhaseStatus. Other property values stored for that Phase should 
             not be affected.</para>
             <para>Phases with an Estimates status must have values of temperature, 
            pressure, composition and phase fraction set in the Material Object. These 
             values are available for use by an Equilibrium Calculator component to 
             initialise an Equilibrium Calculation. The stored values are available but 
             there is no guarantee that they will be used.</para>
             </remarks>
             <param name="phaseLabels"> CapeArrayString The list of Phase labels for 
             the Phases present. The Phase labels in the Material Object must be a
             subset of the labels returned by the GetPhaseList method of the 
             ICapeThermoPhases interface.</param>
             <param name="phaseStatus">Array of Phase status flags corresponding to 
             each of the Phase labels. See description below.</param>
             <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
             this method can be called for reasons of compatibility with the CAPE-OPEN 
             standards. That is to say that the operation exists, but it is not supported 
             by the current implementation.</exception>
             <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
             value was passed, that is a value that does not belong to the valid list 
             described above, for example if phaseLabels contains UNDEFINED or 
             phaseStatus contains a value that is not in the above table.</exception>
             <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
             other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterial.SetSinglePhaseProp(System.String,System.String,System.String,System.Object)">
            <summary>
            Sets single-phase non-constant property values for a mixture.
            </summary>
            <remarks>
            <para>The values argument of SetSinglePhaseProp is either a CapeArrayDouble 
            that contains one or more numerical values to be set for a property, e.g. 
            temperature, or a CapeInterface that may be used to set single-phase 
            properties described by a more complex data structure, e.g. distributed 
            properties.</para>
            <para>Although some properties set by calls to SetSinglePhaseProp will have a 
            single numerical value, the type of the values argument for numerical values 
            is CapeArrayDouble and in such a case the method must be called with values 
            containing an array even if it contains only a single element.</para>
            <para>The property values set by SetSinglePhaseProp refer to a single Phase. 
            Properties that depend on more than one Phase, for example surface tension or 
            K-values, are set by the SetTwoPhaseProp method of the Material Object.</para>
            <para>Before SetSinglePhaseProp can be used, the phase referenced must have 
            been created using the SetPresentPhases method.</para>
            </remarks>
            <param name="prop">The identifier of the property for which values are 
            set. This must be one of the single-phase properties or derivatives. The 
            standard identifiers are listed in sections 7.5.5 and 7.6.</param>
            <param name="phaseLabel">Phase label of the Phase for which the property is 
            set. The phase label must be one of the strings returned by the 
            GetPresentPhases method of this interface.</param>
            <param name="basis">Basis of the results. Valid settings are: “Mass” for
            Physical Properties per unit mass or “Mole” for molar properties. Use 
            UNDEFINED as a place holder for a Physical Property for which basis does not 
            apply. See section 7.5.5 for details.</param>
            <param name="values">Values to set for the property (CapeArrayDouble) or
            CapeInterface (see notes). </param>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists but it is not supported by
            the current implementation. This method may not be required if the PME does 
            not deal with any single-phase properties.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value was passed, that is a value that does not belong to the valid list 
            described above, for example UNDEFINED for property.</exception> 
            <exception cref="T:CapeOpen.ECapeOutOfBounds">One or more of the entries in the 
            values argument is outside of the range of values accepted by the Material 
            Object.</exception> 
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites are not 
            valid. The phase referenced has not been created using SetPresentPhases.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the SetSinglePhaseProp operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterial.SetTwoPhaseProp(System.String,System.Object,System.String,System.Object)">
            <summary>
            Sets two-phase non-constant property values for a mixture.
            </summary>
            <remarks>
            <para>The values argument of SetTwoPhaseProp is either a CapeArrayDouble that 
            contains one or more numerical values to be set for a property, e.g. kvalues, 
            or a CapeInterface that may be used to set two-phase properties described by 
            a more complex data structure, e.g. distributed properties.</para>
            <para>Although some properties set by calls to SetTwoPhaseProp will have a 
            single numerical value, the type of the values argument for numerical values 
            is CapeArrayDouble and in such a case the method must be called with the 
            values argument containing an array even if it contains only a single element.</para>
            <para>The Physical Property values set by SetTwoPhaseProp depend on two 
            Phases, for example surface tension or K-values. Properties that depend on a 
            single Phase are set by the SetSinglePhaseProp method.</para>
            <para>If a Physical Property with composition derivative is specified, the 
            derivative values will be set for both Phases in the order in which the Phase 
            labels are specified. The number of values returned for a composition 
            derivative will depend on the property. For example, if there are N Compounds 
            then the values vector for the surface tension derivative will contain N 
            composition derivative values for the first Phase, followed by N composition 
            derivative values for the second Phase. For K-values there will be N2 
            derivative values for the first phase followed by N2 values for the second 
            phase in the order defined in 7.6.2.</para>
            <para>Before SetTwoPhaseProp can be used, all the Phases referenced must have 
            been created using the SetPresentPhases method</para>
            </remarks>
            <param name="property">The property for which values are set in the 
            Material Object. This must be one of the two-phase properties or derivatives 
            included in sections 7.5.6 and 7.6.</param>
            <param name="phaseLabels">Phase labels of the Phases for 
            which the property is set. The Phase labels must be two of the identifiers 
            returned by the GetPhaseList method of the ICapeThermoPhases interface.</param>
            <param name="basis">Basis of the results. Valid settings are: “Mass” for
            Physical Properties per unit mass or “Mole” for molar properties. Use 
            UNDEFINED as a place holder for a Physical Property for which basis does not 
            apply. See section 7.5.5 for details.</param>
            <param name="values">Value(s) to set for the property (CapeArrayDouble) or
            CapeInterface (see notes).</param>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists but it is not supported by
            the current implementation. This method may not be required if the PME does 
            not deal with any single-phase properties.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value was passed, that is a value that does not belong to the valid list 
            described above, for example UNDEFINED for property.</exception> 
            <exception cref="T:CapeOpen.ECapeOutOfBounds">One or more of the entries in the 
            values argument is outside of the range of values accepted by the Material 
            Object.</exception> 
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites are not 
            valid. The phase referenced has not been created using SetPresentPhases.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the SetSinglePhaseProp operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ICapeThermoMaterialContext">
            <summary>
            This interface should be implemented by all Thermodynamic and Physical 
            Properties components that need an ICapeThermoMaterial interface in order to set 
            and get a Material’s property values.
            </summary>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialContext.SetMaterial(System.Object)">
            <summary>Allows the client of a component that implements this interface to 
            pass an ICapeThermoMaterial interface to the component, so that it can 
            access the properties of a Material.</summary>
            <remarks><para>	The SetMaterial method allows a Thermodynamic and 
            Physical Properties component, such as a Property Package, to be given the 
            ICapeThermoMaterial interface of a Material Object. This interface gives the 
            component access to the description of the Material for which Property 
            Calculations or Equilibrium Calculations are required. The component can 
            access property values directly using this interface. A client can also use 
            the ICapeThermoMaterial interface to query a Material Object for its 
            ICapeThermoCompounds and ICapeThermoPhases interfaces, which provide access 
            to Compound and Phase information, respectively.</para>
            <para>It is envisaged that the SetMaterial method will be used to check that 
            the Material Interface supplied is valid and useable. For example, a 
            Property Package may check that there are some Compounds in a Material 
            Object and that those Compounds can be identified by the Property Package. 
            In addition a Property Package may perform any initialisation that depends 
            on the configuration of a Material Object. A Property Calculator component 
            might typically use this method to query the Material Object for any required 
            information concerning the Compounds.</para>
            <para>Calling the UnsetMaterial method of the ICapeThermoMaterialContext 
            interface has the effect of removing the interface set by the SetMaterial 
            method.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported 
            by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">The input argument is not a valid 
            CapeInterface.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation"><para>The pre-requisites for the 
            property calculation are not valid. For example:</para>
            <para>• There are no Compounds in the object that implements the 
            ICapeThermoMaterial interface.</para>
            <para>• The Compounds cannot be identified by the client (e.g. a Property 
            Package). This case is a possibility if the way a Material Object has been 
            configured by a PME is not consistent with the Property Package being used.</para>
            </exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoMaterialContext.UnsetMaterial">
            <summary>Removes any previously set Material interface.</summary>
            <remarks><para>The UnsetMaterial method removes any Material interface previously 
            set by a call to the SetMaterial method of the ICapeThermoMaterialContext 
            interface. This means that any methods of other interfaces that depend on having 
            a valid Material Interface, for example methods of the ICapeThermoPropertyRoutine 
            or ICapeThermoEquilibriumRoutine interfaces, should behave in the same way as if 
            the SetMaterial method had never been called.</para>
            <para>If UnsetMaterial is called before a call to SetMaterial it has no effect 
            and no exception should be raised.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if this 
            method can be called for reasons of compatibility with the CAPE-OPEN standards. 
            That is to say that the operation exists, but it is not supported by the current 
            implementation.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ICapeThermoCompounds">
            <summary>When implemented by a Property Package, this 
            interface is used to access the list of Compounds that the Property Package can 
            deal with, as well as the Compounds Physical Properties. When implemented by a 
            Material Object, the interface is used for the same purpose but is applied to 
            the Compounds present in the Material.</summary>
            <remarks><para>Any component or object that maintains a list of Compounds must 
            implement the ICapeThermoCompounds interface. Within the scope of this 
            specification this means that it must be implemented by Property Package 
            components and Material Objects. When implemented by a Property Package, this 
            interface is used to access the list of Compounds that the Property Package can 
            deal with, as well as the Compounds Physical Properties. When implemented by a 
            Material Object, the interface is used for the same purpose but is applied to 
            the Compounds present in the Material.</para>
            <para>It is recommended for the SetMaterial method of the ICapeThermoMaterialContext 
            interface to be called prior to calling any of the methods described below. A 
            Property Package may contain Physical Property values for all the Compounds that 
            it supports or it may rely on the PME to provide these data through the Material 
            Object.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeThermoCompounds.GetCompoundConstant(System.Object,System.Object)">
            <summary>Returns the values of constant Physical Properties for the specified Compounds.</summary>
            <remarks><para>The GetConstPropList method can be used in order to check 
            which constant Physical Properties are available.</para>
            <para>If the number of requested Physical Properties is P and the number of 
            Compounds is C, the propvals array will contain C*P variants. The first C 
            variants will be the values for the first requested Physical Property (one 
            variant for each Compound) followed by C values of constants for the second 
            Physical Property, and so on. The actual type of values returned (Double, 
            String, etc.) depends on the Physical Property as specified in section 7.5.2.</para>
            <para>Physical Properties are returned in a fixed set of units as specified 
            in section 7.5.2.</para>
            <para>If the compIds argument is set to UNDEFINED this is a request to return 
            property values for all compounds in the component that implements the 
            ICapeThermoCompounds interface with the compound order the same as that 
            returned by the GetCompoundList method. For example, if the interface is 
            implemented by a Property Package component the property request with compIds 
            set to UNDEFINED means all compounds in the Property Package rather than all 
            compounds in the Material Object passed to the Property package.</para>
            <para>If any Physical Property is not available for one or more Compounds, 
            then undefined values must be returned for those combinations and an 
            ECapeThrmPropertyNotAvailable exception must be raised. If the exception is 
            raised, the client should check all the values returned to determine which 
            is undefined.</para>
            </remarks>
            <param name="props">The list of Physical Property identifiers. Valid
            identifiers for constant Physical Properties are listed in
            section 7.5.2.</param>
            <param name="compIds">List of Compound identifiers for which constants are 
            to be retrieved. Set compIds = UNDEFINED to denote all Compounds in the 
            component that implements the ICapeThermoCompounds interface.</param>
            <returns>Values of constants for the specified Compounds.</returns>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetCompoundConstant is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists, but 
            it is not supported by the current implementation. This exception should be 
            raised if no compounds or no properties are supported.</exception>
            <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">At least one item in the 
            list of Physical Properties is not available for a particular Compound. This 
            exception is meant to be treated as a warning rather than as an error.</exception>
            <exception cref="T:CapeOpen.ECapeLimitedImpl">One or more Physical Properties are not 
            supported by the component that implements this interface. This exception 
            should also be raised if any element of the props argument is not recognised 
            since the list of Physical Properties in section 7.5.2 is not intended to be 
            exhaustive and an unrecognised Physical Property identifier may be valid. If
            no Physical Properties at all are supported ECapeNoImpl should be raised 
            (see above).</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value is passed, for example, an unrecognised Compound identifier or 
            UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The error to be raised if the 
            Property Package required the SetMaterial method to be called before calling 
            the GetCompoundConstant method. The error would not be raised when the 
            GetCompoundConstant method is implemented by a Material Object.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoCompounds.GetCompoundList(System.Object@,System.Object@,System.Object@,System.Object@,System.Object@,System.Object@)">
             <summary>Returns the list of all Compounds. This includes the Compound 
             identifiers recognised and extra information that can be used to further 
             identify the Compounds.</summary>
             <remarks><para>If any item cannot be returned then the value should be set 
             to UNDEFINED. The same information can also be extracted using the 
             GetCompoundConstant method. The equivalences between GetCompoundList 
             arguments and Compound constant Physical Properties, as specified in section 
             7.5.2, is as follows:</para>
             <para>compIds - No equivalence. compIds is an artefact, which is assigned by 
             the component that implements the GetCompoundList method. This string will 
             normally contain a unique Compound identifier such as "benzene". It must be 
             used in all the arguments which are named “compIds” in the methods of the
            ICapeThermoCompounds and ICapeThermoMaterial interfaces.</para>
             <para>Formulae - chemicalFormula</para>
             <para>names - iupacName</para>
             <para>boilTemps - normalBoilingPoint</para>
             <para>molwts - molecularWeight</para>
             <para>casnos casRegistryNumber</para>
             <para>When the ICapeThermoCompounds interface is implemented by a Material 
             Object, the list of Compounds returned is fixed when the Material Object is 
             configured.</para>
             <para>For a Property Package component, the Property Package will normally 
             contain a limited set of Compounds selected for a particular application, 
             rather than all possible Compounds that could be available to a proprietary 
             Properties System.</para>
             <para>In order to identify the Compounds of a Property Package, the PME, or 
             other client, will use the casnos argument rather than the compIds. This is 
             because different PMEs may give different names to the same Compounds and the
             casnos is (almost always) unique. If the casnos is not available (e.g. for 
             petroleum fractions), or not unique, the other pieces of information returned 
             by GetCompoundList can be used to distinguish the Compounds. It should be 
             noted, however, that for communication with a Property Package a client must 
             use the Compound identifiers returned in the compIds argument.</para>
             </remarks>
             <param name="compIds">List of Compound identifiers</param>
             <param name="formulae">List of Compound formulae</param>
             <param name="names">List of Compound names.</param>
             <param name="boilTemps">List of boiling point temperatures.</param>
             <param name="molwts">List of molecular weights.</param>
             <param name="casnos">List of Chemical Abstract Service (CAS) Registry
             numbers.</param>
             <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetCompoundList is “not” 
             implemented even if this method can be called for reasons of compatibility
             with the CAPE-OPEN standards. That is to say that the operation exists, but 
             it is not supported by the current implementation.</exception>
             <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
             specified for the GetCompoundList operation, are not suitable.</exception>
             <exception cref="T:CapeOpen.ECapeBadInvOrder">The error to be raised if the Property 
             Package required the SetMaterial method to be called before calling the 
             GetCompoundList method. The error would not be raised when the 
             GetCompoundList method is implemented by a Material Object.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoCompounds.GetConstPropList">
            <summary>
            Returns the list of supported constant Physical Properties.
            </summary>
            <returns>List of identifiers for all supported constant Physical Properties. 
            The standard constant property identifiers are listed in section 7.5.2.
            </returns>
            <remarks>
            <para>MGetConstPropList returns identifiers for all the constant Physical 
            Properties that can be retrieved by the GetCompoundConstant method. If no 
            properties are supported, UNDEFINED should be returned. The CAPE-OPEN 
            standards do not define a minimum list of Physical Properties to be made 
            available by a software component that implements the ICapeThermoCompounds 
            interface.</para>
            <para>A component that implements the ICapeThermoCompounds interface may 
            return constant Physical Property identifiers which do not belong to the 
            list defined in section 7.5.2.</para>
            <para>However, these proprietary identifiers may not be understood by most 
            of the clients of this component.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetConstPropList is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists, but 
            it is not supported by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the Get-ConstPropList operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The error to be raised if the 
            Property Package required the SetMaterial method to be called before calling 
            the GetConstPropList method. The error would not be raised when the 
            GetConstPropList method is implemented by a Material Object.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoCompounds.GetNumCompounds">
            <summary>Returns the number of Compounds supported.</summary>
            <returns>Number of Compounds supported.</returns>
            <remarks>The number of Compounds returned by this method must be equal to 
            the number of Compound identifiers that are returned by the GetCompoundList 
            method of this interface. It must be zero or a positive number.</remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported 
            by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The error to be raised if the 
            Property Package required the SetMaterial method to be called before calling 
            the GetNumCompounds method. The error would not be raised when the 
            GetNumCompounds method is implemented by a Material Object.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoCompounds.GetPDependentProperty(System.Object,System.Double,System.Object,System.Object@)">
            <summary>Returns the values of pressure-dependent Physical Properties for 
            the specified pure Compounds.</summary>
            <param name="props">The list of Physical Property identifiers. Valid
            identifiers for pressure-dependent Physical Properties are listed in section 
            7.5.4</param>
            <param name="pressure">Pressure (in Pa) at which Physical Properties are
            evaluated</param>
            <param name="compIds">List of Compound identifiers for which Physical
            Properties are to be retrieved. Set compIds = UNDEFINED to denote all 
            Compounds in the component that implements the ICapeThermoCompounds 
            interface.</param>
            <param name="propVals">&gt;Property values for the Compounds specified.</param>
            <remarks><para>The GetPDependentPropList method can be used in order to 
            check which Physical Properties are available.</para>
            <para>If the number of requested Physical Properties is P and the number 
            Compounds is C, the propvals array will contain C*P values. The first C 
            will be the values for the first requested Physical Property followed by C 
            values for the second Physical Property, and so on.</para>
            <para>Physical Properties are returned in a fixed set of units as specified 
            in section 7.5.4.</para>
            <para>If the compIds argument is set to UNDEFINED this is a request to return 
            property values for all compounds in the component that implements the 
            ICapeThermoCompounds interface with the compound order the same as that 
            returned by the GetCompoundList method. For example, if the interface is 
            implemented by a Property Package component the property request with compIds 
            set to UNDEFINED means all compounds in the Property Package rather than all 
            compounds in the Material Object passed to the Property package.</para>
            <para>If any Physical Property is not available for one or more Compounds, 
            then undefined valuesm must be returned for those combinations and an 
            ECapeThrmPropertyNotAvailable exception must be raised. If the exception is 
            raised, the client should check all the values returned to determine which is 
            undefined.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported 
            by the current implementation. This exception should be raised if no Compounds 
            or no Physical Properties are supported.</exception>
            <exception cref="T:CapeOpen.ECapeLimitedImpl">One or more Physical Properties are not 
            supported by the component that implements this interface. This exception 
            should also be raised (rather than ECapeInvalidArgument) if any element of 
            the props argument is not recognised since the list of Physical Properties 
            in section 7.5.4 is not intended to be exhaustive and an unrecognised
            Physical Property identifier may be valid. If no Physical Properties at all 
            are supported, ECapeNoImpl should be raised (see above).</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value is passed, for example UNDEFINED for argument props.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfBounds">The value of the pressure is outside of
            the range of values accepted by the Property Package.</exception>
            <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">At least one item in the 
            properties list is not available for a particular compound.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The error to be raised if the 
            Property Package required the SetMaterial method to be called before calling 
            the GetPDependentProperty method. The error would not be raised when the 
            GetPDependentProperty method is implemented by a Material Object.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoCompounds.GetPDependentPropList">
            <summary>Returns the list of supported pressure-dependent properties.</summary>
            <returns>The list of Physical Property identifiers for all supported 
             pressure-dependent properties. The standard identifiers are listed in 
             section 7.5.4</returns>
             <remarks>
             <para>GetPDependentPropList returns identifiers for all the pressure-dependent 
             properties that can be retrieved by the GetPDependentProperty method. If no 
             properties are supported UNDEFINED should be returned. The CAPE-OPEN standards 
             do not define a minimum list of Physical Properties to be made available by 
             a software component that implements the ICapeThermoCompounds interface.</para>
             <para>A component that implements the ICapeThermoCompounds interface may 
             return identifiers which do not belong to the list defined in section 7.5.4. 
             However, these proprietary identifiers may not be understood by most of the 
             clients of this component.</para>
             </remarks>
             <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
             this method can be called for reasons of compatibility with the CAPE-OPEN 
             standards. That is to say that the operation exists, but it is not supported 
             by the current implementation.</exception>
             <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
             specified for the operation, are not suitable.</exception>
             <exception cref="T:CapeOpen.ECapeBadInvOrder">The error to be raised if the Property 
             Package required the SetMaterial method to be called before calling the 
             GetPDependentPropList method. The error would not be raised when the 
             GetPDependentPropList method is implemented by a Material Object.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoCompounds.GetTDependentProperty(System.Object,System.Double,System.Object,System.Object@)">
            <summary>Returns the values of temperature-dependent Physical Properties for 
            the specified pure Compounds.</summary>
            <param name="props">The list of Physical Property identifiers. Valid
            identifiers for temperature-dependent Physical Properties are listed in 
            section 7.5.3</param>
            <param name="temperature">Temperature (in K) at which properties are 
            evaluated.</param>
            <param name="compIds">List of Compound identifiers for which Physical
            Properties are to be retrieved. Set compIds = UNDEFINED to denote all 
            Compounds in the component that implements the ICapeThermoCompounds 
            interface .</param>
            <param name="propVals">Physical Property values for the Compounds specified.
            </param>
            <remarks> <para>The GetTDependentPropList method can be used in order to 
            check which Physical Properties are available.</para>
            <para>If the number of requested Physical Properties is P and the number of 
            Compounds is C, the propvals array will contain C*P values. The first C will 
            be the values for the first requested Physical Property followed by C values 
            for the second Physical Property, and so on.</para>
            <para>Properties are returned in a fixed set of units as specified in 
            section 7.5.3.</para>
            <para>If the compIds argument is set to UNDEFINED this is a request to return 
            property values for all compounds in the component that implements the 
            ICapeThermoCompounds interface with the compound order the same as that 
            returned by the GetCompoundList method. For example, if the interface is 
            implemented by a Property Package component the property request with compIds 
            set to UNDEFINED means all compounds in the Property Package rather than all 
            compounds in the Material Object passed to the Property package.</para>
            <para>If any Physical Property is not available for one or more Compounds, 
            then undefined values must be returned for those combinations and an 
            ECapeThrmPropertyNotAvailable exception must be raised. If the exception is 
            raised, the client should check all the values returned to determine which is 
            undefined.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl"> – The operation is “not” implemented even 
            if this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported 
            by the current implementation. This exception should be raised if no 
            Compounds or no Physical Properties are supported.</exception>
            <exception cref="T:CapeOpen.ECapeLimitedImpl">One or more Physical Properties are not
            supported by the component that implements this interface. This exception 
            should also be raised (rather than ECapeInvalidArgument) if any element of 
            the props argument is not recognised since the list of properties in section 
            7.5.3 is not intended to be exhaustive and an unrecognised Physical Property 
            identifier may be valid. If no properties at all are supported ECapeNoImpl 
            should be raised (see above).</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value is passed, for example UNDEFINED for argument props.</exception> 
            <exception cref="T:CapeOpen.ECapeOutOfBounds">The value of the temperature is outside
            of the range of values accepted by the Property Package.</exception>
            <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">at least one item in the 
            properties list is not available for a particular compound.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder"> The error to be raised if the 
            Property Package required the SetMaterial method to be called before calling 
            the GetTDependentProperty method. The error would not be raised when the 
            GetTDependentProperty method is implemented by a Material Object.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoCompounds.GetTDependentPropList">
            <summary>Returns the list of supported temperature-dependent Physical 
            Properties.</summary>
            <returns>The list of Physical Property identifiers for all supported 
            temperature-dependent properties. The standard identifiers are listed in 
            section 7.5.3</returns>
            <remarks><para>GetTDependentPropList returns identifiers for all the 
            temperature-dependent Physical Properties that can be retrieved by the 
            GetTDependentProperty method. If no properties are supported UNDEFINED 
            should be returned. The CAPE-OPEN standards do not define a minimum list of 
            properties to be made available by a software component that implements the 
            ICapeThermoCompounds interface.</para>
            <para>A component that implements the ICapeThermoCompounds interface may 
            return identifiers which do not belong to the list defined in section 
            7.5.3. However, these proprietary identifiers may not be understood by most 
            of the clients of this component.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported
            by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),
            specified for the operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The error to be raised if the Property 
            Package required the SetMaterial method to be called before calling the 
            GetTDependentPropList method. The error would not be raised when the 
            GetTDependentPropList method is implemented by a Material Object.</exception>
        </member>
        <member name="T:CapeOpen.ICapeThermoPhases">
            <summary>
            Provides information about the number and types of Phases supported by 
            the component that implements it.
            </summary>
            <remarks>This interface is designed to provide information about the number and 
            types of Phases supported by the component that implements it. It defines all the
            Phases that a component such as a Physical Property Calculator can handle. It 
            does not provide information about the Phases that are actually present in a 
            Material Object. This function is provided by the Get-PresentPhases method of the 
            ICapeThermoMaterial interface.</remarks>
        </member>
        <member name="M:CapeOpen.ICapeThermoPhases.GetNumPhases">
            <summary>Returns the number of Phases.</summary>
            <returns>The number of Phases supported.</returns>
            <remarks>The number of Phases returned by this method must be equal to the 
            number of Phase labels that are returned by the GetPhaseList method of this
            interface. It must be zero, or a positive number.</remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported
            by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPhases.GetPhaseInfo(System.String,System.String)">
            <summary>Returns information on an attribute associated with a Phase for the 
            purpose of understanding what lies behind a Phase label.</summary>
            <param name="phaseLabel">A (single) Phase label. This must be one of the 
            values returned by GetPhaseList method.</param>
            <param name="phaseAttribute">One of the Phase attribute identifiers from the 
            table below.</param>
            <returns>The value corresponding to the Phase attribute identifier – see 
            table below.</returns>
            <remarks>
            <para>GetPhaseInfo is intended to allow a PME, or other client, to identify a
            Phase with an arbitrary label. A PME, or other client, will need to do this 
            to map stream data into a Material Object, or when importing a Property 
            Package. If the client cannot identify the Phase, it can ask the user to 
            provide a mapping based on the values of these properties.</para>
            <para>The list of supported Phase attributes is defined in the following 
            table:</para>
            <para>For example, the following information might be returned by a Property 
            Package component that supports a vapour Phase, an organic liquid Phase and 
            an aqueous liquid Phase:
            Phase label Gas Organic Aqueous
            StateOfAggregation Vapor Liquid Liquid
            KeyCompoundId UNDEFINED UNDEFINED Water
            ExcludedCompoundId UNDEFINED Water UNDEFINED
            DensityDescription UNDEFINED Light Heavy
            UserDescription The gas Phase The organic liquid
            Phase
            The aqueous liquid
            Phase 
            TypeOfSolid UNDEFINED UNDEFINED UNDEFINED</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists but it is not supported 
            by the current implementation..</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument"> – phaseLabel is not recognised, or 
            UNDEFINED, or phaseAttribute is not recognised.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for this operation, are not suitable..</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPhases.GetPhaseList(System.Object@,System.Object@,System.Object@)">
            <summary>
            Returns Phase labels and other important descriptive information for all the 
            Phases supported.
            </summary>
            <param name="phaseLabels">The list of Phase labels for the Phases supported. 
            A Phase label can be any string but each Phase must have a unique label. If, 
            for some reason, no Phases are supported an UNDEFINED value should be returned 
            for the phaseLabels. The number of Phase labels must also be equal to the 
            number of Phases returned by the GetNumPhases method.
            </param>
            <param name="stateOfAggregation">The physical State of Aggregation associated 
            with each of the Phases. This must be one of the following strings: ”Vapor”, 
            “Liquid”, “Solid” or “Unknown”. Each Phase must have a single State of 
            Aggregation. The value must not be left undefined, but may be set to “Unknown”.
            </param>
            <param name="keyCompoundId">The key Compound for the Phase. This must be the
            Compound identifier (as returned by GetCompoundList), or it may be undefined 
            in which case a UNDEFINED value is returned. The key Compound is an indication 
            of the Compound that is expected to be present in high concentration in the 
            Phase, e.g. water for an aqueous liquid phase. Each Phase can have a single 
            key Compound.
            </param>
            <remarks>
            <para>The Phase label allows the phase to be uniquely identified in methods of
            the ICapeThermoPhases interface and other CAPE-OPEN interfaces. The State of 
            Aggregation and key Compound provide a way for the PME, or other client, to 
            interpret the meaning of a Phase label in terms of the physical characteristics 
            of the Phase.</para>
            <para>All arrays returned by this method must be of the same length, i.e. 
            equal to the number of Phase labels.</para>
            <para>To get further information about a Phase, use the GetPhaseInfo method.
            </para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if this 
            method can be called for reasons of compatibility with the CAPE-OPEN standards. 
            That is to say that the operation exists, but it is not supported by the 
            current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ICapeThermoPropertyRoutine">
             <remarks>
             <para>Any Component or object that can calculate a Physical Property must 
             implement the ICapeThermoPropertyRoutine interface. Within the scope of this 
             specification this means that it must be implemented by Calculation Routine 
             components, Property Package components and Material Object implementations that 
             will be passed to clients which may need to perform Property Calculations, such 
             as Unit Operations [2] and Reaction Package components [3].</para>
             <para>When the ICapeThermoPropertyRoutine interface is implemented by a Material 
             Object, it is expected that the actual Calculate, Check and Get functions will be 
             delegated either to proprietary methods within a PME or to methods in an 
             associated CAPE-OPEN Property Package or Calculation Routine component.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyRoutine.CalcAndGetLnPhi(System.String,System.Double,System.Double,System.Object,System.Int32,System.Object@,System.Object@,System.Object@,System.Object@)">
            <summary>This method is used to calculate the natural logarithm of the 
            fugacity coefficients (and optionally their derivatives) in a single Phase 
            mixture. The values of temperature, pressure and composition are specified in 
            the argument list and the results are also returned through the argument list.
            </summary>
            <param name="phaseLabel">Phase label of the Phase for which the properties 
            are to be calculated. The Phase label must be one of the strings returned by 
            the GetPhaseList method on the ICapeThermoPhases interface.</param>
            <param name="temperature">The temperature (K) for the calculation.</param>
            <param name="pressure">The pressure (Pa) for the calculation.</param>
            <param name="lnPhiDT">Derivatives of natural logarithm of the fugacity
            coefficients w.r.t. temperature (if requested).</param>
            <param name="moleNumbers">Number of moles of each Compound in the mixture.</param>
            <param name="fFlags">Code indicating whether natural logarithm of the 
            fugacity coefficients and/or derivatives should be calculated (see notes).
            </param>
            <param name="lnPhi">Natural logarithm of the fugacity coefficients (if
            requested).</param>
            <param anem="lnPhiDT">Derivatives of natural logarithm of the fugacity
            coefficients w.r.t. temperature (if requested).</param>
            <param name="lnPhiDP">Derivatives of natural logarithm of the fugacity
            coefficients w.r.t. pressure (if requested).</param>
            <param name="lnPhiDn">Derivatives of natural logarithm of the fugacity
            coefficients w.r.t. mole numbers (if requested).</param>
            <remarks>
            <para>This method is provided to allow the natural logarithm of the fugacity 
            coefficient, which is the most commonly used thermodynamic property, to be 
            calculated and returned in a highly efficient manner.</para>
            <para>The temperature, pressure and composition (mole numbers) for the 
            calculation are specified by the arguments and are not obtained from the 
            Material Object by a separate request. Likewise, any quantities calculated are 
            returned through the arguments and are not stored in the Material Object. The 
            state of the Material Object is not affected by calling this method. It should 
            be noted however, that prior to calling CalcAndGetLnPhi a valid Material 
            Object must have been defined by calling the SetMaterial method on the
            ICapeThermoMaterialContext interface of the component that implements the
            ICapeThermoPropertyRoutine interface. The compounds in the Material Object 
            must have been identified and the number of values supplied in the moleNumbers
            argument must be equal to the number of Compounds in the Material Object.
            </para>
            <para>The fugacity coefficient information is returned as the natural 
            logarithm of the fugacity coefficient. This is because thermodynamic models 
            naturally provide the natural logarithm of this quantity and also a wider 
            range of values may be safely returned.</para>
            <para>The quantities actually calculated and returned by this method are 
            controlled by an integer code fFlags. The code is formed by summing 
            contributions for the property and each derivative required using the 
            enumerated constants eCapeCalculationCode (defined in the
            Thermo version 1.1 IDL) shown in the following table. For example, to 
            calculate log fugacity coefficients and their T-derivatives the fFlags 
            argument would be set to CAPE_LOG_FUGACITY_COEFFICIENTS + CAPE_T_DERIVATIVE.</para>
            <table border="1">
            <tr>
            <th>Calculation Type</th>
            <th>Enumeration Value</th>
            <th>Numerical Value</th>
            </tr>
            <tr>
            <td>no calculation</td>
            <td>CAPE_NO_CALCULATION</td>
            <td>0</td>
            </tr>
            <tr>
            <td>log fugacity coefficients</td>
            <td>CAPE_LOG_FUGACITY_COEFFICIENTS</td>
            <td>1</td>
            </tr>
            <tr>
            <td>T-derivative</td>
            <td>CAPE_T_DERIVATIVE</td>
            <td>2</td>
            </tr>
            <tr>
            <td>P-derivative</td>
            <td>CAPE_P_DERIVATIVE</td>
            <td>4</td>
            </tr>
            <tr>
            <td>mole number derivatives</td>
            <td>CAPE_MOLE_NUMBERS_DERIVATIVES</td>
            <td>8</td>
            </tr>
            </table>	
            <para>If CalcAndGetLnPhi is called with fFlags set to CAPE_NO_CALCULATION no 
            property values are returned.</para>
            <para>A typical sequence of operations for this method when implemented by a 
            Property Package component would be:
            </para>
            <para>
            - Check that the phaseLabel specified is valid.
            </para>
            <para>
            - Check that the moleNumbers array contains the number of values expected
            (should be consistent with the last call to the SetMaterial method).
            </para>
            <para>
            - Calculate the requested properties/derivatives at the T/P/composition specified in the argument list.
            </para>
            <para>
            - Store values for the properties/derivatives in the corresponding arguments.
            </para>
            <para>Note that this calculation can be carried out irrespective of whether the Phase actually exists in the Material Object.
            </para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported by 
            the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeLimitedImpl">Would be raised if the one or more of the 
            properties requested cannot be returned because the calculation is not 
            implemented.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The necessary pre-requisite operation has 
            not been called prior to the operation request. For example, the 
            ICapeThermoMaterial interface has not been passed via a SetMaterial call prior
            to calling this method.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites for the 
            Property Calculation are not valid. Forexample, the composition of the phase is 
            not defined, the number of Compounds in the Material Object is zero or not 
            consistent with the moleNumbers argument or any other necessary input information 
            is not available.</exception>
            <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">At least one item in the 
            requested properties cannot be returned. This could be because the property 
            cannot be calculated at the specified conditions or for the specified Phase. 
            If the property calculation is not implemented then ECapeLimitedImpl should 
            be returned.</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">One of the property calculations has 
            failed. For example if one of the iterative solution procedures in the model 
            has run out of iterations, or has converged to a wrong solution.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value is passed, for example an unrecognised value, or UNDEFINED for the 
            phaseLabel argument.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyRoutine.CalcSinglePhaseProp(System.Object,System.String)">
            <summary>CalcSinglePhaseProp is used to calculate properties and property 
            derivatives of a mixture in a single Phase at the current values of 
            temperature, pressure and composition set in the Material Object. 
            CalcSinglePhaseProp does not perform phase Equilibrium Calculations.
            </summary>
            <param name="props">The list of identifiers for the single-phase properties 
            or derivatives to be calculated. See sections 7.5.5 and 7.6 for the standard 
            identifiers.</param>
            <param name="phaseLabel">Phase label of the Phase for which the properties 
            are to be calculated. The Phase label must be one of the strings returned by 
            the GetPhaseList method on the ICapeThermoPhases interface.</param>
            <remarks>
            <para>CalcSinglePhaseProp calculates properties, such as enthalpy or viscosity 
            that are defined for a single Phase. Physical Properties that depend on more 
            than one Phase, for example surface tension or K-values, are handled by 
            CalcTwoPhaseProp method.</para>
            <para>Components that implement this method must get the input specification 
            for the calculation (temperature, pressure and composition) from the associated 
            Material Object and set the results in the Material Object.</para>
            <para>Thermodynamic and Physical Properties Components, such as a Property 
            Package or Property Calculator, must implement the ICapeThermoMaterialContext 
            interface so that an ICapeThermoMaterial interface can be passed via the 
            SetMaterial method.</para>
            <para>A typical sequence of operations for CalcSinglePhaseProp when implemented
            by a Property Package component would be:</para>
            <para>- Check that the phaseLabel specified is valid.</para>
            <para>- Use the GetTPFraction method (of the Material Object specified in the 
            last call to the SetMaterial method) to get the temperature, pressure and 
            composition of the specified Phase.</para>
            <para>- Calculate the properties.</para>
            <para>- Store values for the properties of the Phase in the Material Object 
            using the SetSinglePhaseProp method of the ICapeThermoMaterial interface.</para>
            <para>CalcSinglePhaseProp will request the input Property values it requires 
            from the Material Object through GetSinglePhaseProp calls. If a requested 
            property is not available, the exception raised will be 
            ECapeThrmPropertyNotAvailable. If this error occurs then the Property Package 
            can return it to the client, or request a different property. Material Object
            implementations must be able to supply property values using the client’s 
            choice of basis by implementing conversion from one basis to another.</para>
            <para>Clients should not assume that Phase fractions and Compound fractions in 
            a Material Object are normalised. Fraction values may also lie outside the 
            range 0 to 1. If fractions are not normalised, or are outside the expected 
            range, it is the responsibility of the Property Package to decide how to deal 
            with the situation.</para>
            <para>It is recommended that properties are requested one at a time in order 
            to simplify error handling. However, it is recognised that there are cases 
            where the potential efficiency gains of requesting several properties 
            simultaneously are more important. One such example might be when a property 
            and its derivatives are required.</para>
            <para>If a client uses multiple properties in a call and one of them fails 
            then the whole call should be considered to have failed. This implies that no 
            value should be written back to the Material Object by the Property Package 
            until it is known that the whole request can be satisfied.</para>
            <para>It is likely that a PME might request values of properties for a Phase at 
            conditions of temperature, pressure and composition where the Phase does not 
            exist (according to the mathematical/physical models used to represent 
            properties). The exception ECapeThrmPropertyNotAvailable may be raised or an 
            extrapolated value may be returned.</para>
            <para>It is responsibility of the implementer to decide how to handle this 
            circumstance.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if this
            method can be called for reasons of compatibility with the CAPE-OPEN standards. 
            That is to say that the operation exists, but it is not supported by the 
            current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeLimitedImpl">Would be raised if the one or more of the 
            properties requested cannot be returned because the calculation (of the 
            particular property) is not implemented. This exception should also be raised 
            (rather than ECapeInvalidArgument) if the props argument is not recognised 
            because the list of properties in section 7.5.5 is not intended to be 
            exhaustive and an unrecognised property identifier may be valid. If no 
            properties at all are supported ECapeNoImpl should be raised (see above).</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The necessary pre-requisite operation has 
            not been called prior to the operation request. For example, the 
            ICapeThermoMaterial interface has not been passed via a SetMaterial call prior 
            to calling this method.</exception> 
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites for the 
            property calculation are not valid. For example, the composition of the phases
            is not defined or any other necessary input information is not available.</exception>
            <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">At least one item in the 
            requested properties cannot be returned. This could be because the property 
            cannot be calculated at the specified conditions or for the specified phase. 
            If the property calculation is not implemented then ECapeLimitedImpl should be 
            returned.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyRoutine.CalcTwoPhaseProp(System.Object,System.Object)">
            <summary>CalcTwoPhaseProp is used to calculate mixture properties and property 
            derivatives that depend on two Phases at the current values of temperature, 
            pressure and composition set in the Material Object. It does not perform 
            Equilibrium Calculations.</summary>
            <param name="props">The list of identifiers for properties to be calculated.
            This must be one or more of the supported two-phase properties and derivatives 
            (as given by the GetTwoPhasePropList method). The standard identifiers for 
            two-phase properties are given in section 7.5.6 and 7.6.</param>
            <param name="phaseLabels">Phase labels of the phases for which the properties 
            are to be calculated. The phase labels must be two of the strings returned by 
            the GetPhaseList method on the ICapeThermoPhases interface.</param>
            <remarks>
            <para>CalcTwoPhaseProp calculates the values of properties such as surface 
            tension or K-values. Properties that pertain to a single Phase are handled by 
            the CalcSinglePhaseProp method of the ICapeThermoPropertyRoutine interface.
            Components that implement this method must get the input specification for the 
            calculation (temperature, pressure and composition) from the associated 
            Material Object and set the results in the Material Object.</para>
            <para>Components such as a Property Package or Property Calculator must 
            implement the ICapeThermoMaterialContext interface so that an 
            ICapeThermoMaterial interface can be passed via the SetMaterial method.</para>
            <para>A typical sequence of operations for CalcTwoPhaseProp when implemented by
            a Property Package component would be:</para>
            <para>- Check that the phaseLabels specified are valid.</para>
            <para>- Use the GetTPFraction method (of the Material Object specified in the 
            last call to the SetMaterial method) to get the temperature, pressure and 
            composition of the specified Phases.</para>
            <para>- Calculate the properties.</para>
            <para>- Store values for the properties in the Material Object using the 
            SetTwoPhaseProp method of the ICapeThermoMaterial interface.</para>
            <para>CalcTwoPhaseProp will request the values it requires from the Material Object 
            through GetTPFraction or GetSinglePhaseProp calls. If a requested property is 
            not available, the exception raised will be ECapeThrmPropertyNotAvailable. If 
            this error occurs, then the Property Package can return it to the client, or 
            request a different property. Material Object implementations must be able to 
            supply property values using the client choice of basis by implementing 
            conversion from one basis to another.</para>
            <para>Clients should not assume that Phase fractions and Compound fractions in 
            a Material Object are normalised. Fraction values may also lie outside the 
            range 0 to 1. If fractions are not normalised, or are outside the expected 
            range, it is the responsibility of the Property Package to decide how to deal 
            with the situation.</para>
            <para>It is recommended that properties are requested one at a time in order to 
            simplify error handling. However, it is recognised that there are cases where 
            the potential efficiency gains of requesting several properties simultaneously 
            are more important. One such example might be when a property and its 
            derivatives are required.</para>
            <para>If a client uses multiple properties in a call and one of them fails, then the 
            whole call should be considered to have failed. This implies that no value 
            should be written back to the Material Object by the Property Package until 
            it is known that the whole request can be satisfied.</para>
            <para>CalcTwoPhaseProp must be called separately for each combination of Phase
            groupings. For example, vapour-liquid K-values have to be calculated in a 
            separate call from liquid-liquid K-values.</para>
            <para>Two-phase properties may not be meaningful unless the temperatures and 
            pressures of all Phases are identical. It is the responsibility of the Property 
            Package to check such conditions and to raise an exception if appropriate.</para>
            <para>It is likely that a PME might request values of properties for Phases at 
            conditions of temperature, pressure and composition where one or both of the 
            Phases do not exist (according to the mathematical/physical models used to 
            represent properties). The exception ECapeThrmPropertyNotAvailable may be 
            raised or an extrapolated value may be returned. It is responsibility of the 
            implementer to decide how to handle this circumstance.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if this 
            method can be called for reasons of compatibility with the CAPE-OPEN standards. 
            That is to say that the operation exists, but it is not supported by the 
            current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeLimitedImpl">Would be raised if the one or more of the 
            properties requested cannot be returned because the calculation (of the 
            particular property) is not implemented. This exception should also be raised 
            (rather than ECapeInvalidArgument) if the props argument is not recognised 
            because the list of properties in section 7.5.6 is not intended to be 
            exhaustive and an unrecognised property identifier may be valid. If no 
            properties at all are supported ECapeNoImpl should be raised (see above).</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The necessary pre-requisite operation has 
            not been called prior to the operation request. For example, the 
            ICapeThermoMaterial interface has not been passed via a SetMaterial call 
            prior to calling this method.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites for the 
            property calculation are not valid. For example, the composition of one of the 
            Phases is not defined, or any other necessary input information is not 
            available.</exception>
            <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">At least one item in the 
            requested properties cannot be returned. This could be because the property 
            cannot be calculated at the specified conditions or for the specified Phase. 
            If the property calculation is not implemented then ECapeLimitedImpl should be 
            returned.</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">One of the property calculations has 
            failed. For example if one of the iterative solution procedures in the model 
            has run out of iterations, or has converged to a wrong solution.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value is passed, for example an unrecognised value or UNDEFINED for the 
            phaseLabels argument or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyRoutine.CheckSinglePhasePropSpec(System.String,System.String)">
            <summary>Checks whether it is possible to calculate a property with the 
            CalcSinglePhaseProp method for a given Phase.</summary>
            <param name="property">The identifier of the property to check. To be valid 
            this must be one of the supported single-phase properties or derivatives (as 
            given by the GetSinglePhasePropList method).</param>
            <param name="phaseLabel">The Phase label for the calculation check. This must
            be one of the labels returned by the GetPhaseList method on the 
            ICapeThermoPhases interface.</param>
            <returns> A boolean set to True if the combination of property and phaseLabel
            is supported or False if not supported.</returns>
            <remarks>
            <para>The result of the check should only depend on the capabilities and 
            configuration (Compounds and Phases present) of the component that implements 
            the ICapeThermoPropertyRoutine interface (eg. a Property Package). It should 
            not depend on whether a Material Object has been set nor on the state 
            (temperature, pressure, composition etc.), or configuration of a Material 
            Object that might be set.</para>
            <para>It is expected that the PME, or other client, will use this method to 
            check whether the properties it requires are supported by the Property Package
            when the package is imported. If any essential properties are not available, 
            the import process should be aborted.</para>
            <para>If either the property or the phaseLabel arguments are not recognised by 
            the component that implements the ICapeThermoPropertyRoutine interface this 
            method should return False.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation CheckSinglePhasePropSpec is 
            “not” implemented even if this method can be called for reasons of 
            compatibility with the CAPE-OPEN standards. That is to say that the operation 
            exists, but it is not supported by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The necessary pre-requisite operation has
            not been called prior to the operation request. The ICapeThermoMaterial 
            interface has not been passed via a SetMaterial call prior to calling this 
            method.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites for the 
            property calculation are not valid. For example, if a prior call to the 
            SetMaterial method of the ICapeThermoMaterialContext interface has failed to 
            provide a valid Material Object.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">One or more of the input arguments is 
            not valid: for example, UNDEFINED value for the property argument or the 
            phaseLabel argument.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the CheckSinglePhasePropSpec operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyRoutine.CheckTwoPhasePropSpec(System.String,System.Object)">
            <summary>Checks whether it is possible to calculate a property with the 
            CalcTwoPhaseProp method for a given set of Phases.</summary>
            <param name="property">The identifier of the property to check. To be valid 
            this must be one of the supported two-phase properties (including derivatives), 
            as given by the GetTwoPhasePropList method.</param>
            <param name="phaseLabels">Phase labels of the Phases for which the properties 
            are to be calculated. The Phase labels must be two of the identifiers returned 
            by the GetPhaseList method on the ICapeThermoPhases interface.</param>
            <returns> A boolean Set to True if the combination of property and
            phaseLabels is supported, or False if not supported.</returns>
            <remarks>
            <para>The result of the check should only depend on the capabilities and 
            configuration (Compounds and Phases present) of the component that implements 
            the ICapeThermoPropertyRoutine interface (eg. a Property Package). It should 
            not depend on whether a Material Object has been set nor on the state 
            (temperature, pressure, composition etc.), or configuration of a Material 
            Object that might be set.</para>
            <para>It is expected that the PME, or other client, will use this method to 
            check whether the properties it requires are supported by the Property Package 
            when the Property Package is imported. If any essential properties are not 
            available, the import process should be aborted.</para>
            <para>If either the property argument or the values in the phaseLabels 
            arguments are not recognised by the component that implements the 
            ICapeThermoPropertyRoutine interface this method should return False.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation CheckTwoPhasePropSpec is “not” 
            implemented even if this method can be called for reasons of compatibility with 
            the CAPE-OPEN standards. That is to say that the operation exists, but it is 
            not supported by the current implementation. This may be the case if no 
            two-phase property is supported.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The necessary pre-requisite operation has 
            not been called prior to the operation request. The ICapeThermoMaterial 
            interface has not been passed via a SetMaterial call prior to calling this 
            method.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites for the 
            property calculation are not valid. For example, if a prior call to the 
            SetMaterial method of the ICapeThermoMaterialContext interface has failed to 
            provide a valid Material Object.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">One or more of the input arguments is 
            not valid. For example, UNDEFINED value for the property argument or the 
            phaseLabels argument or number of elements in phaseLabels array not equal to 
            two.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the CheckTwoPhasePropSpec operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyRoutine.GetSinglePhasePropList">
            <summary>Returns the list of supported non-constant single-phase Physical 
            Properties.</summary>
            <returns>List of all supported non-constant single-phase property identifiers. 
            The standard single-phase property identifiers are listed in section 7.5.5.
            </returns>
            <remarks>
            <para>A non-constant property depends on the state of the Material Object. </para>
            <para>Single-phase properties, e.g. enthalpy, only depend on the state of one 
            phase. GetSinglePhasePropList must return all the single-phase properties that 
            can be calculated by CalcSinglePhaseProp. If derivatives can be calculated 
            these must also be returned.</para>
            <para>If no single-phase properties are supported this method should return 
            UNDEFINED.</para>
            <para>To get the list of supported two-phase properties, use 
            GetTwoPhasePropList.</para>
            <para>A component that implements this method may return non-constant 
            single-phase property identifiers which do not belong to the list defined in 
            section 7.5.5. However, these proprietary identifiers may not be understood by 
            most of the clients of this component.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported by 
            the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the GetSinglePhasePropList operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyRoutine.GetTwoPhasePropList">
            <summary>Returns the list of supported non-constant two-phase properties.</summary>
            <returns>List of all supported non-constant two-phase property identifiers. 
            The standard two-phase property identifiers are listed in section 7.5.6.</returns>
            <remarks>
            <para>A non-constant property depends on the state of the Material Object. 
            Two-phase properties are those that depend on more than one co-existing phase, 
            e.g. K-values.</para>
            <para>GetTwoPhasePropList must return all the properties that can be calculated 
            by CalcTwoPhaseProp. If derivatives can be calculated, these must also be 
            returned.</para>
            <para>If no two-phase properties are supported this method should return 
            UNDEFINED.</para>
            <para>To check whether a property can be evaluated for a particular set of 
            phase labels use the CheckTwoPhasePropSpec method.</para>
            <para>A component that implements this method may return non-constant 
            two-phase property identifiers which do not belong to the list defined in 
            section 7.5.6. However, these proprietary identifiers may not be understood by 
            most of the clients of this component.</para>
            <para>To get the list of supported single-phase properties, use 
            GetSinglePhasePropList.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if this
            method can be called for reasons of compatibility with the CAPE-OPEN standards. 
            That is to say that the operation exists, but it is not supported by the 
            current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the GetTwoPhasePropList operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ICapeThermoEquilibriumRoutine">
            <summary>
            Implemented by any component or object that can perform an Equilibrium Calculation.
            </summary>
            <remarks>
            <para>Any component or object that can perform an Equilibrium Calculation must 
            implement the ICapeThermoEquilibriumRoutine interface. Within the scope of this 
            specification, this means that it must be implemented by Equilibrium Calculator 
            components, Property Package components and by Material Object implementations 
            that will be passed to clients which may need to perform Equilibrium Calculations, 
            such as Unit Operations [2].</para>
            <para>When a Material Object implements the ICapeThermoEquilibriumRoutine 
            interface, it is expected that the methods will be delegated either to proprietary 
            methods within a PME, or to methods in an associated CAPE-OPEN Property Package or 
            Equilibrium Calculator component.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeThermoEquilibriumRoutine.CalcEquilibrium(System.Object,System.Object,System.String)">
            <summary> CalcEquilibrium is used to calculate the amounts and compositions 
            of Phases at equilibrium. CalcEquilibrium will calculate temperature and/or 
            pressure if these are not among the two specifications that are mandatory for 
            each Equilibrium Calculation considered.</summary>
            <remarks>
            <para>The specification1 and specification2 arguments provide the information 
            necessary to retrieve the values of two specifications, for example the 
            pressure and temperature, for the Equilibrium Calculation. The CheckEquilibriumSpec 
            method can be used to check for supported specifications. Each specification 
            variable contains a sequence of strings in the order defined in the following 
            table (hence, the specification arguments may have 3 or 4 items):<para>
            <para>property identifier The property identifier can be any of the identifiers 
            listed in section 7.5.5 but only certain property specifications will normally 
            be supported by any Equilibrium Routine.</para>
            basis The basis for the property value. Valid settings for basis are given in 
            section 7.4. Use UNDEFINED as a placeholder for a property for which basis does
            not apply. For most Equilibrium Specifications, the result of the calculation
            is not dependent on the basis, but, for example, for phase fraction 
            specifications the basis (Mole or Mass) does make a difference.</para>
            <para>phase label The phase label denotes the Phase to which the specification 
            applies. It must either be one of the labels returned by GetPresentPhases, or 
            the special value “Overall”.</para>
            compound identifier (optional)The compound identifier allows for specifications 
            that depend on a particular Compound. This item of the specification array is 
            optional and may be omitted. In case of a specification without compound 
            identifier, the array element may be present and empty, or may be absent.</para>
            <para>Some examples of typical phase equilibrium specifications are given in 
            the table below.</para>
            <para>The values corresponding to the specifications in the argument list and 
            the overall composition of the mixture must be set in the associated Material 
            Object before a call to CalcEquilibrium.</para>
            <para>Components such as a Property Package or an Equilibrium Calculator must 
            implement the ICapeThermoMaterialContext interface, so that an 
            ICapeThermoMaterial interface can be passed via the SetMaterial method. It is 
            the responsibility of the implementation of CalcEquilibrium to validate the 
            Material Object before attempting a calculation.</para>
            <para>The Phases that will be considered in the Equilibrium Calculation are 
            those that exist in the Material Object, i.e. the list of phases specified in 
            a SetPresentPhases call. This provides a way for a client to specify whether, 
            for example, a vapour-liquid, liquid-liquid, or vapourliquid-liquid calculation 
            is required. CalcEquilibrium must use the GetPresentPhases method to retrieve 
            the list of Phases and the associated Phase status flags. The Phase status 
            flags may be used by the client to provide information about the Phases, for 
            example whether estimates of the equilibrium state are provided. See the 
            description of the GetPresentPhases and SetPresentPhases methods of the 
            ICapeThermoMaterial interface for details. When the Equilibrium Calculation 
            has been completed successfully, the SetPresentPhases method must be used to 
            specify which Phases are present at equilibrium and the Phase status flags for 
            the phases should be set to Cape_AtEquilibrium. This must include any Phases 
            that are present in zero amount such as the liquid Phase in a dew point 
            calculation.</para>
            <para>Some types of Phase equilibrium specifications may result in more than 
            one solution. A common example of this is the case of a dew point calculation. 
            However, CalcEquilibrium can provide only one solution through the Material 
            Object. The solutionType argument allows the “Normal” or “Retrograde” solution 
            to be explicitly requested. When none of the specifications includes a phase 
            fraction, the solutionType argument should be set to “Unspecified”.</para>
            <para>The definition of “Normal” is</para>
            <para>where V F is the vapour phase fraction and the derivatives are at 
            equilibrium states. For “Retrograde” behaviour,</para>
            <para>CalcEquilibrium must set the amounts, compositions, temperature and 
            pressure for all Phases present at equilibrium, as well as the temperature and 
            pressure for the overall mixture if not set as part of the calculation 
            specifications. CalcEquilibrium must not set any other Physical Properties.</para>
            <para>As an example, the following sequence of operations might be performed 
            by CalcEquilibrium in the case of an Equilibrium Calculation at fixed pressure 
            and temperature:</para>
            <para>- With the ICapeThermoMaterial interface of the supplied Material Object:
            </para>
            <para>- Use the GetPresentPhases method to find the list of Phases that the 
            Equilibrium Calculation should consider.</para>
            <para>- With the ICapeThermoCompounds interface of the Material Object use the
            GetCompoundIds method to find which Compounds are present.</para>
            <para>- Use the GetOverallProp method to get the temperature, pressure and 
            composition for the overall mixture.</para>
            <para>- Perform the Equilibrium Calculation.</para>
            <para>- Use SetPresentPhases to specify the Phases present at equilibrium and 
            set the Phase status flags to Cape_AtEquilibrium.</para>
            <para>- Use SetSinglePhaseProp to set pressure, temperature, Phase amount 
            (or Phase fraction) and composition for all Phases present.</para>
            </remarks>
            <param name="specification1">First specification for the Equilibrium 
            Calculation. The specification information is used to retrieve the value of
            the specification from the Material Object. See below for details.</param>
            <param name="specification2">Second specification for the Equilibrium 
            Calculation in the same format as specification1.</param>
            <param name="solutionType"><para>The identifier for the required solution type. 
            The standard identifiers are given in the following list:</para>
            <para>Unspecified</para>
            <para>Normal</para>
            <para>Retrograde</para>
            <para>The meaning of these terms is defined below in the notes. Other 
            identifiers may be supported but their interpretation is not part of the CO 
            standard.</para></param>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if this 
            method can be called for reasons of compatibility with the CAPE-OPEN standards. 
            That is to say that the operation exists, but it is not supported by the 
            current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The necessary pre-requisite operation has 
            not been called prior to the operation request. The ICapeThermoMaterial interface 
            has not been passed via a SetMaterial call prior to calling this method.</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">The Equilibrium Calculation could not be 
            solved. For example if the solver has run out of iterations, or has converged 
            to a trivial solution.</exception>
            <exception cref="T:CapeOpen.ECapeLimitedImpl">Would be raised if the Equilibrium Routine 
            is not able to perform the flash it has been asked to perform. For example, 
            the values given to the input specifications are valid, but the routine is not 
            able to perform a flash given a temperature and a Compound fraction. That 
            would imply a bad usage or no usage of CheckEquilibriumSpec method, which is 
            there to prevent calling CalcEquilibrium for a calculation which cannot be
            performed.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value is passed. It would be raised, for example, if a specification 
            identifier does not belong to the list of recognised identifiers. It would 
            also be raised if the value given to argument solutionType is not among 
            the three defined, or if UNDEFINED was used instead of a specification identifier.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation"><para>The pre-requisites for the Equilibrium 
            Calculation are not valid. For example:</para>
            <para>• The overall composition of the mixture is not defined.</para>
            <para>• The Material Object (set by a previous call to the SetMaterial method of the
            ICapeThermoMaterialContext interface) is not valid. This could be because no 
            Phases are present or because the Phases present are not recognised by the
            component that implements the ICapeThermoEquilibriumRoutine interface.</para>
            <para>• Any other necessary input information is not available.</para></exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoEquilibriumRoutine.CheckEquilibriumSpec(System.Object,System.Object,System.String)">
            <summary>Checks whether the Property Package can support a particular type of 
            Equilibrium Calculation.</summary>
            <remarks>
            <para>The meaning of the specification1, specification2 and solutionType 
            arguments is the same as for the CalcEquilibrium method.</para>
            <para>The result of the check should only depend on the capabilities and 
            configuration (compounds and phases present) of the component that implements 
            the ICapeThermoEquilibriumRoutine interface (eg. a Property package). It should 
            not depend on whether a Material Object has been set nor on the state 
            (temperature, pressure, composition etc.) or configuration of a Material 
            Object that might be set.</para>
            <para>If solutionType, specification1 and specification2 arguments appear 
            valid but the actual specifications are not supported or not recognised a 
            False value should be returned.</para>
            </remarks>
            <param name="specification1">First specification for the Equilibrium 
            Calculation.</param>
            <param name="specification2">Second specification for the Equilibrium 
            Calculation.</param>
            <param name="solutionType">The required solution type.</param>
            <returns>Set to True if the combination of specifications and solutionType is 
            supported or False if not supported.</returns>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if this 
            method can be called for reasons of compatibility with the CAPE-OPEN standards. 
            That is to say that the operation exists, but it is not supported by the 
            current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value is passed, for example UNDEFINED for solutionType, specification1 or 
            specification2 argument.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ICapeThermoUniversalConstant">
            <summary>Implemented by a component that can return the value of a Universal 
            Constant.</summary>
            <remarks>Any component that can return the value of a Universal Constant can 
            implement the ICapeThermoUniversalConstants interface in order that clients can 
            access these values. This interface is optional for all components. It is 
            recommended that it is implemented by Property Package components and Material 
            Objects being used by CAPE-OPEN Unit Operations.</remarks>
        </member>
        <member name="M:CapeOpen.ICapeThermoUniversalConstant.GetUniversalConstant(System.String)">
            <summary>Retrieves the value of a Universal Constant.</summary>
            <param name="constantId">Identifier of Universal Constant. The list of 
            constants supported should be obtained by using the GetUniversalConstList 
            method.</param>
            <returns>Value of Universal Constant. This could be a numeric or a string 
            value. For numeric values the units of measurement are specified in section 
            7.5.1.</returns>
            <remarks>Universal Constants (often called fundamental constants) are 
            quantities like the gas constant, or the Avogadro constant.</remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetUniversalConstant is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists, but 
            it is not supported by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">For example, UNDEFINED for constantId 
            argument is used, or value for constantId argument does not belong to the 
            list of recognised values.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the GetUniversalConstant operation, are not suitable.</exception>	
        </member>
        <member name="M:CapeOpen.ICapeThermoUniversalConstant.GetUniversalConstantList">
            <summary>Returns the identifiers of the supported Universal Constants.</summary>
            <returns>List of identifiers of Universal Constants. The list of standard 
            identifiers is given in section 7.5.1.</returns>
            <remarks>A component may return Universal Constant identifiers that do not 
            belong to the list defined in section 7.5.1. However, these proprietary 
            identifiers may not be understood by most of the clients of this component.
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetUniversalConstantList is 
            “not” implemented even if this method can be called for reasons of 
            compatibility with the CAPE-OPEN standards. That is to say that the operation 
            exists, but it is not supported by the current implementation. This may occur 
            when the Property Package does not support any Universal Constants, or if it
            does not want to provide values for any Universal Constants which may be used 
            within the Property Package.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the GetUniversalConstantList operation, are not suitable.
            </exception>
        </member>
        <member name="T:CapeOpen.ICapeThermoPropertyPackageManager">
            <summary>The ICapeThermoPropertyPackageManager interface should only be implemented 
            by a Property Package Manager component. This interface is used to access the 
            Property Packages managed by such a component.</summary>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyPackageManager.GetPropertyPackageList">
            <summary>Retrieves the names of the Property Packages being managed by a 
            Property Package Manager component.</summary>
            <returns>The names of the managed Property Packages</returns>
            <remarks>If no packages are managed by the Property Package Manager UNDEFINED 
            should be returned.</remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetPropertyPackageList is “not” 
            implemented even if this method can be called for reasons of compatibility with 
            the CAPE-OPEN standards. That is to say that the operation exists, but it is 
            not supported by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the GetPropertyPackageList operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeThermoPropertyPackageManager.GetPropertyPackage(System.String)">
            <summary>Creates a new instance of a Property Package with the configuration 
            specified by the PackageName argument.</summary>
            <param name="PackageName">The name of one of the Property Packages managed 
            by this Property Package Manager component.</param>
            <returns>The ICapeThermoPropertyRoutine interface of the named Property 
            Package.</returns>
            <remarks><para>The Property Package Manager is only an indirect mechanism to create 
            Property Packages.</para>
            <para>After the Property Package has been created, the Property Package Manager 
            instance can be destroyed, and this will not affect the normal behaviour of 
            the Property Packages.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetPropertyPackage is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists, but it 
            is not supported by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">This error should be returned if 
            the Property Package cannot be created for any reason.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">This error will be returned if the 
            name of the Property Package asked for does not belong to the list of 
            recognised names. Comparison of names is not case sensitive.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the GetPropertyPackage operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.CapeCalculationCode">
            <summary>
            A flag that indicates the desired calculations for the <see cref="M:CapeOpen.ICapeThermoPropertyRoutine.CalcAndGetLnPhi(System.String,System.Double,System.Double,System.Object,System.Int32,System.Object@,System.Object@,System.Object@,System.Object@)">ICapeThermoPropertyRoutine.CalcAndGetLnPhi</see> method.
            </summary>
            <remarks>
            <para>The quantities actually calculated and returned by this method are 
            controlled by an integer code fFlags. The code is formed by summing contributions 
            for the property and each derivative required using the enumerated constants 
            CapeCalculationCode (defined in the Thermo version 1.1 IDL) shown in the following 
            table. For example, to calculate log fugacity coefficients and their T-derivatives 
            the fFlags argument would be set to CAPE_LOG_FUGACITY_COEFFICIENTS + 
            CAPE_T_DERIVATIVE.</para>
            <table border="1">
            <tr>
            <th>Calculation Type</th>
            <th>Enumeration Value</th>
            <th>Numerical Value</th>
            </tr>
            <tr>
            <td>no calculation</td>
            <td>CAPE_NO_CALCULATION</td>
            <td>0</td>
            </tr>
            <tr>
            <td>log fugacity coefficients</td>
            <td>CAPE_LOG_FUGACITY_COEFFICIENTS</td>
            <td>1</td>
            </tr>
            <tr>
            <td>T-derivative</td>
            <td>CAPE_T_DERIVATIVE</td>
            <td>2</td>
            </tr>
            <tr>
            <td>P-derivative</td>
            <td>CAPE_P_DERIVATIVE</td>
            <td>4</td>
            </tr>
            <tr>
            <td>mole number derivatives</td>
            <td>CAPE_MOLE_NUMBERS_DERIVATIVES</td>
            <td>8</td>
            </tr>
            </table>	
            <para>If CalcAndGetLnPhi is called with fFlags set to CAPE_NO_CALCULATION no 
            property values are returned. </para>
            </remarks>
        </member>
        <member name="F:CapeOpen.CapeCalculationCode.CAPE_NO_CALCULATION">
            <summary>Do not calulate any proeprty values.</summary>
        </member>
        <member name="F:CapeOpen.CapeCalculationCode.CAPE_LOG_FUGACITY_COEFFICIENTS">
            <summary>Calculate the value of the log of the fugacity coefficient.</summary>
        </member>
        <member name="F:CapeOpen.CapeCalculationCode.CAPE_T_DERIVATIVE">
            <summary>Calculate the value of the temperature derivates.</summary>
        </member>
        <member name="F:CapeOpen.CapeCalculationCode.CAPE_P_DERIVATIVE">
            <summary>Calculate the value of the pressure derivates.</summary>
        </member>
        <member name="F:CapeOpen.CapeCalculationCode.CAPE_MOLE_NUMBERS_DERIVATIVES">
            <summary>Calculate the value of the mole number derivates.</summary>
        </member>
        <member name="T:CapeOpen.CapePhaseStatus">
            <summary>
            Status of the phases present in the material object.
            </summary>
            <remarks>All the Phases with a status of Cape_AtEquilibrium have values of 
            temperature, pressure, composition and Phase fraction set that correspond to an 
            equilibrium state, i.e. equal temperature, pressure and fugacities of each 
            Compound. Phases with a Cape_Estimates status have values of temperature, pressure, 
            composition and Phase fraction set in the Material Object. These values are 
            available for use by an Equilibrium Calculator component to initialise an 
            Equilibrium Calculation. The stored values are available but there is no guarantee 
            that they will be used.
            </remarks>
        </member>
        <member name="F:CapeOpen.CapePhaseStatus.CAPE_UNKNOWNPHASESTATUS">
            <summary>
            This is the normal setting when a Phase is specified as being available for 
            an Equilibrium Calculation.
            </summary>
        </member>
        <member name="F:CapeOpen.CapePhaseStatus.CAPE_ATEQUILIBRIUM">
            <summary>
            The Phase has been set as present as a result of an Equilibrium Calculation.
            </summary>
        </member>
        <member name="F:CapeOpen.CapePhaseStatus.CAPE_ESTIMATES">
            <summary>
            Estimates of the equilibrium state have been set in the Material Object.
            </summary>
        </member>
        <member name="T:CapeOpen.CapeThermoMaterialWrapper">
            <summary>
            A wrapper class for the ICapeThermoMaterial interface.
            </summary>
            <remarks>This class provides access to the Material Object, whhich is a container 
            of information that describes a Material stream. 
            Calculations of thermophysical and thermodynamic properties are performed by a 
            Property Package using information stored in a Material Object. Results of such 
            calculations may be stored in the Material Object for further usage. The 
            ICapeThermoMaterial interface provides the methods to gather information and 
            perform checks in preparation for a calculation, to request a calculation and 
            to retrieve results and information stored in the Material Object.
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.#ctor(System.Object)">
            <summary>
            Creates an instance of the CapeThermoMaterialWrapper class for the material specificed.
            </summary>
            <remarks><para>This class provides access to the Material Object, which is a container 
            of information that describes a Material stream. </para>
            <para>Calculations of thermophysical and thermodynamic properties are performed by a 
            Property Package using information stored in a Material Object. Results of such 
            calculations may be stored in the Material Object for further usage. The 
            ICapeThermoMaterial interface provides the methods to gather information and 
            perform checks in preparation for a calculation, to request a calculation and 
            to retrieve results and information stored in the Material Object.</para>
            </remarks>
            <param name = "materialObject">The material object to be wrapper by the instance of the class.</param>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.ClearAllProps">
            <summary>
            Remove all stored Physical Property values.
            </summary>
            <remarks>
            <para>
            ClearAllProps removes all stored Physical Properties that have been set 
            using the SetSinglePhaseProp, SetTwoPhaseProp or SetOverallProp methods. 
            This means that any subsequent call to retrieve Physical Properties will 
            result in an exception until new values have been stored using one of the 
            Set methods. ClearAllProps does not remove the configuration information 
            for a Material, i.e. the list of Compounds and Phases.
            </para>
            <para>
            Using the ClearAllProps method results in a Material Object that is in 
            the same state as when it was first created. It is an alternative to using 
            the CreateMaterial method but it is expected to have a smaller overhead in 
            operating system resources.
            </para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists but 
            it is not supported by the current implementation</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
            other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.CopyFromMaterial(CapeOpen.ICapeThermoMaterial)">
            <summary>
            Copies all the stored non-constant Physical Properties (which have been set 
            using the SetSinglePhaseProp, SetTwoPhaseProp or SetOverallProp) from the 
            source Material Object to the current instance of the Material Object.
            </summary>
            <remarks>
            <para>Before using this method, the Material Object must have been configured 
            with the same exact list of Compounds and Phases as the source one. Otherwise, 
            calling the method will raise an exception. There are two ways to perform the 
            configuration: through the PME proprietary mechanisms and with 
            CreateMaterial. Calling CreateMaterial on a Material Object S and 
            subsequently calling CopyFromMaterial(S) on the newly created Material 
            Object N is equivalent to the deprecated method ICapeMaterialObject.Duplicate.
            </para>
            <para>The method is intended to be used by a client, for example a Unit 
            Operation that needs a Material Object to have the same state as one of the 
            Material Objects it has been connected to. One example is the representation 
            of an internal stream in a distillation column.</para>
            </remarks>
            <param name="source">
            Source Material Object from which stored properties will be copied.
            </param>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even 
            if this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists but it is not supported 
            by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites for copying 
            the non-constant Physical Properties of the Material Object are not valid. 
            The necessary initialisation, such as configuring the current Material with 
            the same Compounds and Phases as the source, has not been performed or has 
            failed.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">The physical resources necessary to 
            copy the non-constant Physical Properties are out of limits.</exception>
            <exception cref="T:CapeOpen.ECapeNoMemory">The physical memory necessary to copy the 
            non-constant Physical Properties is out of limit.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
            other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.CreateMaterial">
            <summary>
            Creates a Material Object with the same configuration as the current 
            Material Object.
            </summary>
            <remarks>
            The Material Object created does not contain any non-constant Physical 
            Property value but has the same configuration (Compounds and Phases) as 
            the current Material Object. These Physical Property values must be set 
            using SetSinglePhaseProp, SetTwoPhaseProp or SetOverallProp. Any attempt to 
            retrieve Physical Property values before they have been set will result in 
            an exception.
            </remarks>
            <returns>
            The interface for the Material Object.
            </returns>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists but it is not supported 
            by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The physical resources 
            necessary to the creation of the Material Object are out of limits.
            </exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">The operation is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists but 
            it is not supported by the current implementation</exception>
            <exception cref="T:CapeOpen.ECapeNoMemory">The physical memory necessary to the 
            creation of the Material Object is out of limit.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
            other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetOverallProp(System.String,System.String,System.Double[]@)">
            <summary>
            Retrieves non-constant Physical Property values for the overall mixture.
            </summary>
            <remarks>
            <para>
            The Physical Property values returned by GetOverallProp refer to the overall 
            mixture. These values are set by calling the SetOverallProp method. Overall 
            mixture Physical Properties are not calculated by components that implement 
            the ICapeThermoMaterial interface. The property values are only used as 
            input specifications for the CalcEquilibrium method of a component that 
            implements the ICapeThermoEquilibriumRoutine interface.
            </para>
            <para>It is expected that this method will normally be able to provide 
            Physical Property values on any basis, i.e. it should be able to convert 
            values from the basis on which they are stored to the basis requested. This 
            operation will not always be possible. For example, if the molecular weight 
            is not known for one or more Compounds, it is not possible to convert 
            between a mass basis and a molar basis.
            </para>
            <para>Although the result of some calls to GetOverallProp will be a single 
            value, the return type is CapeArrayDouble and the method must always return 
            an array even if it contains only a single element.</para>
            </remarks>
            <param name="results"> A double array containing the results vector of 
            Physical Property value(s) in SI units.</param>
            <param name="property">A String identifier of the Physical Property for 
            which values are requested. This must be one of the single-phase Physical 
            Properties or derivatives that can be stored for the overall mixture. The 
            standard identifiers are listed in sections 7.5.5 and 7.6.
            </param>
            <param name="basis">A String indicating the basis of the results. Valid 
            settings are: “Mass” for Physical Properties per unit mass or “Mole” for 
            molar properties. Use UNDEFINED as a place holder for a Physical Property 
            for which basis does not apply. See section 7.5.5 for details.
            </param>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetOverallProp is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists but 
            it is not supported by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">The Physical Property 
            required is not available from the Material Object, possibly for the basis 
            requested. This exception is raised when a Physical Property value has not 
            been set following a call to the CreateMaterial or ClearAllProps methods.
            </exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value was passed, for example UNDEFINED for property.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites are not 
            valid. The necessary initialisation has not been performed or has failed.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
            other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetOverallTPFraction(System.Double@,System.Double@,System.Double[]@)">
             <summary>
             Retrieves temperature, pressure and composition for the overall mixture.
             </summary>
             <remarks>
             <para>
            This method is provided to make it easier for developers to make efficient 
             use of the CAPEOPEN interfaces. It returns the most frequently requested 
             information from a Material Object in a single call.
             </para>
             <para>
             There is no choice of basis in this method. The composition is always 
             returned as mole fractions.
             </para>
             </remarks>
             <param name="temperature">A reference to a double Temperature (in K)</param>
             <param name="pressure">A reference to a double Pressure (in Pa)</param>
             <param name="composition">A reference to an array of doubles containing 
             the  Composition (mole fractions)</param>
             <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetOverallProp is “not” 
             implemented even if this method can be called for reasons of compatibility 
             with the CAPE-OPEN standards. That is to say that the operation exists but 
             it is not supported by the current implementation.</exception>
             <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">The Physical Property 
             required is not available from the Material Object, possibly for the basis 
             requested. This exception is raised when a Physical Property value has not 
             been set following a call to the CreateMaterial or ClearAllProps methods.
             </exception>
             <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites are not 
             valid. The necessary initialisation has not been performed or has failed.</exception>
             <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
             other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetPresentPhases(System.String[]@,CapeOpen.CapePhaseStatus[]@)">
            <summary>
            Returns Phase labels for the Phases that are currently present in the 
            Material Object.
            </summary>
            <remarks>
            <para>
            This method is intended to work in conjunction with the SetPresentPhases 
            method. Together these methods provide a means of communication between a 
            PME (or another client) and an Equilibrium Calculator (or other component 
            that implements the ICapeThermoEquilibriumRoutine interface). The following 
            sequence of operations is envisaged.
            </para>
            <para>1. Prior to requesting an Equilibrium Calculation, a PME will use the 
            SetPresentPhases method to define a list of Phases that may be considered in 
            the Equilibrium Calculation. Typically, this is necessary because an 
            Equilibrium Calculator may be capable of handling a large number of Phases 
            but for a particular application, it may be known that only certain Phases 
            will be involved. For example, if the complete Phase list contains Phases 
            with the following labels (with the obvious interpretation): vapour, 
            hydrocarbonLiquid and aqueousLiquid and it is required to model a liquid 
            decanter, the present Phases might be set to hydrocarbonLiquid and 
            aqueousLiquid.</para>
            <para>2. The GetPresentPhases method is then used by the CalcEquilibrium 
            method of the ICapeThermoEquilibriumRoutine interface to obtain the list 
            of Phase labels corresponding to the Phases that may be present at 
            equilibrium.</para>
            <para>3. The Equilibrium Calculation determines which Phases actually 
            co-exist at equilibrium. This list of Phases may be a sub-set of the Phases 
            considered because some Phases may not be present at the prevailing 
            conditions. For example, if the amount of water is sufficiently small the 
            aqueousLiquid Phase in the above example may not exist because all the water 
            dissolves in the hydrocarbonLiquid Phase.</para>
            <para>4. The CalcEquilibrium method uses the SetPresentPhases method to indicate 
            the Phases present following the equilibrium calculation (and sets the phase 
            properties).</para>
            <para>5. The PME uses the GetPresentPhases method to find out the Phases present 
            following the calculation and it can then use the GetSinglePhaseProp or 
            GetTPFraction methods to get the Phase properties.</para>
            <para>To indicate that a Phase is ‘present’ in a Material Object (or other 
            component that implements the ICapeThermoMaterial interface) it must be 
            specified by the SetPresentPhases method of the ICapeThermoMaterial 
            interface. Even if a Phase is present, it does not imply that any Physical 
            Properties are actually set unless the phaseStatus is Cape_AtEquilibrium 
            or Cape_Estimates (see below). </para>
            <para>If no Phases are present, UNDEFINED should be returned for both the 
            phaseLabels and phaseStatus arguments.</para>
            <para>The phaseStatus argument contains as many entries as there are Phase 
            labels. The valid settings are listed in the following table:</para>
            <para>Cape_UnknownPhaseStatus - This is the normal setting when a Phase is
            specified as being available for an Equilibrium Calculation.</para>
            <para>Cape_AtEquilibrium - The Phase has been set as present as a result of 
            an Equilibrium Calculation.</para>
            <para> Cape_Estimates - Estimates of the equilibrium state have been set in 
            the Material Object.</para>
            <para>All the Phases with a status of Cape_AtEquilibrium have values of 
            temperature, pressure, composition and Phase fraction set that correspond 
            to an equilibrium state, i.e. equal temperature, pressure and fugacities of 
            each Compound. Phases with a Cape_Estimates status have values of temperature,
            pressure, composition and Phase fraction set in the Material Object. These 
            values are available for use by an Equilibrium Calculator component to 
            initialise an Equilibrium Calculation. The stored values are available but 
            there is no guarantee that they will be used.
            </para>
            <para>
            Using the ClearAllProps method results in a Material Object that is in 
            the same state as when it was first created. It is an alternative to using 
            the CreateMaterial method but it is expected to have a smaller overhead in 
            operating system resources.
            </para>
            </remarks>
            <param name="phaseLabels">A reference to a String array that contains the 
            list of Phase labels (identifiers – names) for the Phases present in the 
            Material Object. The Phase labels in the Material Object must be a
            subset of the labels returned by the GetPhaseList method of the 
            ICapeThermoPhases interface.</param>
            <param name="phaseStatus">A CapeArrayEnumeration which is an array of 
            Phase status flags corresponding to each of the Phase labels. 
            See description below.</param>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists but 
            it is not supported by the current implementation</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
            other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetSinglePhaseProp(System.String,System.String,System.String,System.Double[]@)">
             <summary>
             Retrieves single-phase non-constant Physical Property values for a mixture.
             </summary>
             <remarks>
             <para>The results argument returned by GetSinglePhaseProp is either a 
             CapeArrayDouble that contains one or more numerical values, e.g. temperature, 
             or a CapeInterface that may be used to retrieve single-phase Physical 
             Properties described by a more complex data structure, e.g. distributed 
             properties.</para>
             <para>Although the result of some calls to GetSinglePhaseProp may be a 
             single numerical value, the return type for numerical values is 
             CapeArrayDouble and in such a case the method must return an array even if 
             it contains only a single element.</para>
             <para>A Phase is ‘present’ in a Material if its identifier is returned by 
             the GetPresentPhases method. An exception is raised by the GetSinglePhaseProp 
             method if the Phase specified is not present. Even if a Phase is present, 
             this does not mean that any Physical Properties are available.</para>
             <para>The Physical Property values returned by GetSinglePhaseProp refer to 
             a single Phase. These values may be set by the SetSinglePhaseProp method, 
             which may be called directly, or by other methods such as the CalcSinglePhaseProp 
             method of the ICapeThermoPropertyRoutine interface or the CalcEquilibrium 
             method of the ICapeThermoEquilibriumRoutine interface. Note: Physical 
             Properties that depend on more than one Phase, for example surface tension 
             or K-values, are returned by the GetTwoPhaseProp method.</para>
             <para>It is expected that this method will normally be able to provide 
             Physical Property values on any basis, i.e. it should be able to convert 
             values from the basis on which they are stored to the basis requested. This 
             operation will not always be possible. For example, if the molecular weight 
             is not known for one or more Compounds, it is not possible to convert from 
             mass fractions or mass flows to mole fractions or molar flows.</para>
             </remarks>
             <param name="property">CapeString The identifier of the Physical Property 
             for which values are requested. This must be one of the single-phase Physical 
             Properties or derivatives. The standard identifiers are listed in sections 
             7.5.5 and 7.6.</param>
             <param name="phaseLabel">CapeString Phase label of the Phase for which 
             the Physical Property is required. The Phase label must be one of the 
            identifiers returned by the GetPresentPhases method of this interface.</param>
             <param name="basis">CapeString Basis of the results. Valid settings are: 
             “Mass” for Physical Properties per unit mass or “Mole” for molar properties. 
             Use UNDEFINED as a place holder for a Physical Property for which basis does 
             not apply. See section 7.5.5 for details.</param>
             <param name="results">CapeVariant Results vector (CapeArrayDouble) 
             containing Physical Property value(s) in SI units or CapeInterface (see 
             notes).	</param>
             <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” 
             implemented even if this method can be called for reasons of compatibility 
             with the CAPE-OPEN standards. That is to say that the operation exists but 
             it is not supported by the current implementation</exception>
             <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">The property required is 
             not available from the Material Object possibly for the Phase label or 
             basis requested. This exception is raised when a property value has not been 
             set following a call to the CreateMaterial or the value has been erased by 
             a call to the ClearAllProps methods.</exception>
             <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
             value was passed: for example UNDEFINED for property, or an unrecognised 
             identifier for phaseLabel.</exception>
             <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites are not 
             valid. The necessary initialisation has not been performed, or has failed. 
             This exception is returned if the Phase specified does not exist.</exception>
             <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
             other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetTPFraction(System.String,System.Double@,System.Double@,System.Double[]@)">
            <summary>
            Retrieves temperature, pressure and composition for a Phase.
            </summary>
            <remarks>
            <para>
            This method is provided to make it easier for developers to make efficient 
            use of the CAPEOPEN interfaces. It returns the most frequently requested 
            information from a Material Object in a single call.
            </para>
            <para>There is no choice of basis in this method. The composition is always 
            returned as mole fractions.
            </para>
            <para>To get the equivalent information for the overall mixture the 
            GetOverallTPFraction method of the ICapeThermoMaterial interface should be 
            used.
            </para>
            </remarks>
            <returns>
            No return.
            </returns>
            <param name="phaseLabel">Phase label of the Phase for which the property 
            is required. The Phase label must be one of the identifiers returned by the 
            GetPresentPhases method of this interface.</param>
            <param name="temperature">Temperature (in K)</param>
            <param name="pressure">Pressure (in Pa)</param>
            <param name="composition">Composition (mole fractions)</param>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetTPFraction is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists but 
            it is not supported by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">One of the properties is 
            not available from the Material Object. This exception is raised when a 
            property value has not been set following a call to the CreateMaterial or 
            the value has been erased by a call to the ClearAllProps methods.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value was passed: for example UNDEFINED for property, or an unrecognised 
            identifier for phaseLabel.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites are not 
            valid. The necessary initialisation has not been performed, or has failed. 
            This exception is returned if the Phase specified does not exist.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
            other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetTwoPhaseProp(System.String,System.String[],System.String,System.Double[]@)">
             <summary>
             Retrieves two-phase non-constant Physical Property values for a mixture.
             </summary>
             <remarks>
             <para>
            The results argument returned by GetTwoPhaseProp is either a CapeArrayDouble 
             that contains one or more numerical values, e.g. kvalues, or a CapeInterface 
             that may be used to retrieve 2-phase Physical Properties described by a more 
             complex data structure, e.g.distributed Physical Properties.
             </para>
             <para>Although the result of some calls to GetTwoPhaseProp may be a single 
             numerical value, the return type for numerical values is CapeArrayDouble and 
             in such a case the method must return an array even if it contains only a 
             single element.
            </para>
             <para>A Phase is ‘present’ in a Material if its identifier is returned by 
             the GetPresentPhases method. An exception is raised by the GetTwoPhaseProp 
             method if any of the Phases specified is not present. Even if all Phases are 
             present, this does not mean that any Physical Properties are available.
            </para>
             <para>The Physical Property values returned by GetTwoPhaseProp depend on two 
             Phases, for example surface tension or K-values. These values may be set by 
             the SetTwoPhaseProp method that may be called directly, or by other methods 
             such as the CalcTwoPhaseProp method of the ICapeThermoPropertyRoutine 
             interface, or the CalcEquilibrium method of the ICapeThermoEquilibriumRoutine 
             interface. Note: Physical Properties that depend on a single Phase are 
             returned by the GetSinglePhaseProp method.
            </para>
             <para>It is expected that this method will normally be able to provide 
             Physical Property values on any basis, i.e. it should be able to convert 
             values from the basis on which they are stored to the basis requested. This 
             operation will not always be possible. For example, if the molecular weight 
             is not known for one or more Compounds, it is not possible to convert between 
             a mass basis and a molar basis.
            </para>
             <para>If a composition derivative is requested this means that the 
             derivatives are returned for both Phases in the order in which the Phase 
             labels are specified. The number of values returned for a composition 
             derivative will depend on the dimensionality of the property. For example,
             if there are N Compounds then the results vector for the surface tension 
             derivative will contain N composition derivative values for the first Phase, 
             followed by N composition derivative values for the second Phase. For K-value 
             derivative there will be N2 derivative values for the first phase followed by 
             N2 values for the second phase in the order defined in 7.6.2. 
            </para>
             </remarks>
             <param name="property">The identifier of the property for which values are
             requested. This must be one of the two-phase Physical Properties or Physical 
             Property derivatives listed in sections 7.5.6 and 7.6.</param>
             <param name="phaseLabels">List of Phase labels of the Phases for which the
             property is required. The Phase labels must be two of the identifiers 
             returned by the GetPhaseList method of the Material Object.</param>
             <param name="basis">Basis of the results. Valid settings are: “Mass” for
             Physical Properties per unit mass or “Mole” for molar properties. Use 
             UNDEFINED as a place holder for a Physical Property for which basis does not 
             apply. See section 7.5.5 for details.</param>
             <param name="results">Results vector (CapeArrayDouble) containing property
             value(s) in SI units or CapeInterface (see notes).</param>
             <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
             this method can be called for reasons of compatibility with the CAPE-OPEN 
             standards. That is to say that the operation exists, but it is not supported 
             by the current implementation. This could be the case if two-phase non-constant 
             Physical Properties are not required by the PME and so there is no particular 
             need to implement this method.</exception>
             <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">The property required is 
             not available from the Material Object possibly for the Phases or basis 
             requested.</exception>
             <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites are not 
             valid. This exception is raised when a call to the SetTwoPhaseProp method 
             has not been performed, or has failed, or when one or more of the Phases 
             referenced does not exist.</exception>
             <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
             value was passed: for example, UNDEFINED for property, or an unrecognised 
             identifier in phaseLabels.</exception>
             <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
             other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.SetOverallProp(System.String,System.String,System.Double[])">
            <summary>
            Sets non-constant property values for the overall mixture.
            </summary>
            <remarks>
            <para>The property values set by SetOverallProp refer to the overall mixture. 
            These values are retrieved by calling the GetOverallProp method. Overall 
            mixture properties are not calculated by components that implement the 
            ICapeThermoMaterial interface. The property values are only used as input 
            specifications for the CalcEquilibrium method of a component that implements 
            the ICapeThermoEquilibriumRoutine interface.</para>
            <para>Although some properties set by calls to SetOverallProp will have a 
            single value, the type of argument values is CapeArrayDouble and the method 
            must always be called with values as an array even if it contains only a 
            single element.</para>
            </remarks>
            <param name="property"> CapeString The identifier of the property for which 
            values are set. This must be one of the single-phase properties or derivatives 
            that can be stored for the overall mixture. The standard identifiers are 
            listed in sections 7.5.5 and 7.6.</param>
            <param name="basis">Basis of the results. Valid settings are: “Mass” for
            Physical Properties per unit mass or “Mole” for molar properties. Use 
            UNDEFINED as a place holder for a Physical Property for which basis does not 
            apply. See section 7.5.5 for details.</param>
            <param name="values">Values to set for the property.</param>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported 
            by the current implementation. This method may not be required if the PME 
            does not deal with any single-phase property.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value was passed, that is a value that does not belong to the valid list 
            described above, for example UNDEFINED for property.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfBounds">One or more of the entries in the 
            values argument is outside of the range of values accepted by the Material 
            Object.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the SetSinglePhaseProp operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.SetPresentPhases(System.String[],CapeOpen.CapePhaseStatus[])">
             <summary>
             Allows the PME or the Property Package to specify the list of Phases that 
             are currently present.
             </summary>
             <remarks>
             <para>SetPresentPhases may be used:</para>
             <para>• to restrict an Equilibrium Calculation (using the CalcEquilibrium 
             method of a component that implements the ICapeThermoEquilibriumRoutine 
             interface) to a subset of the Phases supported by the Property Package 
             component;</para>
             <para>• when the component that implements the ICapeThermoEquilibriumRoutine 
             interface needs to specify which Phases are present in a Material Object 
             after an Equilibrium Calculation has been performed.</para>
             <para>If a Phase in the list is already present, its Physical Properties are 
             unchanged by the action of this method. Any Phases not in the list when 
             SetPresentPhases is called are removed from the Material Object. This means 
             that any Physical Property values that may have been stored on the removed 
             Phases are no longer available (i.e. a call to GetSinglePhaseProp or 
             GetTwoPhaseProp including this Phase will return an exception). A call to 
             the GetPresentPhases method of the Material Object will return the same list 
             as specified by SetPresentPhases.</para>
             <para>The phaseStatus argument must contain as many entries as there are 
             Phase labels. The valid settings are listed in the following table:</para>
             <para>Cape_UnknownPhaseStatus - This is the normal setting when a Phase is 
             specified as being available for an Equilibrium Calculation.</para>
             <para>Cape_AtEquilibrium - The Phase has been set as present as a result of 
             an Equilibrium Calculation.</para>
             <para>Cape_Estimates - Estimates of the equilibrium state have been set in 
             the Material Object.</para>
             <para>All the Phases with a status of Cape_AtEquilibrium must have 
             properties that correspond to an equilibrium state, i.e. equal temperature, 
             pressure and fugacities of each Compound (this does not imply that the 
             fugacities are set as a result of the Equilibrium Calculation). The
             Cape_AtEquilibrium status should be set by the CalcEquilibrium method of a 
             component that implements the ICapeThermoEquilibriumRoutine interface 
             following a successful Equilibrium Calculation. If the temperature, pressure 
             or composition of an equilibrium Phase is changed, the Material Object 
             implementation is responsible for resetting the status of the Phase to 
             Cape_UnknownPhaseStatus. Other property values stored for that Phase should 
             not be affected.</para>
             <para>Phases with an Estimates status must have values of temperature, 
            pressure, composition and phase fraction set in the Material Object. These 
             values are available for use by an Equilibrium Calculator component to 
             initialise an Equilibrium Calculation. The stored values are available but 
             there is no guarantee that they will be used.</para>
             </remarks>
             <param name="phaseLabels"> CapeArrayString The list of Phase labels for 
             the Phases present. The Phase labels in the Material Object must be a
             subset of the labels returned by the GetPhaseList method of the 
             ICapeThermoPhases interface.</param>
             <param name="phaseStatus">Array of Phase status flags corresponding to 
             each of the Phase labels. See description below.</param>
             <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
             this method can be called for reasons of compatibility with the CAPE-OPEN 
             standards. That is to say that the operation exists, but it is not supported 
             by the current implementation.</exception>
             <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
             value was passed, that is a value that does not belong to the valid list 
             described above, for example if phaseLabels contains UNDEFINED or 
             phaseStatus contains a value that is not in the above table.</exception>
             <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when 
             other error(s), specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.SetSinglePhaseProp(System.String,System.String,System.String,System.Double[])">
            <summary>
            Sets single-phase non-constant property values for a mixture.
            </summary>
            <remarks>
            <para>The values argument of SetSinglePhaseProp is either a CapeArrayDouble 
            that contains one or more numerical values to be set for a property, e.g. 
            temperature, or a CapeInterface that may be used to set single-phase 
            properties described by a more complex data structure, e.g. distributed 
            properties.</para>
            <para>Although some properties set by calls to SetSinglePhaseProp will have a 
            single numerical value, the type of the values argument for numerical values 
            is CapeArrayDouble and in such a case the method must be called with values 
            containing an array even if it contains only a single element.</para>
            <para>The property values set by SetSinglePhaseProp refer to a single Phase. 
            Properties that depend on more than one Phase, for example surface tension or 
            K-values, are set by the SetTwoPhaseProp method of the Material Object.</para>
            <para>Before SetSinglePhaseProp can be used, the phase referenced must have 
            been created using the SetPresentPhases method.</para>
            </remarks>
            <param name="prop">The identifier of the property for which values are 
            set. This must be one of the single-phase properties or derivatives. The 
            standard identifiers are listed in sections 7.5.5 and 7.6.</param>
            <param name="phaseLabel">Phase label of the Phase for which the property is 
            set. The phase label must be one of the strings returned by the 
            GetPresentPhases method of this interface.</param>
            <param name="basis">Basis of the results. Valid settings are: “Mass” for
            Physical Properties per unit mass or “Mole” for molar properties. Use 
            UNDEFINED as a place holder for a Physical Property for which basis does not 
            apply. See section 7.5.5 for details.</param>
            <param name="values">Values to set for the property (CapeArrayDouble) or
            CapeInterface (see notes). </param>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists but it is not supported by
            the current implementation. This method may not be required if the PME does 
            not deal with any single-phase properties.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value was passed, that is a value that does not belong to the valid list 
            described above, for example UNDEFINED for property.</exception> 
            <exception cref="T:CapeOpen.ECapeOutOfBounds">One or more of the entries in the 
            values argument is outside of the range of values accepted by the Material 
            Object.</exception> 
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites are not 
            valid. The phase referenced has not been created using SetPresentPhases.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the SetSinglePhaseProp operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.SetTwoPhaseProp(System.String,System.String[],System.String,System.Double[])">
            <summary>
            Sets two-phase non-constant property values for a mixture.
            </summary>
            <remarks>
            <para>The values argument of SetTwoPhaseProp is either a CapeArrayDouble that 
            contains one or more numerical values to be set for a property, e.g. kvalues, 
            or a CapeInterface that may be used to set two-phase properties described by 
            a more complex data structure, e.g. distributed properties.</para>
            <para>Although some properties set by calls to SetTwoPhaseProp will have a 
            single numerical value, the type of the values argument for numerical values 
            is CapeArrayDouble and in such a case the method must be called with the 
            values argument containing an array even if it contains only a single element.</para>
            <para>The Physical Property values set by SetTwoPhaseProp depend on two 
            Phases, for example surface tension or K-values. Properties that depend on a 
            single Phase are set by the SetSinglePhaseProp method.</para>
            <para>If a Physical Property with composition derivative is specified, the 
            derivative values will be set for both Phases in the order in which the Phase 
            labels are specified. The number of values returned for a composition 
            derivative will depend on the property. For example, if there are N Compounds 
            then the values vector for the surface tension derivative will contain N 
            composition derivative values for the first Phase, followed by N composition 
            derivative values for the second Phase. For K-values there will be N2 
            derivative values for the first phase followed by N2 values for the second 
            phase in the order defined in 7.6.2.</para>
            <para>Before SetTwoPhaseProp can be used, all the Phases referenced must have 
            been created using the SetPresentPhases method</para>
            </remarks>
            <param name="property">The property for which values are set in the 
            Material Object. This must be one of the two-phase properties or derivatives 
            included in sections 7.5.6 and 7.6.</param>
            <param name="phaseLabels">Phase labels of the Phases for 
            which the property is set. The Phase labels must be two of the identifiers 
            returned by the GetPhaseList method of the ICapeThermoPhases interface.</param>
            <param name="basis">Basis of the results. Valid settings are: “Mass” for
            Physical Properties per unit mass or “Mole” for molar properties. Use 
            UNDEFINED as a place holder for a Physical Property for which basis does not 
            apply. See section 7.5.5 for details.</param>
            <param name="values">Value(s) to set for the property (CapeArrayDouble) or
            CapeInterface (see notes).</param>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists but it is not supported by
            the current implementation. This method may not be required if the PME does 
            not deal with any single-phase properties.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value was passed, that is a value that does not belong to the valid list 
            described above, for example UNDEFINED for property.</exception> 
            <exception cref="T:CapeOpen.ECapeOutOfBounds">One or more of the entries in the 
            values argument is outside of the range of values accepted by the Material 
            Object.</exception> 
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites are not 
            valid. The phase referenced has not been created using SetPresentPhases.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the SetSinglePhaseProp operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.CalcAndGetLnPhi(System.String,System.Double,System.Double,System.Double[],System.Int32,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>This method is used to calculate the natural logarithm of the 
            fugacity coefficients (and optionally their derivatives) in a single Phase 
            mixture. The values of temperature, pressure and composition are specified in 
            the argument list and the results are also returned through the argument list.
            </summary>
            <param name="phaseLabel">Phase label of the Phase for which the properties 
            are to be calculated. The Phase label must be one of the strings returned by 
            the GetPhaseList method on the ICapeThermoPhases interface.</param>
            <param name="temperature">The temperature (K) for the calculation.</param>
            <param name="pressure">The pressure (Pa) for the calculation.</param>
            <param name="moleNumbers">Number of moles of each Compound in the mixture.</param>
            <param name="fFlags">Code indicating whether natural logarithm of the 
            fugacity coefficients and/or derivatives should be calculated (see notes).
            </param>
            <param name="lnPhi">Natural logarithm of the fugacity coefficients (if
            requested).</param>
            <param name="lnPhiDT">Derivatives of natural logarithm of the fugacity
            coefficients w.r.t. temperature (if requested).</param>
            <param name="lnPhiDP">Derivatives of natural logarithm of the fugacity
            coefficients w.r.t. pressure (if requested).</param>
            <param name="lnPhiDn">Derivatives of natural logarithm of the fugacity
            coefficients w.r.t. mole numbers (if requested).</param>
            <remarks>
            <para>This method is provided to allow the natural logarithm of the fugacity 
            coefficient, which is the most commonly used thermodynamic property, to be 
            calculated and returned in a highly efficient manner.</para>
            <para>The temperature, pressure and composition (mole numbers) for the 
            calculation are specified by the arguments and are not obtained from the 
            Material Object by a separate request. Likewise, any quantities calculated are 
            returned through the arguments and are not stored in the Material Object. The 
            state of the Material Object is not affected by calling this method. It should 
            be noted however, that prior to calling CalcAndGetLnPhi a valid Material 
            Object must have been defined by calling the SetMaterial method on the
            ICapeThermoMaterialContext interface of the component that implements the
            ICapeThermoPropertyRoutine interface. The compounds in the Material Object 
            must have been identified and the number of values supplied in the moleNumbers
            argument must be equal to the number of Compounds in the Material Object.
            </para>
            <para>The fugacity coefficient information is returned as the natural 
            logarithm of the fugacity coefficient. This is because thermodynamic models 
            naturally provide the natural logarithm of this quantity and also a wider 
            range of values may be safely returned.</para>
            <para>The quantities actually calculated and returned by this method are 
            controlled by an integer code fFlags. The code is formed by summing 
            contributions for the property and each derivative required using the 
            enumerated constants eCapeCalculationCode (defined in the
            Thermo version 1.1 IDL) shown in the following table. For example, to 
            calculate log fugacity coefficients and their T-derivatives the fFlags 
            argument would be set to CAPE_LOG_FUGACITY_COEFFICIENTS + CAPE_T_DERIVATIVE.
            </para>
            <table border="1">
            <tr>
            <th>Calculation Type</th>
            <th>Enumeration Value</th>
            <th>Numerical Value</th>
            </tr>
            <tr>
            <td>no calculation</td>
            <td>CAPE_NO_CALCULATION</td>
            <td>0</td>
            </tr>
            <tr>
            <td>log fugacity coefficients</td>
            <td>CAPE_LOG_FUGACITY_COEFFICIENTS</td>
            <td>1</td>
            </tr>
            <tr>
            <td>T-derivative</td>
            <td>CAPE_T_DERIVATIVE</td>
            <td>2</td>
            </tr>
            <tr>
            <td>P-derivative</td>
            <td>CAPE_P_DERIVATIVE</td>
            <td>4</td>
            </tr>
            <tr>
            <td>mole number derivatives</td>
            <td>CAPE_MOLE_NUMBERS_DERIVATIVES</td>
            <td>8</td>
            </tr>
            </table>	
            <para>If CalcAndGetLnPhi is called with fFlags set to CAPE_NO_CALCULATION no 
            property values are returned.</para>
            <para>A typical sequence of operations for this method when implemented by a 
            Property Package component would be:
            </para>
            <para>
            - Check that the phaseLabel specified is valid.
            </para>
            <para>
            - Check that the moleNumbers array contains the number of values expected
            </para>
            <para>
            (should be consistent with the last call to the SetMaterial method).
            </para>
            <para>
            - Calculate the requested properties/derivatives at the T/P/composition specified in the argument list.
            </para>
            <para>
            - Store values for the properties/derivatives in the corresponding arguments.
            </para>
            <para>Note that this calculation can be carried out irrespective of whether the Phase actually exists in the Material Object.
            </para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported by 
            the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeLimitedImpl">Would be raised if the one or more of the 
            properties requested cannot be returned because the calculation is not 
            implemented.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The necessary pre-requisite operation has 
            not been called prior to the operation request. For example, the 
            ICapeThermoMaterial interface has not been passed via a SetMaterial call prior
            to calling this method.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites for the 
            Property Calculation are not valid. Forexample, the composition of the phase is 
            not defined, the number of Compounds in the Material Object is zero or not 
            consistent with the moleNumbers argument or any other necessary input information 
            is not available.</exception>
            <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">At least one item in the 
            requested properties cannot be returned. This could be because the property 
            cannot be calculated at the specified conditions or for the specified Phase. 
            If the property calculation is not implemented then ECapeLimitedImpl should 
            be returned.</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">One of the property calculations has 
            failed. For example if one of the iterative solution procedures in the model 
            has run out of iterations, or has converged to a wrong solution.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value is passed, for example an unrecognised value, or UNDEFINED for the 
            phaseLabel argument.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.CalcSinglePhaseProp(System.String[],System.String)">
            <summary>CalcSinglePhaseProp is used to calculate properties and property 
            derivatives of a mixture in a single Phase at the current values of 
            temperature, pressure and composition set in the Material Object. 
            CalcSinglePhaseProp does not perform phase Equilibrium Calculations.
            </summary>
            <param name="props">The list of identifiers for the single-phase properties 
            or derivatives to be calculated. See sections 7.5.5 and 7.6 for the standard 
            identifiers.</param>
            <param name="phaseLabel">Phase label of the Phase for which the properties 
            are to be calculated. The Phase label must be one of the strings returned by 
            the GetPhaseList method on the ICapeThermoPhases interface.</param>
            <remarks>
            <para>CalcSinglePhaseProp calculates properties, such as enthalpy or viscosity 
            that are defined for a single Phase. Physical Properties that depend on more 
            than one Phase, for example surface tension or K-values, are handled by 
            CalcTwoPhaseProp method.</para>
            <para>Components that implement this method must get the input specification 
            for the calculation (temperature, pressure and composition) from the associated 
            Material Object and set the results in the Material Object.</para>
            <para>Thermodynamic and Physical Properties Components, such as a Property 
            Package or Property Calculator, must implement the ICapeThermoMaterialContext 
            interface so that an ICapeThermoMaterial interface can be passed via the 
            SetMaterial method.</para>
            <para>A typical sequence of operations for CalcSinglePhaseProp when implemented
            by a Property Package component would be:</para>
            <para>- Check that the phaseLabel specified is valid.</para>
            <para>- Use the GetTPFraction method (of the Material Object specified in the 
            last call to the SetMaterial method) to get the temperature, pressure and 
            composition of the specified Phase.</para>
            <para>- Calculate the properties.</para>
            <para>- Store values for the properties of the Phase in the Material Object 
            using the SetSinglePhaseProp method of the ICapeThermoMaterial interface.</para>
            <para>CalcSinglePhaseProp will request the input Property values it requires 
            from the Material Object through GetSinglePhaseProp calls. If a requested 
            property is not available, the exception raised will be 
            ECapeThrmPropertyNotAvailable. If this error occurs then the Property Package 
            can return it to the client, or request a different property. Material Object
            implementations must be able to supply property values using the client’s 
            choice of basis by implementing conversion from one basis to another.</para>
            <para>Clients should not assume that Phase fractions and Compound fractions in 
            a Material Object are normalised. Fraction values may also lie outside the 
            range 0 to 1. If fractions are not normalised, or are outside the expected 
            range, it is the responsibility of the Property Package to decide how to deal 
            with the situation.</para>
            <para>It is recommended that properties are requested one at a time in order 
            to simplify error handling. However, it is recognised that there are cases 
            where the potential efficiency gains of requesting several properties 
            simultaneously are more important. One such example might be when a property 
            and its derivatives are required.</para>
            <para>If a client uses multiple properties in a call and one of them fails 
            then the whole call should be considered to have failed. This implies that no 
            value should be written back to the Material Object by the Property Package 
            until it is known that the whole request can be satisfied.</para>
            <para>It is likely that a PME might request values of properties for a Phase at 
            conditions of temperature, pressure and composition where the Phase does not 
            exist (according to the mathematical/physical models used to represent 
            properties). The exception ECapeThrmPropertyNotAvailable may be raised or an 
            extrapolated value may be returned.</para>
            <para>It is responsibility of the implementer to decide how to handle this 
            circumstance.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if this
            method can be called for reasons of compatibility with the CAPE-OPEN standards. 
            That is to say that the operation exists, but it is not supported by the 
            current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeLimitedImpl">Would be raised if the one or more of the 
            properties requested cannot be returned because the calculation (of the 
            particular property) is not implemented. This exception should also be raised 
            (rather than ECapeInvalidArgument) if the props argument is not recognised 
            because the list of properties in section 7.5.5 is not intended to be 
            exhaustive and an unrecognised property identifier may be valid. If no 
            properties at all are supported ECapeNoImpl should be raised (see above).</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The necessary pre-requisite operation has 
            not been called prior to the operation request. For example, the 
            ICapeThermoMaterial interface has not been passed via a SetMaterial call prior 
            to calling this method.</exception> 
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites for the 
            property calculation are not valid. For example, the composition of the phases
            is not defined or any other necessary input information is not available.</exception>
            <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">At least one item in the 
            requested properties cannot be returned. This could be because the property 
            cannot be calculated at the specified conditions or for the specified phase. 
            If the property calculation is not implemented then ECapeLimitedImpl should be 
            returned.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.CalcTwoPhaseProp(System.String[],System.String[])">
            <summary>CalcTwoPhaseProp is used to calculate mixture properties and property 
            derivatives that depend on two Phases at the current values of temperature, 
            pressure and composition set in the Material Object. It does not perform 
            Equilibrium Calculations.</summary>
            <param name="props">The list of identifiers for properties to be calculated.
            This must be one or more of the supported two-phase properties and derivatives 
            (as given by the GetTwoPhasePropList method). The standard identifiers for 
            two-phase properties are given in section 7.5.6 and 7.6.</param>
            <param name="phaseLabels">Phase labels of the phases for which the properties 
            are to be calculated. The phase labels must be two of the strings returned by 
            the GetPhaseList method on the ICapeThermoPhases interface.</param>
            <remarks>
            <para>CalcTwoPhaseProp calculates the values of properties such as surface 
            tension or K-values. Properties that pertain to a single Phase are handled by 
            the CalcSinglePhaseProp method of the ICapeThermoPropertyRoutine interface.
            Components that implement this method must get the input specification for the 
            calculation (temperature, pressure and composition) from the associated 
            Material Object and set the results in the Material Object.</para>
            <para>Components such as a Property Package or Property Calculator must 
            implement the ICapeThermoMaterialContext interface so that an 
            ICapeThermoMaterial interface can be passed via the SetMaterial method.</para>
            <para>A typical sequence of operations for CalcTwoPhaseProp when implemented by
            a Property Package component would be:</para>
            <para>- Check that the phaseLabels specified are valid.</para>
            <para>- Use the GetTPFraction method (of the Material Object specified in the 
            last call to the SetMaterial method) to get the temperature, pressure and 
            composition of the specified Phases.</para>
            <para>- Calculate the properties.</para>
            <para>- Store values for the properties in the Material Object using the 
            SetTwoPhaseProp method of the ICapeThermoMaterial interface.</para>
            <para>CalcTwoPhaseProp will request the values it requires from the Material Object 
            through GetTPFraction or GetSinglePhaseProp calls. If a requested property is 
            not available, the exception raised will be ECapeThrmPropertyNotAvailable. If 
            this error occurs, then the Property Package can return it to the client, or 
            request a different property. Material Object implementations must be able to 
            supply property values using the client choice of basis by implementing 
            conversion from one basis to another.</para>
            <para>Clients should not assume that Phase fractions and Compound fractions in 
            a Material Object are normalised. Fraction values may also lie outside the 
            range 0 to 1. If fractions are not normalised, or are outside the expected 
            range, it is the responsibility of the Property Package to decide how to deal 
            with the situation.</para>
            <para>It is recommended that properties are requested one at a time in order to 
            simplify error handling. However, it is recognised that there are cases where 
            the potential efficiency gains of requesting several properties simultaneously 
            are more important. One such example might be when a property and its 
            derivatives are required.</para>
            <para>If a client uses multiple properties in a call and one of them fails, then the 
            whole call should be considered to have failed. This implies that no value 
            should be written back to the Material Object by the Property Package until 
            it is known that the whole request can be satisfied.</para>
            <para>CalcTwoPhaseProp must be called separately for each combination of Phase
            groupings. For example, vapour-liquid K-values have to be calculated in a 
            separate call from liquid-liquid K-values.</para>
            <para>Two-phase properties may not be meaningful unless the temperatures and 
            pressures of all Phases are identical. It is the responsibility of the Property 
            Package to check such conditions and to raise an exception if appropriate.</para>
            <para>It is likely that a PME might request values of properties for Phases at 
            conditions of temperature, pressure and composition where one or both of the 
            Phases do not exist (according to the mathematical/physical models used to 
            represent properties). The exception ECapeThrmPropertyNotAvailable may be 
            raised or an extrapolated value may be returned. It is responsibility of the 
            implementer to decide how to handle this circumstance.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if this 
            method can be called for reasons of compatibility with the CAPE-OPEN standards. 
            That is to say that the operation exists, but it is not supported by the 
            current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeLimitedImpl">Would be raised if the one or more of the 
            properties requested cannot be returned because the calculation (of the 
            particular property) is not implemented. This exception should also be raised 
            (rather than ECapeInvalidArgument) if the props argument is not recognised 
            because the list of properties in section 7.5.6 is not intended to be 
            exhaustive and an unrecognised property identifier may be valid. If no 
            properties at all are supported ECapeNoImpl should be raised (see above).</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The necessary pre-requisite operation has 
            not been called prior to the operation request. For example, the 
            ICapeThermoMaterial interface has not been passed via a SetMaterial call 
            prior to calling this method.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites for the 
            property calculation are not valid. For example, the composition of one of the 
            Phases is not defined, or any other necessary input information is not 
            available.</exception>
            <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">At least one item in the 
            requested properties cannot be returned. This could be because the property 
            cannot be calculated at the specified conditions or for the specified Phase. 
            If the property calculation is not implemented then ECapeLimitedImpl should be 
            returned.</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">One of the property calculations has 
            failed. For example if one of the iterative solution procedures in the model 
            has run out of iterations, or has converged to a wrong solution.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value is passed, for example an unrecognised value or UNDEFINED for the 
            phaseLabels argument or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.CheckSinglePhasePropSpec(System.String,System.String)">
            <summary>Checks whether it is possible to calculate a property with the 
            CalcSinglePhaseProp method for a given Phase.</summary>
            <param name="property">The identifier of the property to check. To be valid 
            this must be one of the supported single-phase properties or derivatives (as 
            given by the GetSinglePhasePropList method).</param>
            <param name="phaseLabel">The Phase label for the calculation check. This must
            be one of the labels returned by the GetPhaseList method on the 
            ICapeThermoPhases interface.</param>
            <returns> A boolean set to True if the combination of property and phaseLabel
            is supported or False if not supported.</returns>
            <remarks>
            <para>The result of the check should only depend on the capabilities and 
            configuration (Compounds and Phases present) of the component that implements 
            the ICapeThermoPropertyRoutine interface (eg. a Property Package). It should 
            not depend on whether a Material Object has been set nor on the state 
            (temperature, pressure, composition etc.), or configuration of a Material 
            Object that might be set.</para>
            <para>It is expected that the PME, or other client, will use this method to 
            check whether the properties it requires are supported by the Property Package
            when the package is imported. If any essential properties are not available, 
            the import process should be aborted.</para>
            <para>If either the property or the phaseLabel arguments are not recognised by 
            the component that implements the ICapeThermoPropertyRoutine interface this 
            method should return False.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation CheckSinglePhasePropSpec is 
            “not” implemented even if this method can be called for reasons of 
            compatibility with the CAPE-OPEN standards. That is to say that the operation 
            exists, but it is not supported by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The necessary pre-requisite operation has
            not been called prior to the operation request. The ICapeThermoMaterial 
            interface has not been passed via a SetMaterial call prior to calling this 
            method.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites for the 
            property calculation are not valid. For example, if a prior call to the 
            SetMaterial method of the ICapeThermoMaterialContext interface has failed to 
            provide a valid Material Object.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">One or more of the input arguments is 
            not valid: for example, UNDEFINED value for the property argument or the 
            phaseLabel argument.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the CheckSinglePhasePropSpec operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.CheckTwoPhasePropSpec(System.String,System.String[])">
            <summary>Checks whether it is possible to calculate a property with the 
            CalcTwoPhaseProp method for a given set of Phases.</summary>
            <param name="property">The identifier of the property to check. To be valid 
            this must be one of the supported two-phase properties (including derivatives), 
            as given by the GetTwoPhasePropList method.</param>
            <param name="phaseLabels">Phase labels of the Phases for which the properties 
            are to be calculated. The Phase labels must be two of the identifiers returned 
            by the GetPhaseList method on the ICapeThermoPhases interface.</param>
            <returns> A boolean Set to True if the combination of property and
            phaseLabels is supported, or False if not supported.</returns>
            <remarks>
            <para>The result of the check should only depend on the capabilities and 
            configuration (Compounds and Phases present) of the component that implements 
            the ICapeThermoPropertyRoutine interface (eg. a Property Package). It should 
            not depend on whether a Material Object has been set nor on the state 
            (temperature, pressure, composition etc.), or configuration of a Material 
            Object that might be set.</para>
            <para>It is expected that the PME, or other client, will use this method to 
            check whether the properties it requires are supported by the Property Package 
            when the Property Package is imported. If any essential properties are not 
            available, the import process should be aborted.</para>
            <para>If either the property argument or the values in the phaseLabels 
            arguments are not recognised by the component that implements the 
            ICapeThermoPropertyRoutine interface this method should return False.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation CheckTwoPhasePropSpec is “not” 
            implemented even if this method can be called for reasons of compatibility with 
            the CAPE-OPEN standards. That is to say that the operation exists, but it is 
            not supported by the current implementation. This may be the case if no 
            two-phase property is supported.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The necessary pre-requisite operation has 
            not been called prior to the operation request. The ICapeThermoMaterial 
            interface has not been passed via a SetMaterial call prior to calling this 
            method.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">The pre-requisites for the 
            property calculation are not valid. For example, if a prior call to the 
            SetMaterial method of the ICapeThermoMaterialContext interface has failed to 
            provide a valid Material Object.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">One or more of the input arguments is 
            not valid. For example, UNDEFINED value for the property argument or the 
            phaseLabels argument or number of elements in phaseLabels array not equal to 
            two.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the CheckTwoPhasePropSpec operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetSinglePhasePropList">
            <summary>Returns the list of supported non-constant single-phase Physical 
            Properties.</summary>
            <returns>List of all supported non-constant single-phase property identifiers. 
            The standard single-phase property identifiers are listed in section 7.5.5.
            </returns>
            <remarks>
            <para>A non-constant property depends on the state of the Material Object. </para>
            <para>Single-phase properties, e.g. enthalpy, only depend on the state of one 
            phase. GetSinglePhasePropList must return all the single-phase properties that 
            can be calculated by CalcSinglePhaseProp. If derivatives can be calculated 
            these must also be returned.</para>
            <para>If no single-phase properties are supported this method should return 
            UNDEFINED.</para>
            <para>To get the list of supported two-phase properties, use 
            GetTwoPhasePropList.</para>
            <para>A component that implements this method may return non-constant 
            single-phase property identifiers which do not belong to the list defined in 
            section 7.5.5. However, these proprietary identifiers may not be understood by 
            most of the clients of this component.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported by 
            the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the GetSinglePhasePropList operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetTwoPhasePropList">
            <summary>Returns the list of supported non-constant two-phase properties.</summary>
            <returns>List of all supported non-constant two-phase property identifiers. 
            The standard two-phase property identifiers are listed in section 7.5.6.</returns>
            <remarks>
            <para>A non-constant property depends on the state of the Material Object. 
            Two-phase properties are those that depend on more than one co-existing phase, 
            e.g. K-values.</para>
            <para>GetTwoPhasePropList must return all the properties that can be calculated 
            by CalcTwoPhaseProp. If derivatives can be calculated, these must also be 
            returned.</para>
            <para>If no two-phase properties are supported this method should return 
            UNDEFINED.</para>
            <para>To check whether a property can be evaluated for a particular set of 
            phase labels use the CheckTwoPhasePropSpec method.</para>
            <para>A component that implements this method may return non-constant 
            two-phase property identifiers which do not belong to the list defined in 
            section 7.5.6. However, these proprietary identifiers may not be understood by 
            most of the clients of this component.</para>
            <para>To get the list of supported single-phase properties, use 
            GetSinglePhasePropList.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if this
            method can be called for reasons of compatibility with the CAPE-OPEN standards. 
            That is to say that the operation exists, but it is not supported by the 
            current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the GetTwoPhasePropList operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.CalcEquilibrium(System.String[],System.String[],System.String)">
            <summary> CalcEquilibrium is used to calculate the amounts and compositions 
            of Phases at equilibrium. CalcEquilibrium will calculate temperature and/or 
            pressure if these are not among the two specifications that are mandatory for 
            each Equilibrium Calculation considered.</summary>
            <remarks>
            <para>The specification1 and specification2 arguments provide the information 
            necessary to retrieve the values of two specifications, for example the 
            pressure and temperature, for the Equilibrium Calculation. The CheckEquilibriumSpec 
            method can be used to check for supported specifications. Each specification 
            variable contains a sequence of strings in the order defined in the following 
            table (hence, the specification arguments may have 3 or 4 items):<para>
            <para>property identifier The property identifier can be any of the identifiers 
            listed in section 7.5.5 but only certain property specifications will normally 
            be supported by any Equilibrium Routine.</para>
            basis The basis for the property value. Valid settings for basis are given in 
            section 7.4. Use UNDEFINED as a placeholder for a property for which basis does
            not apply. For most Equilibrium Specifications, the result of the calculation
            is not dependent on the basis, but, for example, for phase fraction 
            specifications the basis (Mole or Mass) does make a difference.</para>
            <para>phase label The phase label denotes the Phase to which the specification 
            applies. It must either be one of the labels returned by GetPresentPhases, or 
            the special value “Overall”.</para>
            compound identifier (optional)The compound identifier allows for specifications 
            that depend on a particular Compound. This item of the specification array is 
            optional and may be omitted. In case of a specification without compound 
            identifier, the array element may be present and empty, or may be absent.</para>
            <para>Some examples of typical phase equilibrium specifications are given in 
            the table below.</para>
            <para>The values corresponding to the specifications in the argument list and 
            the overall composition of the mixture must be set in the associated Material 
            Object before a call to CalcEquilibrium.</para>
            <para>Components such as a Property Package or an Equilibrium Calculator must 
            implement the ICapeThermoMaterialContext interface, so that an 
            ICapeThermoMaterial interface can be passed via the SetMaterial method. It is 
            the responsibility of the implementation of CalcEquilibrium to validate the 
            Material Object before attempting a calculation.</para>
            <para>The Phases that will be considered in the Equilibrium Calculation are 
            those that exist in the Material Object, i.e. the list of phases specified in 
            a SetPresentPhases call. This provides a way for a client to specify whether, 
            for example, a vapour-liquid, liquid-liquid, or vapourliquid-liquid calculation 
            is required. CalcEquilibrium must use the GetPresentPhases method to retrieve 
            the list of Phases and the associated Phase status flags. The Phase status 
            flags may be used by the client to provide information about the Phases, for 
            example whether estimates of the equilibrium state are provided. See the 
            description of the GetPresentPhases and SetPresentPhases methods of the 
            ICapeThermoMaterial interface for details. When the Equilibrium Calculation 
            has been completed successfully, the SetPresentPhases method must be used to 
            specify which Phases are present at equilibrium and the Phase status flags for 
            the phases should be set to Cape_AtEquilibrium. This must include any Phases 
            that are present in zero amount such as the liquid Phase in a dew point 
            calculation.</para>
            <para>Some types of Phase equilibrium specifications may result in more than 
            one solution. A common example of this is the case of a dew point calculation. 
            However, CalcEquilibrium can provide only one solution through the Material 
            Object. The solutionType argument allows the “Normal” or “Retrograde” solution 
            to be explicitly requested. When none of the specifications includes a phase 
            fraction, the solutionType argument should be set to “Unspecified”.</para>
            <para>The definition of “Normal” is</para>
            <para>where V F is the vapour phase fraction and the derivatives are at 
            equilibrium states. For “Retrograde” behaviour,</para>
            <para>CalcEquilibrium must set the amounts, compositions, temperature and 
            pressure for all Phases present at equilibrium, as well as the temperature and 
            pressure for the overall mixture if not set as part of the calculation 
            specifications. CalcEquilibrium must not set any other Physical Properties.</para>
            <para>As an example, the following sequence of operations might be performed 
            by CalcEquilibrium in the case of an Equilibrium Calculation at fixed pressure 
            and temperature:</para>
            <para>- With the ICapeThermoMaterial interface of the supplied Material Object:
            </para>
            <para>- Use the GetPresentPhases method to find the list of Phases that the 
            Equilibrium Calculation should consider.</para>
            <para>- With the ICapeThermoCompounds interface of the Material Object use the
            GetCompoundIds method to find which Compounds are present.</para>
            <para>- Use the GetOverallProp method to get the temperature, pressure and 
            composition for the overall mixture.</para>
            <para>- Perform the Equilibrium Calculation.</para>
            <para>- Use SetPresentPhases to specify the Phases present at equilibrium and 
            set the Phase status flags to Cape_AtEquilibrium.</para>
            <para>- Use SetSinglePhaseProp to set pressure, temperature, Phase amount 
            (or Phase fraction) and composition for all Phases present.</para>
            </remarks>
            <param name="specification1">First specification for the Equilibrium 
            Calculation. The specification information is used to retrieve the value of
            the specification from the Material Object. See below for details.</param>
            <param name="specification2">Second specification for the Equilibrium 
            Calculation in the same format as specification1.</param>
            <param name="solutionType"><para>The identifier for the required solution type. 
            The standard identifiers are given in the following list:</para>
            <para>Unspecified</para>
            <para>Normal</para>
            <para>Retrograde</para>
            <para>The meaning of these terms is defined below in the notes. Other 
            identifiers may be supported but their interpretation is not part of the CO 
            standard.</para></param>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if this 
            method can be called for reasons of compatibility with the CAPE-OPEN standards. 
            That is to say that the operation exists, but it is not supported by the 
            current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The necessary pre-requisite operation has 
            not been called prior to the operation request. The ICapeThermoMaterial interface 
            has not been passed via a SetMaterial call prior to calling this method.</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">The Equilibrium Calculation could not be 
            solved. For example if the solver has run out of iterations, or has converged 
            to a trivial solution.</exception>
            <exception cref="T:CapeOpen.ECapeLimitedImpl">Would be raised if the Equilibrium Routine 
            is not able to perform the flash it has been asked to perform. For example, 
            the values given to the input specifications are valid, but the routine is not 
            able to perform a flash given a temperature and a Compound fraction. That 
            would imply a bad usage or no usage of CheckEquilibriumSpec method, which is 
            there to prevent calling CalcEquilibrium for a calculation which cannot be
            performed.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value is passed. It would be raised, for example, if a specification 
            identifier does not belong to the list of recognised identifiers. It would 
            also be raised if the value given to argument solutionType is not among 
            the three defined, or if UNDEFINED was used instead of a specification identifier.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation"><para>The pre-requisites for the Equilibrium 
            Calculation are not valid. For example:</para>
            <para>• The overall composition of the mixture is not defined.</para>
            <para>• The Material Object (set by a previous call to the SetMaterial method of the
            ICapeThermoMaterialContext interface) is not valid. This could be because no 
            Phases are present or because the Phases present are not recognised by the
            component that implements the ICapeThermoEquilibriumRoutine interface.</para>
            <para>• Any other necessary input information is not available.</para></exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.CheckEquilibriumSpec(System.String[],System.String[],System.String)">
            <summary>Checks whether the Property Package can support a particular type of 
            Equilibrium Calculation.</summary>
            <remarks>
            <para>The meaning of the specification1, specification2 and solutionType 
            arguments is the same as for the CalcEquilibrium method.</para>
            <para>The result of the check should only depend on the capabilities and 
            configuration (compounds and phases present) of the component that implements 
            the ICapeThermoEquilibriumRoutine interface (eg. a Property package). It should 
            not depend on whether a Material Object has been set nor on the state 
            (temperature, pressure, composition etc.) or configuration of a Material 
            Object that might be set.</para>
            <para>If solutionType, specification1 and specification2 arguments appear 
            valid but the actual specifications are not supported or not recognised a 
            False value should be returned.</para>
            </remarks>
            <param name="specification1">First specification for the Equilibrium 
            Calculation.</param>
            <param name="specification2">Second specification for the Equilibrium 
            Calculation.</param>
            <param name="solutionType">The required solution type.</param>
            <returns>Set to True if the combination of specifications and solutionType is 
            supported or False if not supported.</returns>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if this 
            method can be called for reasons of compatibility with the CAPE-OPEN standards. 
            That is to say that the operation exists, but it is not supported by the 
            current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value is passed, for example UNDEFINED for solutionType, specification1 or 
            specification2 argument.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetUniversalConstant(System.String)">
            <summary>Retrieves the value of a Universal Constant.</summary>
            <param name="constantId">Identifier of Universal Constant. The list of 
            constants supported should be obtained by using the GetUniversalConstList 
            method.</param>
            <returns>Value of Universal Constant. This could be a numeric or a string 
            value. For numeric values the units of measurement are specified in section 
            7.5.1.</returns>
            <remarks>Universal Constants (often called fundamental constants) are 
            quantities like the gas constant, or the Avogadro constant.</remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetUniversalConstant is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists, but 
            it is not supported by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">For example, UNDEFINED for constantId 
            argument is used, or value for constantId argument does not belong to the 
            list of recognised values.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the GetUniversalConstant operation, are not suitable.</exception>	
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetUniversalConstantList">
            <summary>Returns the identifiers of the supported Universal Constants.</summary>
            <returns>List of identifiers of Universal Constants. The list of standard 
            identifiers is given in section 7.5.1.</returns>
            <remarks>A component may return Universal Constant identifiers that do not 
            belong to the list defined in section 7.5.1. However, these proprietary 
            identifiers may not be understood by most of the clients of this component.
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetUniversalConstantList is 
            “not” implemented even if this method can be called for reasons of 
            compatibility with the CAPE-OPEN standards. That is to say that the operation 
            exists, but it is not supported by the current implementation. This may occur 
            when the Property Package does not support any Universal Constants, or if it
            does not want to provide values for any Universal Constants which may be used 
            within the Property Package.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the GetUniversalConstantList operation, are not suitable.
            </exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetNumPhases">
            <summary>Returns the number of Phases.</summary>
            <returns>The number of Phases supported.</returns>
            <remarks>The number of Phases returned by this method must be equal to the 
            number of Phase labels that are returned by the GetPhaseList method of this
            interface. It must be zero, or a positive number.</remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported
            by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetPhaseInfo(System.String,System.String)">
            <summary>Returns information on an attribute associated with a Phase for the 
            purpose of understanding what lies behind a Phase label.</summary>
            <param name="phaseLabel">A (single) Phase label. This must be one of the 
            values returned by GetPhaseList method.</param>
            <param name="phaseAttribute">One of the Phase attribute identifiers from the 
            table below.</param>
            <returns>The value corresponding to the Phase attribute identifier – see 
            table below.</returns>
            <remarks>
            <para>GetPhaseInfo is intended to allow a PME, or other client, to identify a
            Phase with an arbitrary label. A PME, or other client, will need to do this 
            to map stream data into a Material Object, or when importing a Property 
            Package. If the client cannot identify the Phase, it can ask the user to 
            provide a mapping based on the values of these properties.</para>
            <para>The list of supported Phase attributes is defined in the following 
            table:</para>
            <para>For example, the following information might be returned by a Property 
            Package component that supports a vapour Phase, an organic liquid Phase and 
            an aqueous liquid Phase:
            Phase label Gas Organic Aqueous
            StateOfAggregation Vapor Liquid Liquid
            KeyCompoundId UNDEFINED UNDEFINED Water
            ExcludedCompoundId UNDEFINED Water UNDEFINED
            DensityDescription UNDEFINED Light Heavy
            UserDescription The gas Phase The organic liquid
            Phase
            The aqueous liquid
            Phase 
            TypeOfSolid UNDEFINED UNDEFINED UNDEFINED</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists but it is not supported 
            by the current implementation..</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument"> – phaseLabel is not recognised, or 
            UNDEFINED, or phaseAttribute is not recognised.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for this operation, are not suitable..</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetPhaseList(System.String[]@,System.String[]@,System.String[]@)">
            <summary>
            Returns Phase labels and other important descriptive information for all the 
            Phases supported.
            </summary>
            <param name="phaseLabels">The list of Phase labels for the Phases supported. 
            A Phase label can be any string but each Phase must have a unique label. If, 
            for some reason, no Phases are supported an UNDEFINED value should be returned 
            for the phaseLabels. The number of Phase labels must also be equal to the 
            number of Phases returned by the GetNumPhases method.
            </param>
            <param name="stateOfAggregation">The physical State of Aggregation associated 
            with each of the Phases. This must be one of the following strings: ”Vapor”, 
            “Liquid”, “Solid” or “Unknown”. Each Phase must have a single State of 
            Aggregation. The value must not be left undefined, but may be set to “Unknown”.
            </param>
            <param name="keyCompoundId">The key Compound for the Phase. This must be the
            Compound identifier (as returned by GetCompoundList), or it may be undefined 
            in which case a UNDEFINED value is returned. The key Compound is an indication 
            of the Compound that is expected to be present in high concentration in the 
            Phase, e.g. water for an aqueous liquid phase. Each Phase can have a single 
            key Compound.
            </param>
            <remarks>
            <para>The Phase label allows the phase to be uniquely identified in methods of
            the ICapeThermoPhases interface and other CAPE-OPEN interfaces. The State of 
            Aggregation and key Compound provide a way for the PME, or other client, to 
            interpret the meaning of a Phase label in terms of the physical characteristics 
            of the Phase.</para>
            <para>All arrays returned by this method must be of the same length, i.e. 
            equal to the number of Phase labels.</para>
            <para>To get further information about a Phase, use the GetPhaseInfo method.
            </para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if this 
            method can be called for reasons of compatibility with the CAPE-OPEN standards. 
            That is to say that the operation exists, but it is not supported by the 
            current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetCompoundConstant(System.String[],System.String[])">
            <summary>Returns the values of constant Physical Properties for the specified Compounds.</summary>
            <remarks><para>The GetConstPropList method can be used in order to check 
            which constant Physical Properties are available.</para>
            <para>If the number of requested Physical Properties is P and the number of 
            Compounds is C, the propvals array will contain C*P variants. The first C 
            variants will be the values for the first requested Physical Property (one 
            variant for each Compound) followed by C values of constants for the second 
            Physical Property, and so on. The actual type of values returned (Double, 
            String, etc.) depends on the Physical Property as specified in section 7.5.2.</para>
            <para>Physical Properties are returned in a fixed set of units as specified 
            in section 7.5.2.</para>
            <para>If the compIds argument is set to UNDEFINED this is a request to return 
            property values for all compounds in the component that implements the 
            ICapeThermoCompounds interface with the compound order the same as that 
            returned by the GetCompoundList method. For example, if the interface is 
            implemented by a Property Package component the property request with compIds 
            set to UNDEFINED means all compounds in the Property Package rather than all 
            compounds in the Material Object passed to the Property package.</para>
            <para>If any Physical Property is not available for one or more Compounds, 
            then undefined values must be returned for those combinations and an 
            ECapeThrmPropertyNotAvailable exception must be raised. If the exception is 
            raised, the client should check all the values returned to determine which 
            is undefined.</para>
            </remarks>
            <param name="props">The list of Physical Property identifiers. Valid
            identifiers for constant Physical Properties are listed in
            section 7.5.2.</param>
            <param name="compIds">List of Compound identifiers for which constants are 
            to be retrieved. Set compIds = UNDEFINED to denote all Compounds in the 
            component that implements the ICapeThermoCompounds interface.</param>
            <returns>Values of constants for the specified Compounds.</returns>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetCompoundConstant is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists, but 
            it is not supported by the current implementation. This exception should be 
            raised if no compounds or no properties are supported.</exception>
            <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">At least one item in the 
            list of Physical Properties is not available for a particular Compound. This 
            exception is meant to be treated as a warning rather than as an error.</exception>
            <exception cref="T:CapeOpen.ECapeLimitedImpl">One or more Physical Properties are not 
            supported by the component that implements this interface. This exception 
            should also be raised if any element of the props argument is not recognised 
            since the list of Physical Properties in section 7.5.2 is not intended to be 
            exhaustive and an unrecognised Physical Property identifier may be valid. If
            no Physical Properties at all are supported ECapeNoImpl should be raised 
            (see above).</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The error to be raised if the 
            Property Package required the SetMaterial method to be called before calling 
            the GetCompoundConstant method. The error would not be raised when the 
            GetCompoundConstant method is implemented by a Material Object.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetCompoundList(System.String[]@,System.String[]@,System.String[]@,System.Double[]@,System.Double[]@,System.String[]@)">
             <summary>Returns the list of all Compounds. This includes the Compound 
             identifiers recognised and extra information that can be used to further 
             identify the Compounds.</summary>
             <remarks><para>If any item cannot be returned then the value should be set 
             to UNDEFINED. The same information can also be extracted using the 
             GetCompoundConstant method. The equivalences between GetCompoundList 
             arguments and Compound constant Physical Properties, as specified in section 
             7.5.2, is as follows:</para>
             <para>compIds - No equivalence. compIds is an artefact, which is assigned by 
             the component that implements the GetCompoundList method. This string will 
             normally contain a unique Compound identifier such as "benzene". It must be 
             used in all the arguments which are named “compIds” in the methods of the
            ICapeThermoCompounds and ICapeThermoMaterial interfaces.</para>
             <para>Formulae - chemicalFormula</para>
             <para>names - iupacName</para>
             <para>boilTemps - normalBoilingPoint</para>
             <para>molwts - molecularWeight</para>
             <para>casnos casRegistryNumber</para>
             <para>When the ICapeThermoCompounds interface is implemented by a Material 
             Object, the list of Compounds returned is fixed when the Material Object is 
             configured.</para>
             <para>For a Property Package component, the Property Package will normally 
             contain a limited set of Compounds selected for a particular application, 
             rather than all possible Compounds that could be available to a proprietary 
             Properties System.</para>
             <para>In order to identify the Compounds of a Property Package, the PME, or 
             other client, will use the casnos argument rather than the compIds. This is 
             because different PMEs may give different names to the same Compounds and the
             casnos is (almost always) unique. If the casnos is not available (e.g. for 
             petroleum fractions), or not unique, the other pieces of information returned 
             by GetCompoundList can be used to distinguish the Compounds. It should be 
             noted, however, that for communication with a Property Package a client must 
             use the Compound identifiers returned in the compIds argument.</para>
             </remarks>
             <param name="compIds">List of Compound identifiers</param>
             <param name="formulae">List of Compound formulae</param>
             <param name="names">List of Compound names.</param>
             <param name="boilTemps">List of boiling point temperatures.</param>
             <param name="molwts">List of molecular weights.</param>
             <param name="casnos">List of Chemical Abstract Service (CAS) Registry
             numbers.</param>
             <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetCompoundList is “not” 
             implemented even if this method can be called for reasons of compatibility
             with the CAPE-OPEN standards. That is to say that the operation exists, but 
             it is not supported by the current implementation.</exception>
             <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
             specified for the GetCompoundList operation, are not suitable.</exception>
             <exception cref="T:CapeOpen.ECapeBadInvOrder">The error to be raised if the Property 
             Package required the SetMaterial method to be called before calling the 
             GetCompoundList method. The error would not be raised when the 
             GetCompoundList method is implemented by a Material Object.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetConstPropList">
            <summary>
            Returns the list of supported constant Physical Properties.
            </summary>
            <returns>List of identifiers for all supported constant Physical Properties. 
            The standard constant property identifiers are listed in section 7.5.2.
            </returns>
            <remarks>
            <para>MGetConstPropList returns identifiers for all the constant Physical 
            Properties that can be retrieved by the GetCompoundConstant method. If no 
            properties are supported, UNDEFINED should be returned. The CAPE-OPEN 
            standards do not define a minimum list of Physical Properties to be made 
            available by a software component that implements the ICapeThermoCompounds 
            interface.</para>
            <para>A component that implements the ICapeThermoCompounds interface may 
            return constant Physical Property identifiers which do not belong to the 
            list defined in section 7.5.2.</para>
            <para>However, these proprietary identifiers may not be understood by most 
            of the clients of this component.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation GetConstPropList is “not” 
            implemented even if this method can be called for reasons of compatibility 
            with the CAPE-OPEN standards. That is to say that the operation exists, but 
            it is not supported by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the Get-ConstPropList operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The error to be raised if the 
            Property Package required the SetMaterial method to be called before calling 
            the GetConstPropList method. The error would not be raised when the 
            GetConstPropList method is implemented by a Material Object.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetNumCompounds">
            <summary>Returns the number of Compounds supported.</summary>
            <returns>Number of Compounds supported.</returns>
            <remarks>The number of Compounds returned by this method must be equal to 
            the number of Compound identifiers that are returned by the GetCompoundList 
            method of this interface. It must be zero or a positive number.</remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported 
            by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The error to be raised if the 
            Property Package required the SetMaterial method to be called before calling 
            the GetNumCompounds method. The error would not be raised when the 
            GetNumCompounds method is implemented by a Material Object.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetPDependentProperty(System.String[],System.Double,System.String[],System.Double[]@)">
            <summary>Returns the values of pressure-dependent Physical Properties for 
            the specified pure Compounds.</summary>
            <param name="props">The list of Physical Property identifiers. Valid
            identifiers for pressure-dependent Physical Properties are listed in section 
            7.5.4</param>
            <param name="pressure">Pressure (in Pa) at which Physical Properties are
            evaluated</param>
            <param name="compIds">List of Compound identifiers for which Physical
            Properties are to be retrieved. Set compIds = UNDEFINED to denote all 
            Compounds in the component that implements the ICapeThermoCompounds 
            interface.</param>
            <param name="propVals">&gt;Property values for the Compounds specified.</param>
            <remarks><para>The GetPDependentPropList method can be used in order to 
            check which Physical Properties are available.</para>
            <para>If the number of requested Physical Properties is P and the number 
            Compounds is C, the propvals array will contain C*P values. The first C 
            will be the values for the first requested Physical Property followed by C 
            values for the second Physical Property, and so on.</para>
            <para>Physical Properties are returned in a fixed set of units as specified 
            in section 7.5.4.</para>
            <para>If the compIds argument is set to UNDEFINED this is a request to return 
            property values for all compounds in the component that implements the 
            ICapeThermoCompounds interface with the compound order the same as that 
            returned by the GetCompoundList method. For example, if the interface is 
            implemented by a Property Package component the property request with compIds 
            set to UNDEFINED means all compounds in the Property Package rather than all 
            compounds in the Material Object passed to the Property package.</para>
            <para>If any Physical Property is not available for one or more Compounds, 
            then undefined valuesm must be returned for those combinations and an 
            ECapeThrmPropertyNotAvailable exception must be raised. If the exception is 
            raised, the client should check all the values returned to determine which is 
            undefined.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported 
            by the current implementation. This exception should be raised if no Compounds 
            or no Physical Properties are supported.</exception>
            <exception cref="T:CapeOpen.ECapeLimitedImpl">One or more Physical Properties are not 
            supported by the component that implements this interface. This exception 
            should also be raised (rather than ECapeInvalidArgument) if any element of 
            the props argument is not recognised since the list of Physical Properties 
            in section 7.5.4 is not intended to be exhaustive and an unrecognised
            Physical Property identifier may be valid. If no Physical Properties at all 
            are supported, ECapeNoImpl should be raised (see above).</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value is passed, for example UNDEFINED for argument props.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfBounds">The value of the pressure is outside of
            the range of values accepted by the Property Package.</exception>
            <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">At least one item in the 
            properties list is not available for a particular compound.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The error to be raised if the 
            Property Package required the SetMaterial method to be called before calling 
            the GetPDependentProperty method. The error would not be raised when the 
            GetPDependentProperty method is implemented by a Material Object.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetPDependentPropList">
            <summary>Returns the list of supported pressure-dependent properties.</summary>
            <returns>The list of Physical Property identifiers for all supported 
             pressure-dependent properties. The standard identifiers are listed in 
             section 7.5.4</returns>
             <remarks>
             <para>GetPDependentPropList returns identifiers for all the pressure-dependent 
             properties that can be retrieved by the GetPDependentProperty method. If no 
             properties are supported UNDEFINED should be returned. The CAPE-OPEN standards 
             do not define a minimum list of Physical Properties to be made available by 
             a software component that implements the ICapeThermoCompounds interface.</para>
             <para>A component that implements the ICapeThermoCompounds interface may 
             return identifiers which do not belong to the list defined in section 7.5.4. 
             However, these proprietary identifiers may not be understood by most of the 
             clients of this component.</para>
             </remarks>
             <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
             this method can be called for reasons of compatibility with the CAPE-OPEN 
             standards. That is to say that the operation exists, but it is not supported 
             by the current implementation.</exception>
             <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
             specified for the operation, are not suitable.</exception>
             <exception cref="T:CapeOpen.ECapeBadInvOrder">The error to be raised if the Property 
             Package required the SetMaterial method to be called before calling the 
             GetPDependentPropList method. The error would not be raised when the 
             GetPDependentPropList method is implemented by a Material Object.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetTDependentProperty(System.String[],System.Double,System.String[],System.Double[]@)">
            <summary>Returns the values of temperature-dependent Physical Properties for 
            the specified pure Compounds.</summary>
            <param name="props">The list of Physical Property identifiers. Valid
            identifiers for temperature-dependent Physical Properties are listed in 
            section 7.5.3</param>
            <param name="temperature">Temperature (in K) at which properties are 
            evaluated.</param>
            <param name="compIds">List of Compound identifiers for which Physical
            Properties are to be retrieved. Set compIds = UNDEFINED to denote all 
            Compounds in the component that implements the ICapeThermoCompounds 
            interface .</param>
            <param name="propVals">Physical Property values for the Compounds specified.
            </param>
            <remarks> <para>The GetTDependentPropList method can be used in order to 
            check which Physical Properties are available.</para>
            <para>If the number of requested Physical Properties is P and the number of 
            Compounds is C, the propvals array will contain C*P values. The first C will 
            be the values for the first requested Physical Property followed by C values 
            for the second Physical Property, and so on.</para>
            <para>Properties are returned in a fixed set of units as specified in 
            section 7.5.3.</para>
            <para>If the compIds argument is set to UNDEFINED this is a request to return 
            property values for all compounds in the component that implements the 
            ICapeThermoCompounds interface with the compound order the same as that 
            returned by the GetCompoundList method. For example, if the interface is 
            implemented by a Property Package component the property request with compIds 
            set to UNDEFINED means all compounds in the Property Package rather than all 
            compounds in the Material Object passed to the Property package.</para>
            <para>If any Physical Property is not available for one or more Compounds, 
            then undefined values must be returned for those combinations and an 
            ECapeThrmPropertyNotAvailable exception must be raised. If the exception is 
            raised, the client should check all the values returned to determine which is 
            undefined.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl"> – The operation is “not” implemented even 
            if this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported 
            by the current implementation. This exception should be raised if no 
            Compounds or no Physical Properties are supported.</exception>
            <exception cref="T:CapeOpen.ECapeLimitedImpl">One or more Physical Properties are not
            supported by the component that implements this interface. This exception 
            should also be raised (rather than ECapeInvalidArgument) if any element of 
            the props argument is not recognised since the list of properties in section 
            7.5.3 is not intended to be exhaustive and an unrecognised Physical Property 
            identifier may be valid. If no properties at all are supported ECapeNoImpl 
            should be raised (see above).</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument 
            value is passed, for example UNDEFINED for argument props.</exception> 
            <exception cref="T:CapeOpen.ECapeOutOfBounds">The value of the temperature is outside
            of the range of values accepted by the Property Package.</exception>
            <exception cref="T:CapeOpen.ECapeThrmPropertyNotAvailable">At least one item in the 
            properties list is not available for a particular compound.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s), 
            specified for the operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder"> The error to be raised if the 
            Property Package required the SetMaterial method to be called before calling 
            the GetTDependentProperty method. The error would not be raised when the 
            GetTDependentProperty method is implemented by a Material Object.</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoMaterialWrapper.GetTDependentPropList">
            <summary>Returns the list of supported temperature-dependent Physical 
            Properties.</summary>
            <returns>The list of Physical Property identifiers for all supported 
            temperature-dependent properties. The standard identifiers are listed in 
            section 7.5.3</returns>
            <remarks><para>GetTDependentPropList returns identifiers for all the 
            temperature-dependent Physical Properties that can be retrieved by the 
            GetTDependentProperty method. If no properties are supported UNDEFINED 
            should be returned. The CAPE-OPEN standards do not define a minimum list of 
            properties to be made available by a software component that implements the 
            ICapeThermoCompounds interface.</para>
            <para>A component that implements the ICapeThermoCompounds interface may 
            return identifiers which do not belong to the list defined in section 
            7.5.3. However, these proprietary identifiers may not be understood by most 
            of the clients of this component.</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeNoImpl">The operation is “not” implemented even if 
            this method can be called for reasons of compatibility with the CAPE-OPEN 
            standards. That is to say that the operation exists, but it is not supported
            by the current implementation.</exception>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),
            specified for the operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">The error to be raised if the Property 
            Package required the SetMaterial method to be called before calling the 
            GetTDependentPropList method. The error would not be raised when the 
            GetTDependentPropList method is implemented by a Material Object.</exception>
        </member>
        <member name="T:CapeOpen.CapeThermoSystem">
            <summary>
            A class that implements the <see cref="T:CapeOpen.ICapeThermoSystem">ICapeThermoSystem</see> interface and provides access 
            to COM and .Net-based property packages available on the current computer.
            </summary>
            <remarks>
            <para>This class provides a list of all
            classes Property Packages registered with COM and all .Net-based property packages that are contained in the Global Assembly Cache.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.CapeThermoSystem.CapeOpen#ICapeThermoSystem#GetPropertyPackages">
            <summary>
            Get the list of available property packages
            </summary>
            <remarks>
            Returns StringArray of property pacakge names supported by the thermo system.
            </remarks>
            <returns>
            The returned set of supported property packages.
            A System.Object containing a String array marshalled from a COM Object.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoSystem.CapeOpen#ICapeThermoSystem#ResolvePropertyPackage(System.String)">
            <summary>
            Resolve a particular property package
            </summary>
            <remarks>
            Resolves referenced property package to a property package interface.
            </remarks>
            <returns>
            The Property Package Interface.
            </returns>
            <param name="propertyPackage">
            The property package to be resolved.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoSystem.#ctor(System.String,System.String)">
            <summary>Creates an instance of the CapeThermoSystem class with the name and description provided.</summary>
            <remarks>You can use this constructor to specify a 
            specific the name and description of the thermo system.
            </remarks>
            <param name = "name">The name of the PMC.</param>
            <param name = "description">The description of the PMC.</param>
        </member>
        <member name="M:CapeOpen.CapeThermoSystem.GetPropertyPackages">
            <summary>
            Get the list of available property packages
            </summary>
            <remarks>
            Returns StringArray of property pacakge names supported by the thermo system.
            </remarks>
            <returns>
            The returned set of supported property packages.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="M:CapeOpen.CapeThermoSystem.ResolvePropertyPackage(System.String)">
            <summary>
            Resolve a particular property package
            </summary>
            <remarks>
            Resolves referenced property package to a property package interface.
            </remarks>
            <returns>
            The Property Package Interface.
            </returns>
            <param name="propertyPackage">
            The property package to be resolved.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
        </member>
        <member name="T:CapeOpen.MaterialObjectWrapper">
            <summary>
            Wrapper class for COM-based CAPE-OPEN ICapeThermoMaterialObject material object.
            </summary>
            <remarks><para>
            This class is a wrapper class for COM-based CAPE-OPEN ICapeThermoMaterialObject material object.
            When you use this wrapper class, the lifecycle of the COM-based material is managed for you and the 
            COM Release() method is called on the material.</para>
            <para>
            In addition, this method converts the COM variants used in the <see cref="T:CapeOpen.ICapeThermoMaterialObject">
            ICapeThermoMaterialObject</see> interface to the desired .Net object types. This elimiates the need to convert the data types
            whne you use a COM-based CAPE-OPEN material object.
            </para>
            </remarks>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.#ctor(System.Object)">
            <summary>
            Creates a new instance of the MaterialObjectWrapper class
            </summary>
            <param name="materialObject">The material Object to be wrapped.</param>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.Dispose">
            <summary>
            Releases all resources used by the CapeIdentification object.
            </summary>
            <remarks>Call Dispose when you are finished using the CapeIdentification object. The Dispose method 
            leaves the CapeIdentification object in an unusable state. After calling Dispose, you must release 
            all references to the Component so the garbage collector can reclaim the memory that the CapeIdentification 
            object was occupying. For more information, see <see href="http://msdn.microsoft.com/en-us/library/498928w2.aspx">
            Cleaning Up Unmanaged Resources and Implementing a Dispose Method.</see></remarks> 
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the CapeIdentification object and optionally releases 
            the managed resources.
            </summary>
            <remarks><para>This method is called by the public <see href="http://msdn.microsoft.com/en-us/library/system.componentmodel.component.dispose.aspx">Dispose</see>see> 
            method and the <see href="http://msdn.microsoft.com/en-us/library/system.object.finalize.aspx">Finalize</see> method. 
            <bold>Dispose()</bold> invokes the protected <bold>Dispose(Boolean)</bold> method with the disposing
            parameter set to <bold>true</bold>. <see href="http://msdn.microsoft.com/en-us/library/system.object.finalize.aspx">Finalize</see> 
            invokes <bold>Dispose</bold> with disposing set to <bold>false</bold>.</para>
            <para>When the <italic>disposing</italic> parameter is <bold>true</bold>, this method releases all 
            resources held by any managed objects that this Component references. This method invokes the 
            <bold>Dispose()</bold> method of each referenced object.</para>
            <para><bold>Notes to Inheritors</bold></para>
            <para><bold>Dispose</bold> can be called multiple times by other objects. When overriding 
            <bold>Dispose(Boolean)</bold>, be careful not to reference objects that have been previously 
            disposed of in an earlier call to <bold>Dispose</bold>. For more information about how to 
            implement <bold>Dispose(Boolean)</bold>, see <see href="http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx">Implementing a Dispose Method</see>.</para>
            <para>For more information about <bold>Dispose</bold> and <see href="http://msdn.microsoft.com/en-us/library/system.object.finalize.aspx">Finalize</see>, 
            see <see href="http://msdn.microsoft.com/en-us/library/498928w2.aspx">Cleaning Up Unmanaged Resources</see> 
            and <see href="http://msdn.microsoft.com/en-us/library/ddae83kx.aspx">Overriding the Finalize Method</see>.</para>
            </remarks> 
            <param name = "disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.GetUniversalConstant(System.String[])">
            <summary>
            Get some universal constant(s)
            </summary>
            <remarks>
            Retrieves universal constants from the Property Package.
            </remarks>
            <returns>
            Values of the requested universal constants.
            </returns>
            <param name="props">
            List of universal constants to be retrieved.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.GetComponentConstant(System.String[],System.String[])">
            <summary>
            Get some pure component constant(s)
            </summary>
            <remarks>
            Retrieve component constants from the Property Package. See Notes for more 
            information.
            </remarks>
            <returns>
            Component Constant values returned from the Property Package for all the 
            components in the Material Object It is a Object containing a 1 dimensional 
            array of Objects. If we call P to the number of requested properties and C to 
            the number requested components the array will contain C*P Objects. The C 
            first ones (from position 0 to C-1) will be the values for the first requested 
            property (one Object for each component). After them (from position C to 2*C-1) 
            there will be the values of constants for the second requested property, and 
            so on.
            </returns>
            <param name="props">
            List of component constants.
            </param>
            <param name="compIds">
            List of component IDs for which constants are to be retrieved. Use a null value 
            for all components in the Material Object. 
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.CalcProp(System.String[],System.String[],System.String)">
            <summary>
            Calculate some properties
            </summary>
            <remarks>
            This method is responsible for doing all property calculations and delegating 
            these calculations to the associated thermo system. This method is further 
            defined in the descriptions of the CAPE-OPEN Calling Pattern and the User 
            Guide Section. See Notes for a more detailed explanation of the arguments and 
            CalcProp description in the notes for a general discussion of the method.
            </remarks>
            <param name="props">
            The List of Properties to be calculated.
            </param>
            <param name="phases">
            List of phases for which the properties are to be calculated.
            </param>
            <param name="calcType">
            Type of calculation: Mixture Property or Pure Component Property. For partial 
            property, such as fugacity coefficients of components in a mixture, use 
            “Mixture” CalcType. For pure component fugacity coefficients, use “Pure” 
            CalcType.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">ECapeSolvingError</exception>
            <exception cref="T:CapeOpen.ECapeOutOfBounds">ECapeOutOfBounds</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.GetProp(System.String,System.String,System.String[],System.String,System.String)">
            <summary>
            Get some pure component constant(s)
            </summary>
            <remarks>
            This method is responsible for retrieving the results from calculations from 
            the MaterialObject. See Notesfor a more detailed explanation of the arguments.
            </remarks>
            <returns>
            Results vector containing property values in SI units arranged by the defined 
            qualifiers. The array is one dimensional containing the properties, in order 
            of the "props" array for each of the compounds, in order of the compIds array. 
            </returns>
            <param name="property">
            The Property for which results are requested from the MaterialObject.
            </param>
            <param name="phase">
            The qualified phase for the results.
            </param>
            <param name="compIds">
            The qualified components for the results. Use a null value to specify all 
            components in the Material Object. For mixture property such as liquid 
            enthalpy, this qualifier is not required. Use emptyObject as place holder.
            </param>
            <param name="calcType">
            The qualified type of calculation for the results. (valid Calculation Types: 
            Pure and Mixture)
            </param>
            <param name="basis">
            Qualifies the basis of the result (i.e., mass /mole). Default is mole. Use 
            NULL for default or as place holder for property for which basis does not 
            apply (see also Specific properties.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.SetProp(System.String,System.String,System.String[],System.String,System.String,System.Double[])">
            <summary>
            Get some pure component constant(s)
            </summary>
            <remarks>
            This method is responsible for setting the values for properties of the 
            Material Object. See Notes for a more detailed explanation of the arguments.
            </remarks>
            <param name="property">
            The Property for which results are requested from the MaterialObject.
            </param>
            <param name="phase">
            The qualified phase for the results.
            </param>
            <param name="compIds">
            The qualified components for the results. emptyObject to specify all 
            components in the Material Object. For mixture property such as liquid 
            enthalpy, this qualifier is not required. Use emptyObject as place holder.
            </param>
            <param name="calcType">
            The qualified type of calculation for the results. (valid Calculation Types: 
            Pure and Mixture)
            </param>
            <param name="basis">
            Qualifies the basis of the result (i.e., mass /mole). Default is mole. Use 
            NULL for default or as place holder for property for which basis does not 
            apply (see also Specific properties.
            </param>
            <param name="values">
            Values to set for the property.
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.CalcEquilibrium(System.String,System.String[])">
            <summary>
            Calculate some equilibrium values
            </summary>
            <remarks>
            This method is responsible for delegating flash calculations to the 
            associated Property Package or Equilibrium Server. It must set the amounts, 
            compositions, temperature and pressure for all phases present at equilibrium, 
            as well as the temperature and pressure for the overall mixture, if not set 
            as part of the calculation specifications. See CalcProp and CalcEquilibrium 
            for more information.
            </remarks>
            <param name="flashType">
            The type of flash to be calculated.
            </param>
            <param name="props">
            Properties to be calculated at equilibrium. emptyObject for no properties. 
            If a list, then the property values should be set for each phase present at 
            equilibrium. 
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeBadInvOrder">ECapeBadInvOrder</exception>
            <exception cref="T:CapeOpen.ECapeSolvingError">ECapeSolvingError</exception>
            <exception cref="T:CapeOpen.ECapeOutOfBounds">ECapeOutOfBounds</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.SetIndependentVar(System.Object,System.Object)">
            <summary>
            Set the independent variable for the state
            </summary>
            <remarks>
            Sets the independent variable for a given Material Object.
            </remarks>
            <param name = "indVars">
            Independent variables to be set (see names for state variables for list of 
            valid variables). A System.Object containing a String array marshalled from 
            a COM Object.
            </param>
            <param name = "values">
            Values of independent variables.
            An array of doubles as a System.Object, which is marshalled as a Object 
            COM-based CAPE-OPEN. 
            </param>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.GetIndependentVar(System.String[])">
            <summary>
            Get the independent variable for the state
            </summary>
            <remarks>
            Sets the independent variable for a given Material Object.
            </remarks>
            <param name = "indVars">
            Independent variables to be set (see names for state variables for list of 
            valid variables).
            </param>
            <returns>
            Values of independent variables.
            COM-based CAPE-OPEN. 
            </returns>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.PropCheck(System.String[])">
            <summary>
            Check a property is valid
            </summary>
            <remarks>
            Checks to see if given properties can be calculated.
            </remarks>
            <returns>
            Returns Boolean List associated to list of properties to be checked.
            </returns>
            <param name="props">
            Properties to check. 
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.AvailableProps">
            <summary>
            Check which properties are available
            </summary>
            <remarks>
            Gets a list properties that have been calculated.
            </remarks>
            <returns>
            Properties for which results are available.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.RemoveResults(System.Object)">
            <summary>
            Remove any previously calculated results for given properties
            </summary>
            <remarks>
            Remove all or specified property results in the Material Object.
            </remarks>
            <param name = "props">
            Properties to be removed. emptyObject to remove all properties.
            </param>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.CreateMaterialObject">
            <summary>
            Create another empty material object
            </summary>
            <remarks>
            Create a Material Object from the parent Material Template of the current 
            Material Object. This is the same as using the CreateMaterialObject method 
            on the parent Material Template.
            </remarks> 
            <returns>
            The created/initialized Material Object.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.Duplicate">
            <summary>
            Duplicate this material object
            </summary>
            <remarks>
            Create a duplicate of the current Material Object.
            </remarks>
            <returns>
            The created/initialized Material Object.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeOutOfResources">ECapeOutOfResources</exception>
            <exception cref="T:CapeOpen.ECapeLicenceError">ECapeLicenceError</exception>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.ValidityCheck(System.String[])">
            <summary>
            Check the validity of the given properties
            </summary>
            <remarks>
            Checks the validity of the calculation.
            </remarks>
            <returns>
            Returns the reliability scale of the calculation.
            </returns>
            <param name="props">
            The properties for which reliability is checked. Null value to remove all 
            properties. 
            </param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.GetPropList">
            <summary>
            Get the list of properties
            </summary>
            <remarks>
            Returns list of properties supported by the property package and corresponding 
            CO Calculation Routines. The properties TEMPERATURE, PRESSURE, FRACTION, FLOW, 
            PHASEFRACTION, TOTALFLOW cannot be returned by GetPropList, since all 
            components must support them. Although the property identifier of derivative 
            properties is formed from the identifier of another property, the GetPropList 
            method will return the identifiers of all supported derivative and 
            non-derivative properties. For instance, a Property Package could return 
            the following list: enthalpy, enthalpy.Dtemperature, entropy, entropy.Dpressure.
            </remarks>
            <returns>
            String list of all supported properties of the property package.
            </returns>
        </member>
        <member name="M:CapeOpen.MaterialObjectWrapper.GetNumComponents">
            <summary>
            Get the number of components in this material object
            </summary>
            <remarks>
            Returns number of components in Material Object.
            </remarks>
            <returns>
            Number of components in the Material Object.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.MaterialObjectWrapper.ComponentName">
            <summary>
            Gets and sets the name of the component.
            </summary>
            <remarks>
            <para>A particular Use Case in a system may contain several CAPE-OPEN components 
            of the same class. The user should be able to assign different names and 
            descriptions to each instance in order to refer to them unambiguously and in a 
            user-friendly way. Since not always the software components that are able to 
            set these identifications and the software components that require this information 
            have been developed by the same vendor, a CAPE-OPEN standard for setting and 
            getting this information is required.</para>
            <para>So, the component will not usually set its own name and description: the 
            user of the component will do it.</para>
            </remarks>
            <value>The unique name of the component.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.MaterialObjectWrapper.ComponentDescription">
            <summary>
             Gets and sets the description of the component.
            </summary>
            <remarks>
            <para>A particular Use Case in a system may contain several CAPE-OPEN components 
            of the same class. The user should be able to assign different names and 
            descriptions to each instance in order to refer to them unambiguously and in a 
            user-friendly way. Since not always the software components that are able to 
            set these identifications and the software components that require this information 
            have been developed by the same vendor, a CAPE-OPEN standard for setting and 
            getting this information is required.</para>
            <para>So, the component will not usually set its own name and description: the 
            user of the component will do it.</para>
            </remarks>
            <value>The description of the component.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.MaterialObjectWrapper.ComponentIds">
            <summary>
            Get the component ids for this MO
            </summary>
            <remarks>
            Returns the list of components Ids of a given Material Object.
            </remarks>
            <returns>
            Te names of the compounds in the matieral object.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.MaterialObjectWrapper.PhaseIds">
            <summary>
            Get the phase ids for this MO
            </summary>
            <remarks>
            It returns the phases existing in the MO at that moment. The Overall phase 
            and multiphase identifiers cannot be returned by this method. See notes on 
            Existence of a phase for more information.
            </remarks>
            <returns>
            The phases present in the material.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.PortCollection">
            <summary>
            A type-safe collection of ICapePort objects.
            </summary>
            <remarks>
            <para>This collection uses the BindingList generic collection to create a collection that only
            objects that implement the <seealse cref="T:CapeOpen.ICapeUnitPort"/> interface. This class also implements the 
            ICustomTypeDescriptor to provide dynamic infomation about the collection.</para>
            <para>
            Since this class utilizes a generic collection class, .Net based objects can obtain 
            the Port objects directly by using the index of the object. The .Net collection is 0-index, that is, the 
            index of the first Port is 0, and the nth Port has an index of n-1.
            </para>
            <para>
            In addition, the collection can be accessed through the <see cref="T:CapeOpen.ICapeCollection"/> interface.
            The ICapeCollection members are implemented privately, making them available only available through the interface.
            </para>
            </remarks>
        </member>
        <member name="M:CapeOpen.PortCollection.CapeOpen#ICapeCollection#Count">
            <summary>
            Gets the number of items currently stored in the collection.
            </summary>
            <remarks>
            Gets the number of items currently stored in the collection.
            </remarks>
            <returns>
            Gets the number of items currently stored in the collection.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
        </member>
        <member name="M:CapeOpen.PortCollection.CapeOpen#ICapeCollection#Item(System.Object)">
            <summary>
            Gets the specific item stored within the collection, identified by its ICapeIdentification.ComponentName or 1-based index passed as an argument to the method.
            </summary>
            <remarks>
            The object will be a COM Variant.
            </remarks>
            <returns>
            Gets the number of items currently stored in the collection.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
            <exception cref="T:CapeOpen.ECapeFailedInitialisation">ECapeFailedInitialisation</exception>
            <exception cref="T:CapeOpen.ECapeOutOfBounds">ECapeOutOfBounds</exception>
        </member>
        <member name="M:CapeOpen.PortCollection.#ctor">
            <summary>
            Initailizes a new instance of the <see cref="T:CapeOpen.PortCollection"/> collection class.
            </summary>
            <remarks>This will create a new instance of the collection.
            </remarks>
        </member>
        <member name="M:CapeOpen.PortCollection.System#ICloneable#Clone">
            <summary>
            Creates a copy of the collection.
            </summary>
            <remarks><para>The clone method is used to create a deep copy of the entire collection,
            including a copy of the Ports contained in the collection.</para>
            </remarks>
            <returns>A copy of the current collection.</returns>
        </member>
        <member name="M:CapeOpen.PortCollection.OnComponentNameChanged(CapeOpen.NameChangedEventArgs)">
            <summary>
            Occurs when the user changes of the description of a component.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnComponentNameChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnComponentNameChanged</c> in a derived class, be sure to call the base class's <c>OnComponentNameChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.NameChangedEventArgs">NameChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.PortCollection.OnComponentDescriptionChanged(CapeOpen.DescriptionChangedEventArgs)">
            <summary>
            Occurs when the user changes of the description of a component.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnComponentDescriptionChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnComponentDescriptionChanged</c> in a derived class, be sure to call the base class's <c>OnComponentDescriptionChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.DescriptionChangedEventArgs">DescriptionChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="E:CapeOpen.PortCollection.ComponentNameChanged">
            <summary>
            Occurs when the user changes of the name of a component.
            </summary>
            <remarks>The event to be handles when the name of the PMC is changed.</remarks> 
        </member>
        <member name="E:CapeOpen.PortCollection.ComponentDescriptionChanged">
            <summary>
            Occurs when the user changes of the description of a component.
            </summary>
            <remarks>The event to be handles when the description of the PMC is changed.</remarks> 
        </member>
        <member name="P:CapeOpen.PortCollection.ComponentName">
            <summary>
            Gets and sets the name of the component.
            </summary>
            <remarks>
            <para>A particular Use Case in a system may contain several CAPE-OPEN components 
            of the same class. The user should be able to assign different names and 
            descriptions to each instance in order to refer to them unambiguously and in a 
            user-friendly way. Since not always the software components that are able to 
            set these identifications and the software components that require this information 
            have been developed by the same vendor, a CAPE-OPEN standard for setting and 
            getting this information is required.</para>
            <para>So, the component will not usually set its own name and description: the 
            user of the component will do it.</para>
            </remarks>
            <value>The unique name of the component.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.PortCollection.ComponentDescription">
            <summary>
             Gets and sets the description of the component.
            </summary>
            <remarks>
            <para>A particular Use Case in a system may contain several CAPE-OPEN components 
            of the same class. The user should be able to assign different names and 
            descriptions to each instance in order to refer to them unambiguously and in a 
            user-friendly way. Since not always the software components that are able to 
            set these identifications and the software components that require this information 
            have been developed by the same vendor, a CAPE-OPEN standard for setting and 
            getting this information is required.</para>
            <para>So, the component will not usually set its own name and description: the 
            user of the component will do it.</para>
            </remarks>
            <value>The description of the component.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.PortCollectionPropertyDescriptor">
            <summary>
            Summary description for CollectionPropertyDescriptor.
            </summary>
        </member>
        <member name="T:CapeOpen.ICapePetroFractions">
            <summary>
            ICapePetroFractions interface
            Provides methods to identify a CAPE-OPEN component.
            </summary>
        </member>
        <member name="M:CapeOpen.ICapePetroFractions.SetPetroBulkProp(System.String,System.String,System.Double)">
            <summary>
            Sets bulk characterization properties for the complete set of petroleum fractions
            </summary>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapePetroFractions.SetPetroCompoundProp(System.String,System.Object,System.String,System.Object)">
            <summary>
            Sets characterization properties for individual petroleum fractions
            </summary>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapePetroFractions.SetPetroCurveProp(System.String,System.String,System.Object,System.Object)">
            <summary>
            Sets characterization property cruves for the complete set of petroleum fractions
            </summary>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapePetroFractions.GetPetroBulkProp(System.String,System.String)">
            <summary>
            Gets bulk characterization properties for the complete set of petroleum fractions
            </summary>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapePetroFractions.GetPetroCompoundProp(System.String,System.Object,System.String)">
            <summary>
            Gets characterization properties for individual petroleum fractions
            </summary>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.ICapePetroFractions.GetPetroCurveProp(System.String,System.String)">
            <summary>
            Gets characterization property cruves for the complete set of petroleum fractions
            </summary>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="T:CapeOpen.CapeCompoundType">
            <summary>
            The type of compound for use in petroleum fractions
            </summary>
        </member>
        <member name="F:CapeOpen.CapeCompoundType.CAPE_COMPOUND_REAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:CapeOpen.CapeCompoundType.CAPE_COMPOUND_ION">
            <summary>
            
            </summary>
        </member>
        <member name="F:CapeOpen.CapeCompoundType.CAPE_COMPOUND_ASSAY">
            <summary>
            
            </summary>
        </member>
        <member name="T:CapeOpen.IOptionParameterSpecEvents">
            <summary>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:CapeOpen.IOptionParameterSpecEvents.ParameterDefaultValueChanged(System.Object,System.Object)">
            <summary>
            Occurs when the user changes of the default value of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterDefaultValueChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterDefaultValueChanged</c> in a derived class, be sure to call the base class's <c>OnParameterDefaultValueChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="M:CapeOpen.IOptionParameterSpecEvents.ParameterDefaultValueChanged(System.Object,System.Object)">ParameterDefaultValueChanged</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.IOptionParameterSpecEvents.ParameterOptionListChanged(System.Object,System.Object)">
            <summary>
            Occurs when the user changes of the lower bound of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnComponentNameChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnComponentNameChanged</c> in a derived class, be sure to call the base class's <c>OnComponentNameChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="T:CapeOpen.ParameterValueChangedEventArgs">ParameterValueChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.IOptionParameterSpecEvents.ParameterRestrictedToListChanged(System.Object,System.Object)">
            <summary>
            Occurs when the user changes of the upper bound of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterUpperBoundChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterUpperBoundChanged</c> in a derived class, be sure to call the base class's <c>OnParameterUpperBoundChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="T:CapeOpen.ParameterLowerBoundChangedEventArgs">ParameterUpperBoundChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.IOptionParameterSpecEvents.ParameterValidated(System.Object,System.Object)">
            <summary>
            Occurs when a parameter is validated.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterValidated</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterValidated</c> in a derived class, be sure to call the base class's <c>OnParameterValidated</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="T:CapeOpen.ParameterValidatedEventArgs">ParameterValidatedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="T:CapeOpen.OptionParameter">
            <summary>
            String Parameter class that implements the ICapeParameter and ICapeOptionParameterSpec CAPE-OPEN interfaces.
            </summary>
            <remarks>
            This class implements ICapeParameter, ICapeParameterSpec, ICapeOptionParameterSpec, and ICapeIdentification. 
            It returns either a string or a System.Object, which is converted to a Variant containing a BSTR by COM Interop.
            </remarks>
        </member>
        <member name="M:CapeOpen.OptionParameter.#ctor(System.String,System.String)">
            <summary>
            Constructor for the String-valued parameter
            </summary>
            <remarks>
            This constructor sets the ICapeIdentification.ComponentName of the 
            parameter. The parameter's value and default value are set to the value. 
            </remarks>
            <param name = "name">Sets as the ComponentName of the parameter's ICapeIdentification interface.</param>
            <param name = "value">Sets the inital value of the parameter.</param>
        </member>
        <member name="M:CapeOpen.OptionParameter.#ctor(System.String,System.String,System.String,System.String,System.String[],System.Boolean,CapeOpen.CapeParamMode)">
            <summary>
            Constructor for the boolean-valued parameter
            </summary>
            <remarks>
            This constructor sets the ICapeIdentification.ComponentName and 
            ICapeIdentification.ComponentDescription of the 
            parameter. The parameter's value and default value are set to the value. 
            Additionally, the parameters CapeParameterMode is set.
            </remarks>
            <param name = "name">Sets as the ComponentName of the parameter's ICapeIdentification interface.</param>
            <param name = "description">Sets as the ComponentDescription of the parameter's ICapeIdentification interface.</param>
            <param name = "value">Sets the inital value of the parameter.</param>
            <param name = "defaultValue">Sets the default value of the parameter.</param>
            <param name = "options">String array used as the list acceptable options.</param>
            <param name = "restricted">Sets whether the parameter value is restricted to values in the option list.</param>
            <param name = "mode">Sets the CapeParamMode mode of the parameter.</param>
        </member>
        <member name="M:CapeOpen.OptionParameter.OnParameterDefaultValueChanged(CapeOpen.ParameterDefaultValueChangedEventArgs)">
            <summary>
            Occurs when the user changes of the default value of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterDefaultValueChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterDefaultValueChanged</c> in a derived class, be sure to call the base class's <c>OnParameterDefaultValueChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="M:CapeOpen.OptionParameter.OnParameterDefaultValueChanged(CapeOpen.ParameterDefaultValueChangedEventArgs)">OnParameterDefaultValueChanged</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.OptionParameter.OnParameterOptionListChanged(CapeOpen.ParameterOptionListChangedEventArgs)">
            <summary>
            Occurs when the user changes of the option list of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterOptionListChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterOptionListChanged</c> in a derived class, be sure to call the base class's <c>OnParameterOptionListChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.ParameterValueChangedEventArgs">ParameterOptionListChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.OptionParameter.OnParameterRestrictedToListChanged(CapeOpen.ParameterRestrictedToListChangedEventArgs)">
            <summary>
            Occurs when the user changes of the upper bound of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterUpperBoundChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterUpperBoundChanged</c> in a derived class, be sure to call the base class's <c>OnParameterUpperBoundChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.ParameterLowerBoundChangedEventArgs">ParameterUpperBoundChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.OptionParameter.System#ICloneable#Clone">
            <summary>
            Creates a copy of the parameter.
            </summary>
            <remarks><para>The clone method is used to create a deep copy of the parameter.</para>
            </remarks>
            <returns>A copy of the current parameter.</returns>
        </member>
        <member name="M:CapeOpen.OptionParameter.Validate(System.String@)">
            <summary>
            Validates the current value of the parameter against the parameter's specification.
            </summary>
            <remarks>
            If the value of the <see cref="P:CapeOpen.OptionParameter.RestrictedToList">RestrictedToList</see>
            public is set to <c>true</c>, the parameter is valid only if the current value
            is included in the <see cref="P:CapeOpen.OptionParameter.OptionList">OptionList</see>. If the 
            value of <see cref="P:CapeOpen.OptionParameter.RestrictedToList">RestrictedToList</see> public is <c>false</c>
            any valid String is a valid value for the parameter.
            </remarks>
            <returns>True if the string argument is valid, false if it is not.</returns>
            <param name="message">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.OptionParameter.Reset">
            <summary>
            Sets the value of the parameter to its default value.
            </summary>
            <remarks>
             This method sets the parameter's value to the default value.
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.OptionParameter.Validate(System.String,System.String@)">
            <summary>
            Validates the value against the parameter's specification.
            </summary>
            <remarks>
            If the value of the <see cref="P:CapeOpen.OptionParameter.RestrictedToList">RestrictedToList</see>
            public is set to <c>true</c>, the value to be tested is a valid value for the 
            parameter if it is included in the 
            <see cref="P:CapeOpen.OptionParameter.OptionList">OptionList</see>. If the 
            value of <see cref="P:CapeOpen.OptionParameter.RestrictedToList">RestrictedToList</see> public is <c>false</c>
            any valid String is a valid value for the parameter.
            </remarks>
            <returns>True if the string argument is valid, false if it is not.</returns>
            <param name="value">The string to be tested for validity.</param>
            <param name="message">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.OptionParameter.CapeOpen#ICapeParameter#Specification">
            <summary>
            Gets the Specification for this Parameter.
            </summary>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.OptionParameter.CapeOpen#ICapeParameter#value">
            <summary>
            Gets and sets the value for this Parameter.
            </summary>
            <remarks>
            This value uses the System.Object data type for compatibility with 
            COM-based CAPE-OPEN.
            </remarks>
            <returns>System.Object</returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.OptionParameter.CapeOpen#ICapeParameterSpec#Dimensionality">
            <summary>
            Gets the dimensionality of the parameter.
            </summary>
            <returns>
            Null pointer.
            </returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.OptionParameter.CapeOpen#ICapeOptionParameterSpec#OptionList">
            <summary>
            Gets the list of valid values for the parameter if 'RestrictedtoList' public is true.
            </summary>
            <remarks>
            Used in validating the parameter if the <see cref="P:CapeOpen.OptionParameter.RestrictedToList">RestrictedToList</see>
            is set to <c>true</c>.
            </remarks>
            <value>
            String array as a System.Object, COM Variant containing a SafeArray of BSTR.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="E:CapeOpen.OptionParameter.ParameterDefaultValueChanged">
            <summary>
            Occurs when the user changes of the default value of the parameter changes.
            </summary>
        </member>
        <member name="E:CapeOpen.OptionParameter.ParameterOptionListChanged">
            <summary>
            Occurs when the user changes of the lower bound of the parameter changes.
            </summary>
        </member>
        <member name="E:CapeOpen.OptionParameter.ParameterRestrictedToListChanged">
            <summary>
            Occurs when the user changes of the upper bound of the parameter changes.
            </summary>
        </member>
        <member name="P:CapeOpen.OptionParameter.Value">
            <summary>
            Gets and sets the value of the parameter.
            </summary>
            <remarks>
            The value is returned as a String, which marshals as a BSTR to COM.
            </remarks>
            <returns>
            System.String
            </returns>
            <value>
            The value of the parameter.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.OptionParameter.Type">
            <summary>
            Gets the type of the parameter. 
            </summary>
            <remarks>
            Gets the <see cref="T:CapeOpen.CapeParamType"/> of the parameter for which this is a specification: real 
            (CAPE_REAL), integer(CAPE_INT), option(CAPE_OPTION), boolean(CAPE_BOOLEAN) 
            or array(CAPE_ARRAY).
            </remarks>
            <value>The parameter type. </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.OptionParameter.DefaultValue">
            <summary>
            Gets and Sets the default value of the parameter.
            </summary>
            <remarks>
            Gets and sets the default value of the parameter.
            </remarks>
            <value>The default value for the parameter. </value>
        </member>
        <member name="P:CapeOpen.OptionParameter.OptionList">
            <summary>
            Gets and Sets the list of valid values for the parameter if 'RestrictedtoList' public is true.
            </summary>
            <remarks>
            Used in validating the parameter if the <see cref="P:CapeOpen.OptionParameter.RestrictedToList">RestrictedToList</see>
            is set to <c>true</c>.
            </remarks>
            <value>
            The option list.
            </value>
        </member>
        <member name="P:CapeOpen.OptionParameter.RestrictedToList">
            <summary>
            A list of Strings that the valueo f the parameter will be validated against.
            </summary>
            <remarks>
            If <c>true</c>, the parameter's value will be validated against the Strings
            in the <see cref="P:CapeOpen.OptionParameter.OptionList">OptionList</see>.
            </remarks>
            <value>
            If <c>true</c>, the parameter's value will be validated against the Strings
            in the <see cref="P:CapeOpen.OptionParameter.OptionList">OptionList</see>.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="T:CapeOpen.CapePortDirection">
            <summary>
            The direction that objects or information connected to the port is expected to flow (e.g. material, energy or information objects).
            </summary>
            <remarks>
            This enumeration provide the flowsheeting tool with information related to the direction of the port, that is, whether the port take in
            material, information, or energy; or outputs a material, information of energy. This can be used to by the flowsheet to
            aid in the selection of the port to which to attach the material, information or energy object.
            </remarks>
        </member>
        <member name="F:CapeOpen.CapePortDirection.CAPE_INLET">
            <summary>
            Signifies an inlet port to the unit operation.
            </summary>
        </member>
        <member name="F:CapeOpen.CapePortDirection.CAPE_OUTLET">
            <summary>
            Signifies an outlet port to the unit operation.
            </summary>
        </member>
        <member name="F:CapeOpen.CapePortDirection.CAPE_INLET_OUTLET">
            <summary>
            Signifies a port that can be either an inlet or an outlet to the unit operation.
            </summary>
        </member>
        <member name="T:CapeOpen.CapePortType">
            <summary>
            The type of objects or information that can flow into the unit operation from 
            the connected object.
            </summary>
            <remarks>
            This enumeration provide the flowsheeting tool with information related to the type of the port, that is, whether the unit operation uses the object attaches to the port as a
            material, information, or energy. This can be used to by the flowsheet to
            aid in the selection of the port to which to attach the material, information or energy object.
            </remarks>
        </member>
        <member name="F:CapeOpen.CapePortType.CAPE_MATERIAL">
            <summary>
            Indicates that a material flow is expected through this port to the unit operation.
            </summary>
        </member>
        <member name="F:CapeOpen.CapePortType.CAPE_ENERGY">
            <summary>
            Indicates that an energy flow is expected through this port to the unit operation.
            </summary>
        </member>
        <member name="F:CapeOpen.CapePortType.CAPE_INFORMATION">
            <summary>
            Indicates that an information flow is expected through this port to the unit operation.
            </summary>
        </member>
        <member name="F:CapeOpen.CapePortType.CAPE_ANY">
            <summary>
            Indicates that either material, energy, or information can flow through this port to the unit operation.
            </summary>
        </member>
        <member name="T:CapeOpen.UnitOperationValidatedHandler">
            <summary>
            Represents the method that will handle the validation of a unit operation.
            </summary>
        </member>
        <member name="T:CapeOpen.IUnitOperationValidatedEventArgs">
            <summary>
            The unit operation was validated.
            </summary>
            <remarks>
            Provides information about the validation of the unit operation.
            </remarks>
        </member>
        <member name="P:CapeOpen.IUnitOperationValidatedEventArgs.UnitOperationName">
            <summary>
            The name of the unit operation being changed.</summary>
        </member>
        <member name="P:CapeOpen.IUnitOperationValidatedEventArgs.Message">
            <summary>
            The message reulting from the unit operation validation.</summary>
            <remarks>The message provides information about the results of the validation process.</remarks>
            <value>Information regrading the validation process.</value>
        </member>
        <member name="P:CapeOpen.IUnitOperationValidatedEventArgs.OldStatus">
            <summary>
            The validation status of the unit operation prior to the validation.</summary>
            <remarks>Informs the user of the results of the validation process.</remarks>
            <value>The validation status of the unit operation prior to the validation.</value>
        </member>
        <member name="P:CapeOpen.IUnitOperationValidatedEventArgs.NewStatus">
            <summary>
            The validation status of the unit operation after the validation.</summary>
            <remarks>Informs the user of the results of the validation process.</remarks>
            <value>The validation status of the unit operation after the validation.</value>
        </member>
        <member name="T:CapeOpen.UnitOperationValidatedEventArgs">
            <summary>
            The unit operation was validated.
            </summary>
            <remarks>
            Provides information about the validation of the unit operation.
            </remarks>
        </member>
        <member name="M:CapeOpen.UnitOperationValidatedEventArgs.#ctor(System.String,System.String,CapeOpen.CapeValidationStatus,CapeOpen.CapeValidationStatus)">
            <summary>Creates an instance of the UnitValidatedEventArgs class for the unit operation .</summary>
            <remarks>You can use this constructor when raising the UnitValidatedEventArgs at run time to  
            the message about the parameter validation.
            </remarks>
            <param name = "unitName">The name of the unit operation  being changed.</param>
            <param name = "message">The message indicating the results of the unit operation validation.</param>
            <param name = "oldStatus">The status of the unit operation prior to validation.</param>
            <param name = "newStatus">The status of the unit operation after the validation.</param>
        </member>
        <member name="P:CapeOpen.UnitOperationValidatedEventArgs.UnitOperationName">
            <summary>
            The name of the unit operation being changed.</summary>
            <value>The name of the unit operation being changed.</value>
        </member>
        <member name="P:CapeOpen.UnitOperationValidatedEventArgs.Message">
            <summary>
            The message reulting from the unit operation validation.</summary>
            <remarks>The message provides information about the results of the validation process.</remarks>
            <value>Information regrading the validation process.</value>
        </member>
        <member name="P:CapeOpen.UnitOperationValidatedEventArgs.OldStatus">
            <summary>
            The validation status of the unit operation prior to the validation.</summary>
            <remarks>Informs the user of the results of the validation process.</remarks>
            <value>The validation status of the unit operation prior to the validation.</value>
        </member>
        <member name="P:CapeOpen.UnitOperationValidatedEventArgs.NewStatus">
            <summary>
            The validation status of the unit operation after the validation.</summary>
            <remarks>Informs the user of the results of the validation process.</remarks>
            <value>The validation status of the unit operation after the validation.</value>
        </member>
        <member name="T:CapeOpen.UnitOperationCalculateHandler">
            <summary>
            Represents the method that will handle the beginning of a calculation of a unit operation.
            </summary>
        </member>
        <member name="T:CapeOpen.IUnitOperationCalculateEventArgs">
            <summary>
            Event fired at the start of a unit operation was calculation.
            </summary>
            <remarks>
            Provides information about the start of the calculation of the unit operation.
            </remarks>
        </member>
        <member name="P:CapeOpen.IUnitOperationCalculateEventArgs.UnitOperationName">
            <summary>
            The name of the unit operation being calculated.</summary>
        </member>
        <member name="P:CapeOpen.IUnitOperationCalculateEventArgs.Message">
            <summary>
            The message reulting from the start of the unit operation calculation.</summary>
            <remarks>The message provides information about the start of the unit operation calculation process.</remarks>
            <value>Information regrading the validation process.</value>
        </member>
        <member name="T:CapeOpen.UnitOperationCalculateEventArgs">
            <summary>
            Event fired at the start of a unit operation was calculation.
            </summary>
            <remarks>
            Provides information about the start of the calculation of the unit operation.
            </remarks>
        </member>
        <member name="M:CapeOpen.UnitOperationCalculateEventArgs.#ctor(System.String,System.String)">
            <summary>Creates an instance of the UnitOperationBeginCalculationEventArgs class for the unit operation .</summary>
            <remarks>You can use this constructor when raising the UnitOperationBeginCalculationEventArgs at run time to  
            the message about the parameter validation.
            </remarks>
            <param name = "unitName">The name of the unit operation  being calulcated.</param>
            <param name = "message">The message indicating the conditions at the start of the unit operation calculation.</param>
        </member>
        <member name="P:CapeOpen.UnitOperationCalculateEventArgs.UnitOperationName">
            <summary>
            The name of the unit operation being calculated.</summary>
            <value>The name of the unit operation being calculated.</value>
        </member>
        <member name="P:CapeOpen.UnitOperationCalculateEventArgs.Message">
            <summary>
            The message from the unit operation regarding the start of the calculation process.</summary>
            <remarks>The message provides information about the start of the calculated process.</remarks>
            <value>Information regarding the start of the calculated process.</value>
        </member>
        <member name="T:CapeOpen.UnitOperationBeginCalculationHandler">
            <summary>
            Represents the method that will handle the beginning of a calculation of a unit operation.
            </summary>
        </member>
        <member name="T:CapeOpen.IUnitOperationBeginCalculationEventArgs">
            <summary>
            Event fired at the start of a unit operation was calculation.
            </summary>
            <remarks>
            Provides information about the start of the calculation of the unit operation.
            </remarks>
        </member>
        <member name="P:CapeOpen.IUnitOperationBeginCalculationEventArgs.UnitOperationName">
            <summary>
            The name of the unit operation being calculated.</summary>
        </member>
        <member name="P:CapeOpen.IUnitOperationBeginCalculationEventArgs.Message">
            <summary>
            The message reulting from the start of the unit operation calculation.</summary>
            <remarks>The message provides information about the start of the unit operation calculation process.</remarks>
            <value>Information regrading the validation process.</value>
        </member>
        <member name="T:CapeOpen.UnitOperationBeginCalculationEventArgs">
            <summary>
            Event fired at the start of a unit operation was calculation.
            </summary>
            <remarks>
            Provides information about the start of the calculation of the unit operation.
            </remarks>
        </member>
        <member name="M:CapeOpen.UnitOperationBeginCalculationEventArgs.#ctor(System.String,System.String)">
            <summary>Creates an instance of the UnitOperationBeginCalculationEventArgs class for the unit operation .</summary>
            <remarks>You can use this constructor when raising the UnitOperationBeginCalculationEventArgs at run time to  
            the message about the parameter validation.
            </remarks>
            <param name = "unitName">The name of the unit operation  being calulcated.</param>
            <param name = "message">The message indicating the conditions at the start of the unit operation calculation.</param>
        </member>
        <member name="P:CapeOpen.UnitOperationBeginCalculationEventArgs.UnitOperationName">
            <summary>
            The name of the unit operation being calculated.</summary>
            <value>The name of the unit operation being calculated.</value>
        </member>
        <member name="P:CapeOpen.UnitOperationBeginCalculationEventArgs.Message">
            <summary>
            The message from the unit operation regarding the start of the calculation process.</summary>
            <remarks>The message provides information about the start of the calculated process.</remarks>
            <value>Information regarding the start of the calculated process.</value>
        </member>
        <member name="T:CapeOpen.UnitOperationEndCalculationHandler">
            <summary>
            Represents the method that will handle the completion of a unit operation calculation process.
            </summary>
        </member>
        <member name="T:CapeOpen.IUnitOperationEndCalculationEventArgs">
            <summary>
            The unit operation calculation prcess has been completed.
            </summary>
            <remarks>
            Provides information about the completion of the unit operation calculation process.
            </remarks>
        </member>
        <member name="P:CapeOpen.IUnitOperationEndCalculationEventArgs.UnitOperationName">
            <summary>
            The name of the unit operation being calculated.</summary>
            <value>The name of the unit operation being calculated.</value>
        </member>
        <member name="P:CapeOpen.IUnitOperationEndCalculationEventArgs.Message">
            <summary>
            The message from the unit operation regarding the completion of the calculation process.</summary>
            <remarks>The message provides information about the completion of the calculated process.</remarks>
            <value>Information regarding the completion of the calculated process.</value>
        </member>
        <member name="T:CapeOpen.UnitOperationEndCalculationEventArgs">
            <summary>
            The unit operation was validated.
            </summary>
            <remarks>
            Provides information about the validation of the unit operation.
            </remarks>
        </member>
        <member name="M:CapeOpen.UnitOperationEndCalculationEventArgs.#ctor(System.String,System.String)">
            <summary>Creates an instance of the UnitOperationEndCalculationEventArgs class for the unit operation .</summary>
            <remarks>You can use this constructor when raising the UnitOperationEndCalculationEventArgs at run time to  
            the message about the parameter validation.
            </remarks>
            <param name = "unitName">The name of the unit operation  being calulcated.</param>
            <param name = "message">The message indicating the results of the unit operation calculation.</param>
        </member>
        <member name="P:CapeOpen.UnitOperationEndCalculationEventArgs.UnitOperationName">
            <summary>
            The name of the unit operation being calculated.</summary>
            <value>The name of the unit operation being calculated.</value>
        </member>
        <member name="P:CapeOpen.UnitOperationEndCalculationEventArgs.Message">
            <summary>
            The message from the unit operation regarding the completion of the calculation process.</summary>
            <remarks>The message provides information about the completion of the calculated process.</remarks>
            <value>Information regarding the completion of the calculated process.</value>
        </member>
        <member name="T:CapeOpen.IPortConnectedEventArgs">
            <summary>
            An object was connected to the port.
            </summary>
            <remarks>
            An object was connected to the port.
            </remarks>
        </member>
        <member name="P:CapeOpen.IPortConnectedEventArgs.PortName">
            <summary>
            The name of the port being connected.
            </summary>
        </member>
        <member name="T:CapeOpen.PortConnectedEventArgs">
            <summary>
            An object was connected to the port.
            </summary>
            <remarks>
            An object was connected to the port.
            </remarks>
        </member>
        <member name="M:CapeOpen.PortConnectedEventArgs.#ctor(System.String)">
            <summary>Creates an instance of the PortConnectedEventArgs class for the port.</summary>
            <remarks>You can use this constructor when raising the PortConnectedEventArgs at run time to  
            inform the system that the poert was connected.
            </remarks>
        </member>
        <member name="P:CapeOpen.PortConnectedEventArgs.PortName">
            <summary>
            The name of the port being connected.</summary>
            <value>The name of the port being connected.</value>
        </member>
        <member name="T:CapeOpen.PortDisconnectedHandler">
            <summary>
            Represents the method that will handle disconnecting an object from a unit port.
            </summary>
        </member>
        <member name="T:CapeOpen.IPortDisconnectedEventArgs">
            <summary>
            The port was disconnected.
            </summary>
            <remarks>
            The port was disconnected.
            </remarks>
        </member>
        <member name="P:CapeOpen.IPortDisconnectedEventArgs.PortName">
            <summary>
            The name of the port being disconnected.</summary>
        </member>
        <member name="T:CapeOpen.PortDisconnectedEventArgs">
            <summary>
            The port was disconnected.
            </summary>
            <remarks>
            The port was disconnected.
            </remarks>
        </member>
        <member name="M:CapeOpen.PortDisconnectedEventArgs.#ctor(System.String)">
            <summary>Creates an instance of the PortDisconnectedEventArgs class for the port.</summary>
            <remarks>You can use this constructor when raising the PortDisconnectedEventArgs at run time to  
            inform the system that the port was disconnected.
            </remarks>
        </member>
        <member name="P:CapeOpen.PortDisconnectedEventArgs.PortName">
            <summary>
            The name of the port being disconnected.</summary>
            <value>The name of the port being disconnected.</value>
        </member>
        <member name="T:CapeOpen.ICapeUnitPortVariables">
            <summary>
            Port variables for equation-oriented simulators.
            </summary>
            <remarks>
            This interface is optional and would be implemented by a port object. It is intended 
            to allow a port to describe which Equation-oriented variables are associated with it and 
            should only be implemented for the ports contained in a unit operation which supports the
            ICapeNumericESO interface described in “CAPE-OPEN Interface Specification – Numerical 
            Solvers”.
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeUnitPortVariables.Variable(System.String,System.String)">
            <summary>
            The position of a port variable in the EO model.
            </summary>
            <remarks>
            Gets the position of a port variable in the EO model - used to 
            correctly build the equations representing a connection to this port.
             Variable type can be - flowrate, temperature, pressure, 
            specificEnthalpy, VaporFraction and for Vapour fraction component 
            name must also be specified. 
            </remarks>
            <param name = "Variable_type">The Type of the variable.</param>
            <param name = "Component">The compnent of the variable.</param>
            <value>The position of the variable.</value>
        </member>
        <member name="M:CapeOpen.ICapeUnitPortVariables.SetIndex(System.String,System.String,System.Int32)">
            <summary>
            Sets the position of port variables: this should ultimately 
            be a private member function.
            </summary>
            <remarks>
            Sets the position of port variables: this should ultimately 
            be a private member function.
            </remarks>
            <param name = "Variable_type">The Type of the variable.</param>
            <param name = "Component">The compnent of the variable.</param>
            <param name = "index">The index of the variable.</param>
        </member>
        <member name="T:CapeOpen.Resources.units_xml">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CapeOpen.Resources.units_xml.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CapeOpen.Resources.units_xml.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CapeOpen.Resources.units_xml.units">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;Units&gt;
              &lt;Unit_Specs&gt;
                &lt;Unit&gt;mol&lt;/Unit&gt;
                &lt;Category&gt;AmountOfSubstance&lt;/Category&gt;
                &lt;ConversionTimes&gt;1&lt;/ConversionTimes&gt;
                &lt;ConversionPlus&gt;0&lt;/ConversionPlus&gt;
                &lt;Comments&gt;0&lt;/Comments&gt;
              &lt;/Unit_Specs&gt;
              &lt;Unit_Specs&gt;
                &lt;Unit&gt;US$&lt;/Unit&gt;
                &lt;Category&gt;Currency&lt;/Category&gt;
                &lt;ConversionTimes&gt;1&lt;/ConversionTimes&gt;
                &lt;ConversionPlus&gt;0&lt;/ConversionPlus&gt;
                &lt;Comments&gt;0&lt;/Comments&gt;
              &lt;/Unit_Specs&gt;
              &lt;Unit_Specs&gt;
                &lt;Unit&gt;A/cm2&lt;/Unit&gt;
                &lt;Category&gt; [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:CapeOpen.CapeValidationStatus">
            <summary>
            Enumeration flag to indicate parameter validation status.
            </summary>
            <remarks>
            <para>The enumeration has the following meanings:</para>
            <para>(i)   notValidated(CAPE_NOT_VALIDATED): The PMC's Validate()
            method has not been called after the last time that its value had been changed.</para>
            <para>(ii)  invalid(CAPE_INVALID): The last time that the PMC's Validate() 
            method was called it returned false.</para>
            <para>(iii) valid(CAPE_VALID): the last time that the PMC's Validate() method 
            was called it returned true.</para>
            </remarks>
        </member>
        <member name="F:CapeOpen.CapeValidationStatus.CAPE_NOT_VALIDATED">
            <summary>
            The PMC's Validate() method has not been called after the last time that its value had been changed.
            </summary>
        </member>
        <member name="F:CapeOpen.CapeValidationStatus.CAPE_INVALID">
            <summary>
            The last time that the PMC's Validate() method was called it returned false.
            </summary>
        </member>
        <member name="F:CapeOpen.CapeValidationStatus.CAPE_VALID">
            <summary>
            The last time that the PMC's Validate() method was called it returned true.
            </summary>
        </member>
        <member name="T:CapeOpen.INameChangedEventArgs">
            <summary>
            Event thrown to indicate that the name of a component has changed.
            </summary>
        </member>
        <member name="P:CapeOpen.INameChangedEventArgs.OldName">
            <summary>
            The name of the PMC prior to the name change.</summary>
            <remarks>The former name of the unit can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The name of the unit prior to the name change.</value>
        </member>
        <member name="P:CapeOpen.INameChangedEventArgs.NewName">
            <summary>
            The name of the PMC after the name change.</summary>
            <remarks>The new name of the unit can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The name of the unit after the name change.</value>
        </member>
        <member name="T:CapeOpen.IDescriptionChangedEventArgs">
            <summary>
            Event thrown to indicate that the description of a component has changed.
            </summary>
        </member>
        <member name="P:CapeOpen.IDescriptionChangedEventArgs.OldDescription">
            <summary>
            The description of the PMC prior to the name change.</summary>
            <remarks>The former description of the unit can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The description of the unit prior to the description change.</value>
        </member>
        <member name="P:CapeOpen.IDescriptionChangedEventArgs.Newdescription">
            <summary>
            The name of the PMC after the name change.</summary>
            <remarks>The description name of the unit can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The description of the unit after the description change.</value>
        </member>
        <member name="T:CapeOpen.NameChangedEventArgs">
            <summary>
            Provides data for the CapeIdentification.ComponentNameChanged event.
            </summary>
            <remarks>
            A CapeIdentification.NameChangedEventArgs event specifies the old and new name of the PMC.
            </remarks>
        </member>
        <member name="M:CapeOpen.NameChangedEventArgs.#ctor(System.String,System.String)">
            <summary>Creates an instance of the NameChangedEventArgs class with the old and new name.</summary>
            <remarks>You can use this constructor when raising the NameChangedEvent at run time to specify a 
            specific the name of the PMC having its name changed.
            </remarks>
            <param name = "oldName">The name of the PMC prior to the name change.</param>
            <param name = "newName">The name of the PMC after the name change.</param>
        </member>
        <member name="P:CapeOpen.NameChangedEventArgs.OldName">
            <summary>
            The name of the PMC prior to the name change.</summary>
            <remarks>The former name of the unit can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The name of the unit prior to the name change.</value>
        </member>
        <member name="P:CapeOpen.NameChangedEventArgs.NewName">
            <summary>
            The name of the PMC after the name change.</summary>
            <remarks>The new name of the unit can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The name of the unit after the name change.</value>
        </member>
        <member name="T:CapeOpen.DescriptionChangedEventArgs">
            <summary>
            Provides data for the CapeIdentification.ComponentDescriptionChanged event.
            </summary>
            <remarks>
            A CapeIdentification.DescriptionChangedEventArgs event specifies the old and new description of the PMC.
            </remarks>
        </member>
        <member name="M:CapeOpen.DescriptionChangedEventArgs.#ctor(System.String,System.String)">
            <summary>Creates an instance of the DescriptionChangedEventArgs class with the old and new name.</summary>
            <remarks>You can use this constructor when raising the DescriptionChangedEvent at run time to specify a 
            specific the description of the PMC having its name changed.
            </remarks>
            <param name = "oldDescription">The description of the PMC prior to the description change.</param>
            <param name = "newDescription">The description of the PMC after the description change.</param>
        </member>
        <member name="P:CapeOpen.DescriptionChangedEventArgs.OldDescription">
            <summary>
            The description of the PMC prior to the name change.</summary>
            <remarks>The former description of the unit can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The description of the unit prior to the description change.</value>
        </member>
        <member name="P:CapeOpen.DescriptionChangedEventArgs.Newdescription">
            <summary>
            The name of the PMC after the name change.</summary>
            <remarks>The description name of the unit can be used to update GUI inforamtion about the PMC.</remarks>
            <value>The description of the unit after the description change.</value>
        </member>
        <member name="T:CapeOpen.ICapeIdentificationEvents">
            <summary>
            Provides methods to identify and describe a CAPE-OPEN component.
            </summary>
            <remarks>
            <para>As illustration, we remind requirements coming from the existing interface 
            specification and being connected with the Identification concept:</para>
            <para>The Unit Operations Interfaces have the following requirements:</para>
            <para>* If a flowsheet contains two instances of a Unit Operation of a particular 
            class, the COSE needs to provide the user a textual identifier to distinguish each 
            of the instances. For instance, when the COSE requires to report about an error 
            occurred in one of the Unit Operations.</para>
            <para>* When the COSE shows the user its GUI to connect the COSE’s streams to the 
            Unit Operation ports, the COSE needs to request the Unit for its list of available 
            ports. For the user to identify the ports, the user needs some distinctive textual 
            information for each of them.</para>
            <para>* When the COSE exposes to the user its interfaces to browse or set the 
            value of an internal parameter of a Unit Operation, the COSE needs to request the 
            Unit for its list of available parameters. No matter if this COSE’s interface is 
            a GUI or a programming interface, each parameter must be identified by a textual 
            string.</para>
            <para>The ICapeThermoMaterialObject (used by both Unit and Thermo interfaces):</para>
            <para>* If a Unit Operation has encountered an error accessing a stream 
            (<see cref="T:CapeOpen.ICapeThermoMaterialObject">ICapeThermoMaterialObject</see>), the 
            Unit might decide to report it to the user. It would be desirable the stream to 
            have a textual identifier for the user to be able to quickly know which stream 
            failed.</para>
            <para>The Thermodynamic Interfaces have the following requirements:</para>
            <para>* The <see cref="T:CapeOpen.ICapeThermoSystem">ICapeThermoSystem</see>
            and the <see cref="T:CapeOpen.ICapeThermoPropertyPackage">ICapeThermoPropertyPackage</see> 
            interfaces don’t require an identification interface, since both of them have been 
            designed as singletons (a single instance of each component class is required). 
            That means that there is no need to identify this instance: its class description 
            would be enough. However, the user might decide anyway to assign a name or a 
            description to the CAPE-OPEN property systems or property packages used in her/his 
            flowsheet. Furthermore, if these interfaces evolve, the singleton approach could 
            be removed. In this case, identifying each instance will be a must.</para>
            <para>The Solvers Interfaces have the following requirements:</para>
            <para>* Many objects should provide the functionality coming from the 
            Identification Common Interface.</para>
            <para>The SMST Interfaces have the following requirements:</para>
            <para>* The CO SMST component package depends on the Identification Interface 
            package. The interface ICapeSMSTFactory must provide the Identification 
            capabilities.</para>
            <para>Reference document: Identification Common Interface</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeIdentificationEvents.ComponentNameChanged(System.Object,System.Object)">
            <summary>
            Gets and sets the name of the component.
            </summary>
            <remarks>
            <para>A particular Use Case in a system may contain several CAPE-OPEN components 
            of the same class. The user should be able to assign different names and 
            descriptions to each instance in order to refer to them unambiguously and in a 
            user-friendly way. Since not always the software components that are able to 
            set these identifications and the software components that require this information 
            have been developed by the same vendor, a CAPE-OPEN standard for setting and 
            getting this information is required.</para>
            <para>So, the component will not usually set its own name and description: the 
            user of the component will do it.</para>
            </remarks>
            <value>The unique name of the component.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.ICapeIdentificationEvents.ComponentDescriptionChanged(System.Object,System.Object)">
            <summary>
            Gets and sets the description of the component.
            </summary>
            <remarks>
            <para>A particular Use Case in a system may contain several CAPE-OPEN components 
            of the same class. The user should be able to assign different names and 
            descriptions to each instance in order to refer to them unambiguously and in a 
            user-friendly way. Since not always the software components that are able to 
            set these identifications and the software components that require this information 
            have been developed by the same vendor, a CAPE-OPEN standard for setting and 
            getting this information is required.</para>
            <para>So, the component will not usually set its own name and description: the 
            user of the component will do it.</para>
            </remarks>
            <value>The description of the component.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.ComponentNameChangedHandler">
            <summary>
            Represents the method that will handle the changing the name of a component.
            </summary>
            <remarks>
            When you create a ComponentNameChangedHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an 
            instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about delegates, 
            see Events and Delegates.
            </remarks>
            <param name="sender">The PMC that is the source .</param>
            <param name="args">A <see cref="T:CapeOpen.NameChangedEventArgs">NameChangedEventArgs</see> that provides information about the name change.</param>
        </member>
        <member name="T:CapeOpen.ComponentDescriptionChangedHandler">
            <summary>
            Represents the method that will handle the changing of the description of a component.
            </summary>
            <remarks>
            When you create a ComponentNameChangedHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an 
            instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about delegates, 
            see Events and Delegates.
            </remarks>
            <param name="sender">The PMC that is the source .</param>
            <param name="args">A <see cref="T:CapeOpen.DescriptionChangedEventArgs">DescriptionChangedEventArgs</see> that provides information about the description change.</param>
        </member>
        <member name="T:CapeOpen.CollectionAddingNewHandler">
            <summary>
            Represents the method that will handle the changing the name of a component.
            </summary>
            <remarks>
            When you create a ComponentNameChangedHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an 
            instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about delegates, 
            see Events and Delegates.
            </remarks>
            <param name="sender">The PMC that is the source .</param>
            <param name="args">A <see cref="T:CapeOpen.NameChangedEventArgs">NameChangedEventArgs</see> that provides information about the name change.</param>
        </member>
        <member name="T:CapeOpen.CollectionListChangedHandler">
            <summary>
            Represents the method that will handle the changing the name of a component.
            </summary>
            <remarks>
            When you create a ComponentNameChangedHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an 
            instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about delegates, 
            see Events and Delegates.
            </remarks>
            <param name="sender">The PMC that is the source .</param>
            <param name="args">A <see cref="T:CapeOpen.NameChangedEventArgs">NameChangedEventArgs</see> that provides information about the name change.</param>
        </member>
        <member name="T:CapeOpen.ICapeCollectionEvents">
            <summary>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeCollectionEvents.CollectionAddingNew(System.Object,System.Object)">
            <summary>
            Occurs when the user changes of the value of a paramter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnComponentNameChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterValueChanged</c> in a derived class, be sure to call the base class's <c>OnParameterValueChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="M:CapeOpen.ICapeCollectionEvents.CollectionAddingNew(System.Object,System.Object)">CollectionAddingNew</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.ICapeCollectionEvents.CollectionListChanged(System.Object,System.Object)">
            <summary>
            Occurs when the user changes of the mode of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterModeChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterModeChanged</c> in a derived class, be sure to call the base class's <c>OnParameterModeChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="M:CapeOpen.ICapeCollectionEvents.CollectionListChanged(System.Object,System.Object)">CollectionListChanged</see> that contains information about the event.</param>
        </member>
        <member name="T:CapeOpen.CapeNameAttribute">
            <summary>Provides a text name for the registration of a CAPE-OPEN object.</summary>
            <remarks><para>
            This attribute is used during the registration of a CAPE-OPEN object with the
            COM registry to set the value of the CapeName[Name] registration key. </para>
            </remarks>
            <c>
            [Serializable]
            [System.Runtime.InteropServices.ComVisible(true)]
            [System.Runtime.InteropServices.Guid("C79CAFD3-493B-46dc-8585-1118A0B5B4AB")]//ICapeThermoMaterialObject_IID)
            [System.ComponentModel.Description("")]
            [CapeOpen.CapeNameAttribute("MixerExamle")]
            [CapeOpen.CapeDescriptionAttribute("An example mixer unit operation.")]
            [CapeOpen.CapeVersionAttribute("1.0")]
            [CapeOpen.CapeVendorURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeHelpURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeAboutAttribute("US Environmental Protection Agency\nCincinnati, Ohio")]
            public class CMixerExample : public CUnitBase
            </c>
        </member>
        <member name="M:CapeOpen.CapeNameAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the CapeDescriptionAttribute class.</summary>
            <remarks>The value of the description is used by the registration function to set the value of the CapeDescription[Description] registration key.</remarks>
            <param name = "name">The CAPE-OPEN component description.</param>
        </member>
        <member name="P:CapeOpen.CapeNameAttribute.Name">
            <summary>Gets the the name information.</summary>
            <remarks>The value of the name.</remarks>
            <value>The CAPE-OPEN component name.</value>
        </member>
        <member name="T:CapeOpen.CapeDescriptionAttribute">
            <summary>Provides a text description for the registration of a CAPE-OPEN object.</summary>
            <remarks><para>
            This attribute is used during the registration of a CAPE-OPEN object with the
            COM registry to set the value of the CapeDescription[Description] registration key. </para>
            </remarks>
            <c>
            [Serializable]
            [System.Runtime.InteropServices.ComVisible(true)]
            [System.Runtime.InteropServices.Guid("C79CAFD3-493B-46dc-8585-1118A0B5B4AB")]//ICapeThermoMaterialObject_IID)
            [System.ComponentModel.Description("")]
            [CapeOpen.CapeDescriptionAttribute("An example mixer unit operation.")]
            [CapeOpen.CapeVersionAttribute("1.0")]
            [CapeOpen.CapeVendorURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeHelpURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeAboutAttribute("US Environmental Protection Agency\nCincinnati, Ohio")]
            public class CMixerExample : public CUnitBase
            </c>
        </member>
        <member name="M:CapeOpen.CapeDescriptionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the CapeDescriptionAttribute class.</summary>
            <remarks>The value of the description is used by the registration function to set the value of the CapeDescription[Description] registration key.</remarks>
            <param name = "description">The CAPE-OPEN component description.</param>
        </member>
        <member name="P:CapeOpen.CapeDescriptionAttribute.Description">
            <summary>Gets the the description information.</summary>
            <remarks>The value of the description.</remarks>
            <value>The CAPE-OPEN component description.</value>
        </member>
        <member name="T:CapeOpen.CapeVersionAttribute">
            <summary>Provides the CAPE-OPEN version number for the registration of a CAPE-OPEN object.</summary>
            <remarks><para>
            This attribute is used during the registration of a CAPE-OPEN object with the
            COM registry to set the value of the CapeDescription[CapeVersion] registration key. </para>
            </remarks>
            <c>
            [Serializable]
            [System.Runtime.InteropServices.ComVisible(true)]
            [System.Runtime.InteropServices.Guid("C79CAFD3-493B-46dc-8585-1118A0B5B4AB")]//ICapeThermoMaterialObject_IID)
            [System.ComponentModel.Description("")]
            [CapeOpen.CapeDescriptionAttribute("An example mixer unit operation.")]
            [CapeOpen.CapeVersionAttribute("1.0")]
            [CapeOpen.CapeVendorURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeHelpURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeAboutAttribute("US Environmental Protection Agency\nCincinnati, Ohio")]
            public class CMixerExample : public CUnitBase
            </c>
        </member>
        <member name="M:CapeOpen.CapeVersionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the CapeVersionAttribute class.</summary>
            <remarks>The value of the description is used by the registration function to set the value of the CapeDescription[CapeVersion] registration key.</remarks>
            <param name = "version">The version of the CAPE-OPEN interfaces that this object supports.</param>
        </member>
        <member name="P:CapeOpen.CapeVersionAttribute.Version">
            <summary>Gets the the CAPE-OPEN version number.</summary>
            <remarks>The value of the CAPE-OPEN version number.</remarks>
            <value>The CAPE-OPEN component CAPE-OPEN version number.</value>
        </member>
        <member name="T:CapeOpen.CapeVendorURLAttribute">
            <summary>Provides a vendor URL for the registration of a CAPE-OPEN object.</summary>
            <remarks><para>
            This attribute is used during the registration of a CAPE-OPEN object with the
            COM registry to set the value of the CapeDescription[VendorURL] registration key. </para>
            </remarks>
            <c>
            [Serializable]
            [System.Runtime.InteropServices.ComVisible(true)]
            [System.Runtime.InteropServices.Guid("C79CAFD3-493B-46dc-8585-1118A0B5B4AB")]//ICapeThermoMaterialObject_IID)
            [System.ComponentModel.Description("")]
            [CapeOpen.CapeDescriptionAttribute("An example mixer unit operation.")]
            [CapeOpen.CapeVersionAttribute("1.0")]
            [CapeOpen.CapeVendorURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeHelpURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeAboutAttribute("US Environmental Protection Agency\nCincinnati, Ohio")]
            public class CMixerExample : public CUnitBase
            </c>
        </member>
        <member name="M:CapeOpen.CapeVendorURLAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the CapeVendorURLAttribute class.</summary>
            <remarks>The value of the description is used by the registration function to set the value of the CapeDescription[VendorURL] registration key.</remarks>
            <param name = "VendorURL">The CAPE-OPEN component Vendor URL.</param>
        </member>
        <member name="P:CapeOpen.CapeVendorURLAttribute.VendorURL">
            <summary>Gets the the VendorURL information.</summary>
            <remarks>The value of the VendorURL.</remarks>
            <value>The CAPE-OPEN component VendorURL.</value>
        </member>
        <member name="T:CapeOpen.CapeHelpURLAttribute">
            <summary>Provides a help URL for the registration of a CAPE-OPEN object.</summary>
            <remarks><para>
            This attribute is used during the registration of a CAPE-OPEN object with the
            COM registry to set the value of the CapeDescription[HelpURL] registration key. </para>
            </remarks>
            <c>
            [Serializable]
            [System.Runtime.InteropServices.ComVisible(true)]
            [System.Runtime.InteropServices.Guid("C79CAFD3-493B-46dc-8585-1118A0B5B4AB")]//ICapeThermoMaterialObject_IID)
            [System.ComponentModel.Description("")]
            [CapeOpen.CapeDescriptionAttribute("An example mixer unit operation.")]
            [CapeOpen.CapeVersionAttribute("1.0")]
            [CapeOpen.CapeVendorURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeHelpURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeAboutAttribute("US Environmental Protection Agency\nCincinnati, Ohio")]
            public class CMixerExample : public CUnitBase
            </c>
        </member>
        <member name="M:CapeOpen.CapeHelpURLAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the CapeHelpURLAttribute class.</summary>
            <remarks>The value of the Help URL is used by the registration function to set the value of the CapeDescription[HelpURL] registration key.</remarks>
            <param name = "HelpURL">The CAPE-OPEN component Help URL.</param>
        </member>
        <member name="P:CapeOpen.CapeHelpURLAttribute.HelpURL">
            <summary>Gets the the HelpURL information.</summary>
            <remarks>The value of the HelpURL.</remarks>
            <value>The CAPE-OPEN component HelpURL.</value>
        </member>
        <member name="T:CapeOpen.CapeAboutAttribute">
            <summary>Provides text about information for the registration of a CAPE-OPEN object.</summary>
            <remarks><para>
            This attribute is used during the registration of a CAPE-OPEN object with the
            COM registry to set the value of the CapeDescription[About] registration key. </para>
            </remarks>
            <c>
            [Serializable]
            [System.Runtime.InteropServices.ComVisible(true)]
            [System.Runtime.InteropServices.Guid("C79CAFD3-493B-46dc-8585-1118A0B5B4AB")]//ICapeThermoMaterialObject_IID)
            [System.ComponentModel.Description("")]
            [CapeOpen.CapeDescriptionAttribute("An example mixer unit operation.")]
            [CapeOpen.CapeVersionAttribute("1.0")]
            [CapeOpen.CapeVendorURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeHelpURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeAboutAttribute("US Environmental Protection Agency\nCincinnati, Ohio")]
            public class CMixerExample : public CUnitBase
            </c>
        </member>
        <member name="M:CapeOpen.CapeAboutAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the CapeAboutAttribute class.</summary>
            <remarks>The value of the about text is used by the registration function to set the value of the CapeDescription[About] registration key.</remarks>
            <param name = "About">The CAPE-OPEN component about information.</param>
        </member>
        <member name="P:CapeOpen.CapeAboutAttribute.About">
            <summary>Gets the the about information.</summary>
            <remarks>The value of the about information.</remarks>
            <value>The CAPE-OPEN component about information.</value>
        </member>
        <member name="T:CapeOpen.CapeFlowsheetMonitoringAttribute">
            <summary>Provides information regarding whether the object consumes Thermodynamics 
            during registration of a CAPE-OPEN object.</summary>
            <remarks><para>
            This attribute is used during the registration of a CAPE-OPEN object with the
            COM registry to add the Consumes_Thermo_CATID to the object's registration key. </para>
            </remarks>
            <c>
            [Serializable]
            [System.Runtime.InteropServices.ComVisible(true)]
            [System.Runtime.InteropServices.Guid("C79CAFD3-493B-46dc-8585-1118A0B5B4AB")]//ICapeThermoMaterialObject_IID)
            [System.ComponentModel.Description("")]
            [CapeOpen.CapeDescriptionAttribute("An example mixer unit operation.")]
            [CapeOpen.CapeVersionAttribute("1.0")]
            [CapeOpen.CapeVendorURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeHelpURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeAboutAttribute("US Environmental Protection Agency\nCincinnati, Ohio")]
            [CapeOpen.CapeFlowsheetMonitoringAttribute(true)]
            public class CMixerExample : public CUnitBase
            </c>
        </member>
        <member name="M:CapeOpen.CapeFlowsheetMonitoringAttribute.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the CapeConsumesThermoAttribute class.</summary>
            <remarks>This attribute is used to indicate whether the object consumes thermodynamic
            models. It is also used by the COM registration function to place the appropriate CATID
            value in the system registry.</remarks>
            <param name = "monitors">The CAPE-OPEN component is a flowsheet monitoring object.</param>
        </member>
        <member name="P:CapeOpen.CapeFlowsheetMonitoringAttribute.Monitors">
            <summary>Gets the the about information.</summary>
            <remarks>This property indicates whether the object consumes thermodynamics.</remarks>
            <value>The CAPE-OPEN component consumes thermodynamics.</value>
        </member>
        <member name="T:CapeOpen.CapeConsumesThermoAttribute">
            <summary>Provides information regarding whether the object consumes Thermodynamics 
            during registration of a CAPE-OPEN object.</summary>
            <remarks><para>
            This attribute is used during the registration of a CAPE-OPEN object with the
            COM registry to add the Consumes_Thermo_CATID to the object's registration key. </para>
            </remarks>
            <c>
            [Serializable]
            [System.Runtime.InteropServices.ComVisible(true)]
            [System.Runtime.InteropServices.Guid("C79CAFD3-493B-46dc-8585-1118A0B5B4AB")]//ICapeThermoMaterialObject_IID)
            [System.ComponentModel.Description("")]
            [CapeOpen.CapeDescriptionAttribute("An example mixer unit operation.")]
            [CapeOpen.CapeVersionAttribute("1.0")]
            [CapeOpen.CapeVendorURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeHelpURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeAboutAttribute("US Environmental Protection Agency\nCincinnati, Ohio")]
            [CapeOpen.CapeConsumesThermoAttribute(true)]
            public class CMixerExample : public CUnitBase
            </c>
        </member>
        <member name="M:CapeOpen.CapeConsumesThermoAttribute.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the CapeConsumesThermoAttribute class.</summary>
            <remarks>This attribute is used to indicate whether the object consumes thermodynamic
            models. It is also used by the COM registration function to place the appropriate CATID
            value in the system registry.</remarks>
            <param name = "consumes">The CAPE-OPEN component consumes thermodynamics.</param>
        </member>
        <member name="P:CapeOpen.CapeConsumesThermoAttribute.ConsumesThermo">
            <summary>Gets the the about information.</summary>
            <remarks>This property indicates whether the object consumes thermodynamics.</remarks>
            <value>The CAPE-OPEN component consumes thermodynamics.</value>
        </member>
        <member name="T:CapeOpen.CapeSupportsThermodynamics10Attribute">
            <summary>Provides information regarding whether the object supports Thermodynamics 
            version 1.0 during registration of a CAPE-OPEN object.</summary>
            <remarks><para>
            This attribute is used during the registration of a CAPE-OPEN object with the
            COM registry to add the SupportsThermodynamics10_CATID to the object's registration key. </para>
            </remarks>
            <c>
            [Serializable]
            [System.Runtime.InteropServices.ComVisible(true)]
            [System.Runtime.InteropServices.Guid("C79CAFD3-493B-46dc-8585-1118A0B5B4AB")]//ICapeThermoMaterialObject_IID)
            [System.ComponentModel.Description("")]
            [CapeOpen.CapeDescriptionAttribute("An example mixer unit operation.")]
            [CapeOpen.CapeVersionAttribute("1.0")]
            [CapeOpen.CapeVendorURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeHelpURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeAboutAttribute("US Environmental Protection Agency\nCincinnati, Ohio")]
            [CapeOpen.CapeConsumesThermoAttribute(true)]
            [CapeOpen.CapeSupportsThermodynamics10Attribute(true)]
            public class CMixerExample : public CUnitBase
            </c>
        </member>
        <member name="M:CapeOpen.CapeSupportsThermodynamics10Attribute.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the CapeSupportsThermodynamics10Attribute class.</summary>
            <remarks>This attribute is used to indicate whether the object supports thermodynamic
            version 1.0. It is also used by the COM registration function to place the appropriate CATID
            value in the system registry.</remarks>
            <param name = "supported">The CAPE-OPEN component consumes thermodynamics.</param>
        </member>
        <member name="P:CapeOpen.CapeSupportsThermodynamics10Attribute.Supported">
            <summary>Gets the the about information.</summary>
            <remarks>This property indicates whether the object consumes thermodynamics.</remarks>
            <value>The CAPE-OPEN component supports thermodynamics version 1.0.</value>
        </member>
        <member name="T:CapeOpen.CapeSupportsThermodynamics11Attribute">
            <summary>Provides information regarding whether the object supports Thermodynamics 
            version 1.0 during registration of a CAPE-OPEN object.</summary>
            <remarks><para>
            This attribute is used during the registration of a CAPE-OPEN object with the
            COM registry to add the SupportsThermodynamics10_CATID to the object's registration key. </para>
            </remarks>
            <c>
            [Serializable]
            [System.Runtime.InteropServices.ComVisible(true)]
            [System.Runtime.InteropServices.Guid("C79CAFD3-493B-46dc-8585-1118A0B5B4AB")]//ICapeThermoMaterialObject_IID)
            [System.ComponentModel.Description("")]
            [CapeOpen.CapeDescriptionAttribute("An example mixer unit operation.")]
            [CapeOpen.CapeVersionAttribute("1.0")]
            [CapeOpen.CapeVendorURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeHelpURLAttribute("http:\\www.epa.gov")]
            [CapeOpen.CapeAboutAttribute("US Environmental Protection Agency\nCincinnati, Ohio")]
            [CapeOpen.CapeConsumesThermoAttribute(true)]
            [CapeOpen.CapeSupportsThermodynamics11Attribute(true)]
            public class CMixerExample110 : public CUnitBase
            </c>
        </member>
        <member name="M:CapeOpen.CapeSupportsThermodynamics11Attribute.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the CapeSupportsThermodynamics10Attribute class.</summary>
            <remarks>This attribute is used to indicate whether the object supports thermodynamic
            version 1.0. It is also used by the COM registration function to place the appropriate CATID
            value in the system registry.</remarks>
            <param name = "supported">The CAPE-OPEN component consumes thermodynamics.</param>
        </member>
        <member name="P:CapeOpen.CapeSupportsThermodynamics11Attribute.Supported">
            <summary>Gets the the about information.</summary>
            <remarks>This property indicates whether the object consumes thermodynamics.</remarks>
            <value>The CAPE-OPEN component supports thermodynamics version 1.0.</value>
        </member>
        <member name="T:CapeOpen.IRealParameterSpecEvents">
            <summary>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:CapeOpen.IRealParameterSpecEvents.ParameterDefaultValueChanged(System.Object,System.Object)">
            <summary>
            Occurs when the user changes of the default value of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterDefaultValueChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterDefaultValueChanged</c> in a derived class, be sure to call the base class's <c>OnParameterDefaultValueChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="M:CapeOpen.IRealParameterSpecEvents.ParameterDefaultValueChanged(System.Object,System.Object)">ParameterDefaultValueChanged</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.IRealParameterSpecEvents.ParameterLowerBoundChanged(System.Object,System.Object)">
            <summary>
            Occurs when the user changes of the lower bound of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnComponentNameChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnComponentNameChanged</c> in a derived class, be sure to call the base class's <c>OnComponentNameChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="T:CapeOpen.ParameterValueChangedEventArgs">ParameterValueChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.IRealParameterSpecEvents.ParameterUpperBoundChanged(System.Object,System.Object)">
            <summary>
            Occurs when the user changes of the upper bound of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterUpperBoundChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterUpperBoundChanged</c> in a derived class, be sure to call the base class's <c>OnParameterUpperBoundChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="T:CapeOpen.ParameterLowerBoundChangedEventArgs">ParameterUpperBoundChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.IRealParameterSpecEvents.ParameterValidated(System.Object,System.Object)">
            <summary>
            Occurs when a parameter is validated.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterValidated</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterValidated</c> in a derived class, be sure to call the base class's <c>OnParameterValidated</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="sender">The <see cref="T:CapeOpen.RealParameter">RealParameter</see> that raised the event.</param>
            <param name="args">A <see cref="T:CapeOpen.ParameterValidatedEventArgs">ParameterValidatedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="T:CapeOpen.RealParameter">
            <summary>
            Real-Valued parameter for use in the CAPE-OPEN parameter collection.
            </summary>
        </member>
        <member name="M:CapeOpen.RealParameter.#ctor(System.String,System.String,System.Double,System.Double,System.Double,System.Double,CapeOpen.CapeParamMode,System.String)">
            <summary>
            Creates a new instance of the double precision-valued parameter class. 
            </summary>
            <remarks>
            The mode is set to CapeParamMode.CAPE_INPUT_OUTPUT. The dimensionality 
            of the parameter is determined from the unit string.
            </remarks>
            <param name = "name">Sets as the ComponentName of the parameter's ICapeIdentification interface.</param>
            <param name = "description">Sets as the ComponentDescription of the parameter's ICapeIdentification interface.</param>
            <param name = "value">Sets the inital value of the parameter.</param>
            <param name = "defaultValue">Sets the default value of the parameter.</param>
            <param name = "lowerBound">Sets the lower bound of the parameter.</param>
            <param name = "upperBound">Sets the upper bound of the parameter.</param>
            <param name = "mode">Sets the CapeParamMode mode of the parameter.</param>
            <param name = "unit">Use to Set the dimensionality of the parameter.</param>
        </member>
        <member name="M:CapeOpen.RealParameter.#ctor(System.String,System.String,System.Double,System.Double,CapeOpen.CapeParamMode,System.String)">
            <summary>
            Creates a new instance of the double precision-valued parameter class. 
            </summary>
            <remarks>
            The upper bound is set to Double.MaxValue (1.79769313486232e308) and the 
            lower bound is set to Double.MinValue (negative 1.79769313486232e308). 
            The mode is set to CapeParamMode.CAPE_INPUT_OUTPUT. 
            The dimensionality of the parameter is determined from the unit string.
            </remarks>
            <param name = "name">Sets as the ComponentName of the parameter's ICapeIdentification interface.</param>
            <param name = "description">Sets as the ComponentDescription of the parameter's ICapeIdentification interface.</param>
            <param name = "value">Sets the inital value of the parameter.</param>
            <param name = "defaultValue">Sets the default value of the parameter.</param>
            <param name = "mode">Sets the CapeParamMode mode of the parameter.</param>
            <param name = "unit">Use to Set the dimensionality of the parameter.</param>
        </member>
        <member name="M:CapeOpen.RealParameter.#ctor(System.String,System.Double,System.Double,System.String)">
            <summary>
            Creates a new instance of the double precision-valued parameter class. 
            </summary>
            <remarks>
            The upper bound is set to Double.MaxValue (1.79769313486232e308) and the 
            lower bound is set to Double.MinValue (negative 1.79769313486232e308). 
            The mode is set to CapeParamMode.CAPE_INPUT_OUTPUT. 
            The dimensionality of the parameter is determined from the unit string.
            </remarks>
            <param name = "name">Sets as the ComponentName of the parameter's ICapeIdentification interface.</param>
            <param name = "value">Sets the inital value of the parameter.</param>
            <param name = "defaultValue">Sets the default value of the parameter.</param>
            <param name = "unit">Use to Set the dimensionality of the parameter.</param>
        </member>
        <member name="M:CapeOpen.RealParameter.ConvertTo(System.String)">
            <summary>
            Returns the current value of the parameter in the dimensional unit
            specified.
            </summary>
            <remarks>
            The value of the parameter in the unit requested. The unit must be a valid
            parameter. For example, if the parameter was set as 101325 Pa, if the desiredUnit was "atm" the return
            value would be 1 (the value of 101325 Pa in atmospheres).
            </remarks>
            <value>The value of the parameter in the requested unit of measurement.</value>
            <param name="desiredUnit">The unit that the parameter is desired to be reported in.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised unit identifier.</exception>
        </member>
        <member name="M:CapeOpen.RealParameter.ConvertToSI(System.Double,System.String)">
            <summary>
            Returns the value in the SI unit of the specified unit.
            </summary>
            <remarks>
            The value is returned in the SI units for the dimensionality of the 
            parameter. For example, if the parameter was set as 1 atm, the return
            value would be 101325 (the value of 1 atm in the SI pressure 
            unit of Pascals, Pa).
            </remarks>
            <value>The value of the parameter in SI units.</value>
            <param name="value">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <param name="unit">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised unit identifier.</exception>
        </member>
        <member name="M:CapeOpen.RealParameter.System#ICloneable#Clone">
            <summary>
            Creates a copy of the parameter.
            </summary>
            <remarks><para>The clone method is used to create a deep copy of the parameter.</para>
            </remarks>
            <returns>A copy of the current parameter.</returns>
        </member>
        <member name="M:CapeOpen.RealParameter.OnParameterDefaultValueChanged(CapeOpen.ParameterDefaultValueChangedEventArgs)">
            <summary>
            Occurs when the user changes of the default value of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterDefaultValueChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterDefaultValueChanged</c> in a derived class, be sure to call the base class's <c>OnParameterDefaultValueChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="M:CapeOpen.RealParameter.OnParameterDefaultValueChanged(CapeOpen.ParameterDefaultValueChangedEventArgs)">OnParameterDefaultValueChanged</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.RealParameter.OnParameterLowerBoundChanged(CapeOpen.ParameterLowerBoundChangedEventArgs)">
            <summary>
            Occurs when the user changes of the lower bound of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnComponentNameChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnComponentNameChanged</c> in a derived class, be sure to call the base class's <c>OnComponentNameChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.ParameterValueChangedEventArgs">ParameterValueChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.RealParameter.OnParameterUpperBoundChanged(CapeOpen.ParameterUpperBoundChangedEventArgs)">
            <summary>
            Occurs when the user changes of the upper bound of a parameter.
            </summary>
            <remarks><para>Raising an event invokes the event handler through a delegate.</para>
            <para>The <c>OnParameterUpperBoundChanged</c> method also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.</para>
            <para>Notes to Inheritors: </para>
            <para>When overriding <c>OnParameterUpperBoundChanged</c> in a derived class, be sure to call the base class's <c>OnParameterUpperBoundChanged</c> method so that registered 
            delegates receive the event.</para>
            </remarks>
            <param name="args">A <see cref="T:CapeOpen.ParameterLowerBoundChangedEventArgs">ParameterUpperBoundChangedEventArgs</see> that contains information about the event.</param>
        </member>
        <member name="M:CapeOpen.RealParameter.Validate(System.String@)">
            <summary>
            Validates the current value of the parameter against the 
            specification of the parameter. 
            </summary>
            <remarks>
            The parameter is considered valid if the current value is 
            between the upper and lower bound. The message is used to 
            return the reason that the parameter is invalid. This function also
            sets the CapeValidationStatus of the parameter based upon the results
            of the validation.
            </remarks>
            <returns>
            True if the parameter is valid, false if not valid.
            </returns>
            <param name="message">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="M:CapeOpen.RealParameter.Reset">
            <summary>
            Sets the value of the parameter to its default value.
            </summary>
            <remarks>
             This method sets the parameter's value to the default value.
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="M:CapeOpen.RealParameter.Validate(System.Double,System.String@)">
            <summary>
            Validates the value sent against the specification of the parameter.
            </summary>
            <remarks>
            The value is considered valid if it is between the upper and lower 
            bound of the parameter. The message is used to return the reason that 
            the parameter is invalid.
            </remarks>
            <returns>
            True if the parameter is valid, false if not valid.
            </returns>
            <param name="value">The name of the unit that the value should be converted to.</param>
            <param name="message">Reference to a string that will conain a message regarding the validation of the parameter.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.RealParameter.CapeOpen#ICapeParameterSpec#Dimensionality">
            <summary>
            Gets the dimensionality of the parameter.
            </summary>
            <remarks>
            <para>Gets the dimensionality of the parameter for which this is the 
            specification. The dimensionality represents the physical dimensional 
            axes of this parameter. It is expected that the dimensionality must cover 
            at least 6 fundamental axes (length, mass, time, angle, temperature and 
            charge). A possible implementation could consist in being a constant 
            length array vector that contains the exponents of each basic SI unit, 
            following directives of SI-brochure (from http://www.bipm.fr/). So if we 
            agree on order &lt;m kg s A K,&gt; ... velocity would be 
            &lt;1,0,-1,0,0,0&gt;: that is m1 * s-1 =m/s. We have suggested to the 
            CO Scientific Committee to use the SI base units plus the SI derived units 
            with special symbols (for a better usability and for allowing the 
            definition of angles).</para>
            </remarks>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.RealParameter.CapeOpen#ICapeParameter#value">
            <summary>
            Gets and sets the value for this Parameter.
            </summary>
            <remarks>
            This value uses the System.Object data type for compatibility with 
            COM-based CAPE-OPEN.
            </remarks>
            <returns>A boxed boolean value of the parameter.</returns>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.RealParameter.Unit">
            <summary>
            Gets and sets the dimensional unit for the parameter.
            </summary>
            <remarks>
            The value is returned in the SI units for the dimensionality of the 
            parameter. For example, if the parameter was set as 1 atm, the return
            value would be 101325 (the value of 1 atm in the SI pressure 
            unit of Pascals, Pa).
            </remarks>
            <value>The value of the parameter in SI units.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised unit identifier.</exception>
        </member>
        <member name="E:CapeOpen.RealParameter.ParameterDefaultValueChanged">
            <summary>
            Occurs when the user changes of the default value of the parameter changes.
            </summary>
        </member>
        <member name="E:CapeOpen.RealParameter.ParameterLowerBoundChanged">
            <summary>
            Occurs when the user changes of the lower bound of the parameter changes.
            </summary>
        </member>
        <member name="E:CapeOpen.RealParameter.ParameterUpperBoundChanged">
            <summary>
            Occurs when the user changes of the upper bound of the parameter changes.
            </summary>
        </member>
        <member name="P:CapeOpen.RealParameter.SIValue">
            <summary>
            Gets and sets the parameter value in the SI unit for its current dimensionality.
            </summary>
            <remarks>
            The value is returned in the SI units for the dimensionality of the 
            parameter. For example, if the parameter was set as 1 atm, the return
            value would be 101325 (the value of 1 atm in the SI pressure 
            unit of Pascals, Pa).
            </remarks>
            <value>The value of the parameter in SI units.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed.</exception>
        </member>
        <member name="P:CapeOpen.RealParameter.DimensionedValue">
            <summary>
            Gets and sets the parameter value in the current unit for its dimensionality.
            </summary>
            <remarks>
            The value is returned in the parameter's current unit. For example, if the 
            parameter was set as 101325 Pa and the unit was changed to atm, 
            the return value would be 1 (the value of 101325 Pa in atmospheres).
            </remarks>
            <value>The value of the parameter in the current unit.</value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.RealParameter.Type">
            <summary>
            Gets the type of the parameter. 
            </summary>
            <remarks>
            Gets the <see cref="T:CapeOpen.CapeParamType"/> of the parameter for which this is a specification: real 
            (CAPE_REAL), integer(CAPE_INT), option(CAPE_OPTION), boolean(CAPE_BOOLEAN) 
            or array(CAPE_ARRAY).
            </remarks>
            <value>The parameter type. </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed.</exception>
        </member>
        <member name="P:CapeOpen.RealParameter.CapeOpen#ICapeRealParameterSpec#DefaultValue">
            <summary>
            Gets and sets the default value of the parameter.
            </summary>
            <remarks>
            The default value is the value that the specification is set to after
            the Reset() method is called.
            </remarks>
            <value>The parameter type. </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed.</exception>
        </member>
        <member name="P:CapeOpen.RealParameter.DefaultValue">
            <summary>
            Gets and sets the default value of the parameter.
            </summary>
            <remarks>
            The default value is the value that the specification is set to after
            the Reset() method is called.
            </remarks>
            <value>The parameter type. </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed.</exception>
        </member>
        <member name="P:CapeOpen.RealParameter.LowerBound">
            <summary>
            Gets and sets the lower bound of the parameter. 
            </summary>
            <remarks>
            The lower bound can be a valid double precision value. 
            By default, it is set to Double.MinValue, negative 1.79769313486232e308.
            </remarks>			
            <value>The parameter type. </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed.</exception>
        </member>
        <member name="P:CapeOpen.RealParameter.CapeOpen#ICapeRealParameterSpec#LowerBound">
            <summary>
            Gets and sets the lower bound of the parameter. 
            </summary>
            <remarks>
            The lower bound can be a valid double precision value. 
            By default, it is set to Double.MaxValue, 
            1.79769313486232e308.
            </remarks>			
            <value>The upper bound for the parameter. </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.RealParameter.UpperBound">
            <summary>
            Gets and sets the upper bound of the parameter. 
            </summary>
            <remarks>
            The lower bound can be a valid double precision value. 
            By default, it is set to Double.MaxValue, 
            1.79769313486232e308.
            </remarks>			
            <value>The upper bound for the parameter. </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.RealParameter.CapeOpen#ICapeRealParameterSpec#UpperBound">
            <summary>
            Gets and sets the upper bound of the parameter. 
            </summary>
            <remarks>
            The lower bound can be a valid double precision value. 
            By default, it is set to Double.MaxValue, 
            1.79769313486232e308.
            </remarks>			
            <value>The upper bound for the parameter. </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeInvalidArgument">To be used when an invalid argument value is passed, for example, an unrecognised Compound identifier or UNDEFINED for the props argument.</exception>
        </member>
        <member name="P:CapeOpen.RealParameter.SIUnit">
            <summary>
            Gets the Aspen display unit for the parameter.
            </summary>
            <remarks>
            <para>DisplayUnits defines the unit of measurement symbol for a parameter.</para>
            <para>Note: The symbol must be one of the uppercase strings recognized by Aspen
            Plus to ensure that it can perform unit of measurement conversions on the 
            parameter value. The system converts the parameter's value from SI units for
            display in the data browser and converts updated values back into SI.
            </para>
            </remarks>
            <value>
            Defines the display unit for the parameter.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="P:CapeOpen.RealParameter.DisplayUnits">
            <summary>
            Gets the Aspen display unit for the parameter.
            </summary>
            <remarks>
            <para>DisplayUnits defines the unit of measurement symbol for a parameter.</para>
            <para>Note: The symbol must be one of the uppercase strings recognized by Aspen
            Plus to ensure that it can perform unit of measurement conversions on the 
            parameter value. The system converts the parameter's value from SI units for
            display in the data browser and converts updated values back into SI.
            </para>
            </remarks>
            <value>
            Defines the display unit for the parameter.
            </value>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
        </member>
        <member name="T:CapeOpen.CapeSolutionStatus">
            <summary>
            Indicates solution status of the monitored flowsheet.
            </summary>
            <remarks>
            This enumeration provides the flowsheeting monitoring object with information about the solution status of the flowsheet.
            </remarks>
        </member>
        <member name="F:CapeOpen.CapeSolutionStatus.CAPE_SOLVED">
            <summary>
            The flowsheet solved without error.
            </summary>
        </member>
        <member name="F:CapeOpen.CapeSolutionStatus.CAPE_NOT_SOLVED">
            <summary>
            Signifies that there has been no attempt to solve the flowsheet.
            </summary>
        </member>
        <member name="F:CapeOpen.CapeSolutionStatus.CAPE_FAILED_TO_CONVERGE">
            <summary>
            The last attempt to solve the flowsheet did not converge.
            </summary>
        </member>
        <member name="F:CapeOpen.CapeSolutionStatus.CAPE_TIMED_OUT">
            <summary>
            The last attempt to solve the flowsheet timed out.
            </summary>
        </member>
        <member name="F:CapeOpen.CapeSolutionStatus.CAPE_NO_MEMORY">
            <summary>
            The last attempt to solve the flowsheet failed to solve due to lack of memory.
            </summary>
        </member>
        <member name="F:CapeOpen.CapeSolutionStatus.CAPE_FAILED_INITIALIZATION">
            <summary>
            The last attempt to solve the flowsheet failed to initialize.
            </summary>
        </member>
        <member name="F:CapeOpen.CapeSolutionStatus.CAPE_SOLVING_ERROR">
            <summary>
            The last attempt to solve the flowsheet produced a solving error.
            </summary>
        </member>
        <member name="F:CapeOpen.CapeSolutionStatus.CAPE_INVALID_OPERATION">
            <summary>
            The last attempt to solve the flowsheet failed due to an invalid operation.
            </summary>
        </member>
        <member name="F:CapeOpen.CapeSolutionStatus.CAPE_BAD_INVOCATION_ORDER">
            <summary>
            The last attempt to solve the flowsheet failed due to an invalid invocation order.
            </summary>
        </member>
        <member name="F:CapeOpen.CapeSolutionStatus.CAPE_COMPUTATION_ERROR">
            <summary>
            The last attempt to solve the flowsheet produced a computation error.
            </summary>
        </member>
        <member name="T:CapeOpen.ICapeFlowsheetMonitoring">
            <summary>
            This interface provides information 
            about error that result from values that are outside of their bounds. It can be raised 
            to indicate that the value of either a method argument or the value of a object 
            parameter is out of range.
            </summary>
            <remarks>
            <para>Moniting object should implement:</para>
            <list type="bullet">
            <item>ICapeIdentification</item>
            <item>IPersistStream or IPersistStreamInit in case of persistence implementation</item>
            <item>ICapeUtilities for parameter collection and Edit and for accepting an ICapeSimulationContext</item>
            <item>CAPE-OPEN error handling interfaces (ECape...)</item>
            </list>
            <para>Monitoring objects can possibly access the following interface via the ICapeSimulationContext interface:</para>
            <list type="bullet">
            <item>ICapeCOSEUtilities - for named values</item>
            <item>ICapeDiagnostic - for logging and popping up messages</item>
            <item>ICapeMaterialTemplateSystem - for accessing material templates and creation of material objects</item>
            <item>ICapeFlowsheetMonitoring - for accessing collections of streams and unit operations</item>
            </list>
            <para>Monitoring object are NOT SUPPOSED to change flowsheet configuration by:</para>
            <list type="bullet">
            <item>modifying unit operation paramaters</item>
            <item>connecting or disconnecting streams to unit operations</item>
            <item>calculating unit operations</item>
            <item>modifying streams by setting values</item>
            <item>any other action that will change the flowsheet state</item>
            </list>
            <para>Monitoring object can:</para>
            <list type="bullet">
            <item>obtain stream information</item>
            <item>obtain unit operation information</item>
            <item>duplicate material objects of streams for performing thermodynamic calculations</item>
            <item>create material objects via the ICapeMaterialTemplateSystem for creating thermodynamic calculations</item>
            <item>... </item>
            </list>
            <para>In addition to the CAPE-OPEN object caterogy ID, monitoring objects 
            should expose the Monitoring Object category ID:</para>
            <para>CATID_MONITORING_OBJECT = 7BA1AF89-B2E4-493d-BD80-2970BF4CBE99</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeFlowsheetMonitoring.GetStreamCollection">
            <summary>
            Get the collection of streams.
            </summary>
            <remarks>
            Get the collection of streams
            returns an ICapeCollection object enumerating streams
            each stream is identified via ICapeIdentification
            material streams expose ICapeThermoMaterial or ICapeThermoMaterialObject
            energy streams and information streams expose ICapeCollection, each item in the collection is an ICapeParameter object
            </remarks>
            <returns>
            An <see cref="T:CapeOpen.ICapeCollection"/> of unit operations.
            </returns>
        </member>
        <member name="M:CapeOpen.ICapeFlowsheetMonitoring.GetUnitOperationCollection">
            <summary>
            Get the collection of unit operations.
            </summary>
            <remarks>
            Get the collection of unit operations
            returns an ICapeCollection object enumerating unit operations
            each unit operation is identified via ICapeIdentification
            unit operations also expose ICapeUnit, and possibly ICapeUtilities (for parameter access)
            </remarks>
            <returns>
            An <see cref="T:CapeOpen.ICapeCollection"/>  of streams.
            </returns>
        </member>
        <member name="P:CapeOpen.ICapeFlowsheetMonitoring.SolutionStatus">
            <summary>
            Check whether the flowsheet is currently solved.
            </summary>
            <remarks>
            Check whether the flowsheet is currently solved
            </remarks>
            <returns>
            The 
            </returns>
        </member>
        <member name="P:CapeOpen.ICapeFlowsheetMonitoring.ValStatus">
            <summary>
            Check whether the flowsheet is valid.
            </summary>
            <remarks>
            Check whether the flowsheet is valid
            </remarks>
            <returns>
            The validation status of the flowsheet.
            </returns>
        </member>
        <member name="T:CapeOpen.ICapeFlowsheetMonitoringOld">
            <summary>
            This interface provides information 
            about error that result from values that are outside of their bounds. It can be raised 
            to indicate that the value of either a method argument or the value of a object 
            parameter is out of range.
            </summary>
            <remarks>
            <para>Moniting object should implement:</para>
            <list type="bullet">
            <item>ICapeIdentification</item>
            <item>IPersistStream or IPersistStreamInit in case of persistence implementation</item>
            <item>ICapeUtilities for parameter collection and Edit and for accepting an ICapeSimulationContext</item>
            <item>CAPE-OPEN error handling interfaces (ECape...)</item>
            </list>
            <para>Monitoring objects can possibly access the following interface via the ICapeSimulationContext interface:</para>
            <list type="bullet">
            <item>ICapeCOSEUtilities - for named values</item>
            <item>ICapeDiagnostic - for logging and popping up messages</item>
            <item>ICapeMaterialTemplateSystem - for accessing material templates and creation of material objects</item>
            <item>ICapeFlowsheetMonitoring - for accessing collections of streams and unit operations</item>
            </list>
            <para>Monitoring object are NOT SUPPOSED to change flowsheet configuration by:</para>
            <list type="bullet">
            <item>modifying unit operation paramaters</item>
            <item>connecting or disconnecting streams to unit operations</item>
            <item>calculating unit operations</item>
            <item>modifying streams by setting values</item>
            <item>any other action that will change the flowsheet state</item>
            </list>
            <para>Monitoring object can:</para>
            <list type="bullet">
            <item>obtain stream information</item>
            <item>obtain unit operation information</item>
            <item>duplicate material objects of streams for performing thermodynamic calculations</item>
            <item>create material objects via the ICapeMaterialTemplateSystem for creating thermodynamic calculations</item>
            <item>... </item>
            </list>
            <para>In addition to the CAPE-OPEN object caterogy ID, monitoring objects 
            should expose the Monitoring Object category ID:</para>
            <para>CATID_MONITORING_OBJECT = 7BA1AF89-B2E4-493d-BD80-2970BF4CBE99</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.ICapeFlowsheetMonitoringOld.GetStreamCollection">
            <summary>
            Get the collection of streams.
            </summary>
            <remarks>
            Get the collection of streams
            returns an ICapeCollection object enumerating streams
            each stream is identified via ICapeIdentification
            material streams expose ICapeThermoMaterial or ICapeThermoMaterialObject
            energy streams and information streams expose ICapeCollection, each item in the collection is an ICapeParameter object
            </remarks>
            <returns>
            An ICapeCollection of unit operations.
            </returns>
        </member>
        <member name="M:CapeOpen.ICapeFlowsheetMonitoringOld.GetUnitOperationCollection">
            <summary>
            Get the collection of unit operations.
            </summary>
            <remarks>
            Get the collection of unit operations
            returns an ICapeCollection object enumerating unit operations
            each unit operation is identified via ICapeIdentification
            unit operations also expose ICapeUnit, and possibly ICapeUtilities (for parameter access)
            </remarks>
            <returns>
            An ICapeCollection of streams.
            </returns>
        </member>
        <member name="M:CapeOpen.ICapeFlowsheetMonitoringOld.IsSolved">
            <summary>
            Check whether the flowsheet is currently solved.
            </summary>
            <remarks>
            Check whether the flowsheet is currently solved
            </remarks>
            <returns>
            <para>true, if the unit is solved.</para>
            <para>false, if the unit is not solved.</para>
            </returns>
        </member>
        <member name="P:CapeOpen.ICapeFlowsheetMonitoringOld.ValStatus">
            <summary>
            Check whether the flowsheet is valid.
            </summary>
            <remarks>
            Check whether the flowsheet is valid
            </remarks>
            <returns>
            The validation status of the flowsheet.
            </returns>
        </member>
        <member name="T:CapeOpen.MixerExample110">
            <summary>
            This is a mixer eample class that models an adiabtic mixer.
            </summary>
            <remarks>
            <para>The mixer  conducts a material and energy balance to determine output flow
            from the input flows.</para>
            <para> There are four parameters. Only one is used in the calculation, the
            real-valued pressure drop. The pressure of the material attached to the outlet
            port is set to the pressure of the lower inlet material objects less the 
            value of the pressure drop parameter. The remaining parameters are provided
            as a demonstration of integer, boolean and option parameters.</para>
            </remarks>
        </member>
        <member name="M:CapeOpen.MixerExample110.#ctor">
            <summary>
            Creates an instance of the CMixerExample110 unit operation.
            </summary>
            <remarks>
            This constructor demonstates the addition of a <see cref="T:CapeOpen.BooleanParameter"/>,
            <see cref="T:CapeOpen.IntegerParameter"/>, <see cref="T:CapeOpen.OptionParameter"/>,
            and a <see cref="T:CapeOpen.RealParameter"/> parameter to the parameter collection.
            In addition, the mixer unit has three <see cref="T:CapeOpen.UnitPort"/> ports
            added to the port collection. See the documentation for the 
            <see cref="M:CapeOpen.MixerExample110.OnCalculate"/> method for details on its implementation.
            </remarks>
            <example>
            An example of how to create a unit operation. Parameter and port objects are created 
            and added the their respective collections. Ports are implemented by the <see cref="T:CapeOpen.UnitPort"/> 
            class and are placed in the Port Collection. Parameters are added to the Parameter Collection 
            class. The available parameter classes are <see cref="T:CapeOpen.RealParameter"/>, <see cref="T:CapeOpen.IntegerParameter"/>, 
            <see cref="T:CapeOpen.BooleanParameter"/>, and <see cref="T:CapeOpen.OptionParameter"/>.
            <code>
            public MixerExample110()
            {
                // Add Ports using the CUnitPort constructor.
                this.Ports.Add(new UnitPort("Inlet Port1", "Test Inlet Port1", CapePortDirection.CAPE_INLET, CapePortType.CAPE_MATERIAL));
                this.Ports.Add(new UnitPort("Inlet Port2", "Test Inlet Port2", CapePortDirection.CAPE_INLET, CapePortType.CAPE_MATERIAL));
                this.Ports.Add(new UnitPort("Outlet Port", "Test Outlet Port", CapePortDirection.CAPE_OUTLET, CapePortType.CAPE_MATERIAL));
            
                // Add a real valued parameter using the CRealParameter  constructor.
                this.Parameters.Add(new RealParameter("PressureDrop", "Drop in pressure between the outlet from the mixer and the pressure of the lower pressure inlet.", 0.0, 0.0, 0.0, 100000000.0, CapeParamMode.CAPE_INPUT, "Pa"));
            
                // Add a real valued parameter using the CIntParameter  constructor.
                this.Parameters.Add(new IntegerParameter("Integer Parameter", 12, CapeParamMode.CAPE_INPUT_OUTPUT));
            
                // Add a real valued parameter using the CBoolParameter  constructor.
                this.Parameters.Add(new BooleanParameter("Boolean Parameter", false, CapeOpen.CapeParamMode.CAPE_INPUT_OUTPUT));
            
                // Create an array of strings for the option parameter restricted value list.
                String[] options = { "Test Value", "Another Value" };
            
                // Add a string valued parameter using the COptionParameter constructor.
                this.Parameters.Add(new OptionParameter("Option Paramter", "Example Option Parameter", "Test Value", "Test Value", options, true, CapeParamMode.CAPE_INPUT_OUTPUT));
            
                // Add an available report.
                this.Reports.Add("Calculation Report");
                this.calcReport = "The unit has not been calcauted.";
            }
            </code>
            </example>
        </member>
        <member name="M:CapeOpen.MixerExample110.OnCalculate">
            <summary>
            Calculation method for the CMixerExample110 unit operation.
            </summary>
            <remarks>
            A mixer unit operation combined the material flows from two inlet ports into the flow of a single outlet port.
            In order to do this calculation, the mixer unit obtains flow information from each inlet port,
            the adds the flows to obtain the flow of the outlet port. In the case of the mixer below, it is assumed that the
            components are the same in each material object and that the components are listed in the same order.
            After the combined flow is calculated at the values set to the outlet port, along with the 
            enthalpy of the stream calculated from an energy balance and the pressure determined from
            the inlet pressures, the outlet stream can be flahsed to determine equilibrium conditions.
            The last task is releasing any duplicate material objects obtained.
            </remarks>
            <example>
            <para>An example of how to calculate a unit operation. This method obtains material objects 
            from each of ports using the <see cref="T:CapeOpen.PortCollection"/> class. The <see cref="T:CapeOpen.ICapeThermoMaterial"/>
            interface is used to obtain the names using the CompIds() method, flows of each of the 
            components present in the material object and overall pressure obtained using the 
            <see cref="M:CapeOpen.ICapeThermoMaterial.GetOverallProp(System.String,System.String,System.Object@)"/> method. The enthaply of 
            each phase in the inlet materials is calculated using <see cref="M:CapeOpen.ICapeThermoPropertyRoutine.CalcSinglePhaseProp(System.Object,System.String)"/>
            method. The inlet enthalpy was multiplied by the phase flow (phase fraction * overall flow) 
            which was summed to determine the outlet stream enthalpy. 
            The output pressure from the lower of the two streams' pressure and pressure drop parameter. 
            Lastly, the results of the 
            calculations are applied to the output material object using the <see cref="M:CapeOpen.ICapeThermoMaterial.SetOverallProp(System.String,System.String,System.Object)"/> 
            method. The last method of the calculate method is to call the material's 
            <see cref="M:CapeOpen.ICapeThermoEquilibriumRoutine.CalcEquilibrium(System.Object,System.Object,System.String)"/> method.</para>
            <para>
            A calculation report is generated by this method that is made avalable through the
            <see cref="M:CapeOpen.MixerExample110.ProduceReport(System.String@)"/> method.
            </para>
            <para>
            In this case, the inlet materials need to be released. This is accomplished using the
            <see cref="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)"/> method.
            Using this method to release the outlet material object would result in an null object reference error.
            </para>
            <para>
            The method also documents use of the <see cref="M:CapeOpen.CapeObjectBase.throwException(System.Exception)"/> method to provide
            CAPE-OPEN compliant error handling.
            </para>
            <code>
            public override void OnCalculate()
            {
                this.calcReport = String.Empty;
                // Log a message using the simulation context (pop-up message commented out.
                if (this.SimulationContext is CapeOpen.ICapeDiagnostic)
                {
                    ((CapeOpen.ICapeDiagnostic)this.SimulationContext).LogMessage("Starting Mixer Calculation");
                }
                this.calcReport = String.Concat(this.calcReport, "Starting Mixer Calculation", System.Environment.NewLine);
                // Get the material Object from Port 0.
                ICapeThermoMaterial in1 = null;
                ICapeThermoMaterial in2 = null;
                ICapeThermoMaterial outlet = null;
                ICapeThermoMaterial temp = null;
                Object comps = null;
                Object forms = null;
                Object names = null;
                Object bTemp = null;
                Object molWts = null;
                Object casNos = null;
                String[] compIds1 = null;
                String[] compIds2 = null;
                String[] compIds3 = null;
                try
                {
                    temp = (ICapeThermoMaterial)this.Ports[0].connectedObject;
                    in1 = (ICapeThermoMaterial)temp.CreateMaterial();
                    in1.CopyFromMaterial(temp);
                    if (temp.GetType().IsCOMObject) System.Runtime.InteropServices.Marshal.ReleaseComObject(temp);
                    ((CapeOpen.ICapeThermoCompounds)in1).GetCompoundList(comps, forms, names, bTemp, molWts, casNos);
                    compIds1 = (String[])comps;
                    temp = (ICapeThermoMaterial)this.Ports[1].connectedObject;
                    in2 = (ICapeThermoMaterial)temp.CreateMaterial();
                    in2.CopyFromMaterial(temp);
                    if (temp.GetType().IsCOMObject) System.Runtime.InteropServices.Marshal.FinalReleaseComObject(temp);
                    ((CapeOpen.ICapeThermoCompounds)in2).GetCompoundList(comps, forms, names, bTemp, molWts, casNos);
                    compIds2 = (String[])comps;
                    outlet = (ICapeThermoMaterial)this.Ports[2].connectedObject;
                    ((CapeOpen.ICapeThermoCompounds)outlet).GetCompoundList(comps, forms, names, bTemp, molWts, casNos);
                    compIds3 = (String[])comps;
                }
                catch (System.Exception p_Ex)
                {
                    CapeOpen.CapeInvalidOperationException ex = new CapeOpen.CapeInvalidOperationException("Material object does not support CAPE-OPEN Thermodynamics 1.1.", p_Ex);
                    this.calcReport = String.Concat(this.calcReport, "Material object does not support CAPE-OPEN Thermodynamics 1.1.", System.Environment.NewLine);
                    this.throwException(ex);
                }
                int l1 = compIds1.Length;
                int l2 = compIds2.Length;
                int l3 = compIds3.Length;
                if (l1 != l2)
                {
                    this.calcReport = String.Concat(this.calcReport, "Compounds in imlet materials do not match.", System.Environment.NewLine);
                    throw new CapeOpen.CapeInvalidOperationException("Compounds in imlet materials do not match.");
                }
                if (l1 != l3)
                {
                    this.calcReport = String.Concat(this.calcReport, "Compounds in imlet materials does not match outlet material.", System.Environment.NewLine);
                    throw new CapeOpen.CapeInvalidOperationException("Compounds in imlet materials does not match outlet material.");
                }
                for (int i = 0; i &lt; l3; i++)
                {
                    if ((String.Compare(compIds1[i], compIds2[i])) != 0)
                    {
                        this.calcReport = String.Concat(this.calcReport, "Compounds in imlet materials do not match.", System.Environment.NewLine);
                        throw new CapeOpen.CapeInvalidOperationException("Compounds in imlet materials do not match.");
                    }
            
                    if (String.Compare(compIds1[i], compIds3[i]) != 0)
                    {
                        this.calcReport = String.Concat(this.calcReport, "Compounds in imlet materials does not match outlet material.", System.Environment.NewLine);
                        throw new CapeOpen.CapeInvalidOperationException("Compounds in imlet materials does not mAtch outlet material.");
                    }
                }
            
                double[] flow1 = null;
                double[] flow2 = null;
                double[] press1 = null;
                double[] press2 = null;
                double[] flow3 = new double[l3];
                String[] props = { "enthalpy" };
                String[] overall = { "Overall" };
                double[] enthalpy = { 0 };
                Object obj = null;
                Object obj1 = null;
                Object obj2 = null;
                Object obj3 = null;
                String[] phases = null;
                CapeOpen.ICapeThermoEquilibriumRoutine eqRoutine;
                try
                {
                    in1.GetOverallProp("flow", "mole", obj);
                    flow1 = (double[])obj;
                    double totalFlow = 0;
                    foreach (double flow in flow1)
                    {
                        totalFlow = totalFlow + flow;
                    }
                    in1.GetOverallProp("pressure", "", obj);
                    press1 = (double[])obj;
                    CapeOpen.ICapeThermoPropertyRoutine p_Calc = (CapeOpen.ICapeThermoPropertyRoutine)in1;
                    CapeOpen.ICapeThermoPhases phaseList = (CapeOpen.ICapeThermoPhases)in1;
                    phaseList.GetPhaseList(obj1, obj2, obj3);
                    phases = (String[])obj1;
                    foreach (String phase in phases)
                    {
                        p_Calc.CalcSinglePhaseProp(props, phase);
                        in1.GetSinglePhaseProp("enthalpy", phase, "mole", obj);
                        double[] enth = (double[])obj;
                        in1.GetSinglePhaseProp("phaseFraction", phase, "mole", obj);
                        double[] fract = (double[])obj;
                        enthalpy[0] = enthalpy[0] + totalFlow * fract[0] * enth[0];
                    }
                }
                catch (System.Exception p_Ex)
                {
                    CapeOpen.ECapeUser user = (CapeOpen.ECapeUser)in1;
                    this.calcReport = String.Concat(this.calcReport, user.description, System.Environment.NewLine);
                    this.throwException(p_Ex);
                }
                try
                {
                    in2.GetOverallProp("flow", "mole", obj);
                    flow2 = (double[])obj;
                    double totalFlow = 0;
                    foreach (double flow in flow2)
                    {
                        totalFlow = totalFlow + flow;
                    }
                    in2.GetOverallProp("pressure", "", obj);
                    press2 = (double[])obj;
                    CapeOpen.ICapeThermoPropertyRoutine p_Calc = (CapeOpen.ICapeThermoPropertyRoutine)in2;
                    CapeOpen.ICapeThermoPhases phaseList = (CapeOpen.ICapeThermoPhases)in2;
                    phaseList.GetPhaseList(obj1, obj2, obj3);
                    phases = (String[])obj1;
                    foreach (String phase in phases)
                    {
                        p_Calc.CalcSinglePhaseProp(props, phase);
                        in2.GetSinglePhaseProp("enthalpy", phase, "mole", obj);
                        double[] enth = (double[])obj;
                        in2.GetSinglePhaseProp("phaseFraction", phase, "mole", obj);
                        double[] fract = (double[])obj;
                        enthalpy[0] = enthalpy[0] + totalFlow * fract[0] * enth[0];
                    }
                }
                catch (System.Exception p_Ex)
                {
                    CapeOpen.ECapeUser user = (CapeOpen.ECapeUser)in2;
                    this.calcReport = String.Concat(this.calcReport, user.description, System.Environment.NewLine);
                    this.throwException(p_Ex);
                }
                for (int i = 0; i &lt; l3; i++)
                {
                    flow3[i] = flow1[i] + flow2[i];
                }
                try
                {
                    outlet.SetOverallProp("flow", "mole", flow3);
                    double[] press = new double[1];
                    press[0] = press1[0];
                    if (press1[0] &gt; press2[0]) press[0] = press2[0];
                    double pressdrop = ((CapeOpen.RealParameter)this.Parameters[0]).SIValue;
                    press[0] = press[0] - pressdrop;
                    outlet.SetOverallProp("pressure", "", press);
                    outlet.GetOverallProp("totalFlow", "mole", obj);
                    double[] totalFlow = (double[])obj;
                    enthalpy[0] = enthalpy[0] / totalFlow[0];
                    outlet.SetOverallProp("enthalpy", "mole", enthalpy);
                    this.calcReport = String.Concat(this.calcReport, "The outlet pressure is: ", press[0].ToString(), "Pa", System.Environment.NewLine);
                    int[] status = { 0, 0 };
                    outlet.SetPresentPhases(phases, status);
                    this.calcReport = String.Concat(this.calcReport, "The outlet ethalpy is: ", enthalpy[0].ToString(), "J/Mole", System.Environment.NewLine);
                    eqRoutine = (CapeOpen.ICapeThermoEquilibriumRoutine)outlet;
                    String[] spec1 = { "pressure", String.Empty, "Overall" };
                    String[] spec2 = { "enthalpy", String.Empty, "Overall" };
                    eqRoutine.CalcEquilibrium(spec1, spec2, "unspecified");
                    this.calcReport = String.Concat(this.calcReport, "Calculated pressure-enthalpy flash", System.Environment.NewLine);
                }
                catch (System.Exception p_Ex)
                {
                    CapeOpen.ECapeUser user = (CapeOpen.ECapeUser)outlet;
                    this.calcReport = String.Concat(this.calcReport, user.description, System.Environment.NewLine);
                    this.throwException(p_Ex);
                }
            
                if (in1.GetType().IsCOMObject) System.Runtime.InteropServices.Marshal.ReleaseComObject(in1);
                if (in2.GetType().IsCOMObject) System.Runtime.InteropServices.Marshal.ReleaseComObject(in2);
                // Log the end of the calculation.
                if (this.SimulationContext is CapeOpen.ICapeDiagnostic)
                ((CapeOpen.ICapeDiagnostic)this.SimulationContext).LogMessage("Ending Mixer Calculation");
                this.calcReport = String.Concat(this.calcReport, "Ending Mixer Calculation");
                ((CapeOpen.ICapeDiagnostic)this.SimulationContext).PopUpMessage("Ending Mixer Calculation");
            }
            </code>
            </example>
            <see cref="T:CapeOpen.ICapeThermoMaterial"/>
            <see cref="T:CapeOpen.ICapeThermoCompounds"/>
            <see cref="T:CapeOpen.ICapeThermoPhases"/>
            <see cref="T:CapeOpen.ICapeThermoPropertyRoutine"/>
            <see cref="T:CapeOpen.ICapeThermoEquilibriumRoutine"/>
            <see cref="T:CapeOpen.COMExceptionHandler"/>
        </member>
        <member name="M:CapeOpen.MixerExample110.ProduceReport(System.String@)">
            <summary>
            Produces the active report for the Mixer operation.
            </summary>
            <remarks>
            This method is declared as an explicit override of the <see cref="M:CapeOpen.ICapeUnitReport.ProduceReport(System.String@)"/> method. 
            The report generated is based upon the selected report property of this unit. If "Calculation Report" is
            the selected report, the report string generated during the calucation operation is returned.
            </remarks>
            <param name="message">String containing the text for the currently selected report.</param>
            <exception cref="T:CapeOpen.ECapeUnknown">The error to be raised when other error(s),  specified for this operation, are not suitable.</exception>
            <exception cref="T:CapeOpen.ECapeNoImpl">ECapeNoImpl</exception>
        </member>
        <member name="T:CapeOpen.CapeErrorInterfaceHR">
            <summary>
            Enumeration of the various HRESULT values for the CAPE-OPEN error handling
            interfaces.
            </summary>
            <remarks>
            <para>Extracted from "Strategies for Handling Errors in COM+", in Platform SDK help</para>
            <para>Use the FACILITY_ITF range of errors to report interface-specific errors.</para>
            <para>Interface-specific errors should be in the FACILITY_ITF range of errors,between 
            0x0200 and 0xFFFF. However, since Microsoft uses some codes after 0x0200, the CAPE-OPEN
            error codes will start at 0x0500</para>
            <para>Use the MAKE_HRESULT macro in C++ to introduce an interface-specific error code, 
            as shown in the following example:</para>
            <para>const HRESULT ERROR_NUMBER = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_ITF,10);</para>
            <para>So, offset on FIRST_E_INTERFACE_HR must be between 1 and 64255
            (0xFFFF-0x0500). We reserve the 0 offset.</para>
            <para>const int FIRST_E_INTERFACE_HR = (int)0x80040500;</para>
            <para>last HR value used for a CO error interface
            const int LAST_USED_E_INTERFACE_HR = (int)0x80040517;</para>
            <para>highest HR value that could be used to represent a CO error interface
            const int LAST_E_INTERFACE_HR = (int)0x8004FFFF;</para>
            </remarks>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeUnknownHR">
            <summary>
            0x80040501
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeDataHR">
            <summary>
            0x80040502
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeLicenceErrorHR">
            <summary>
            0x80040503
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeBadCOParameterHR">
            <summary>
            0x80040504
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeBadArgumentHR">
            <summary>
            0x80040505
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeInvalidArgumentHR">
            <summary>
            0x80040506
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeOutOfBoundsHR">
            <summary>
            0x80040507
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeImplementationHR">
            <summary>
            0x80040508
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeNoImplHR">
            <summary>
            0x80040509 
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeLimitedImplHR">
            <summary>
            0x8004050A
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeComputationHR">
            <summary>
            0x8004050B
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeOutOfResourcesHR">
            <summary>
            0x8004050C
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeNoMemoryHR">
            <summary>
            0x8004050D
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeTimeOutHR">
            <summary>
            0x8004050E
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeFailedInitialisationHR">
            <summary>
            0x8004050F
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeSolvingErrorHR">
            <summary>
            0x80040510
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeBadInvOrderHR">
            <summary>
            0x80040511
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeInvalidOperationHR">
            <summary>
            0x80040512
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapePersistenceHR">
            <summary>
            0x80040513
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeIllegalAccessHR">
            <summary>
            0x80040514
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapePersistenceNotFoundHR">
            <summary>
            0x80040515
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapePersistenceSystemErrorHR">
            <summary>
            0x80040516
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapePersistenceOverflowHR">
            <summary>
            0x80040517
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeOutsideSolverScopeHR">
            <summary>
            0x80040518, Specific to MINLP
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeHessianInfoNotAvailableHR">
            <summary>
            0x80040519, Specific to MINLP
            </summary>
        </member>
        <member name="F:CapeOpen.CapeErrorInterfaceHR.ECapeThrmPropertyNotAvailableHR">
            <summary>
            0x80040519, Specific to MINLP
            </summary>
        </member>
        <member name="T:CapeOpen.ECapeOutsideSolverScope">
            <summary>
            Exception thrown when the problem is outside the scope of the solver.
            </summary>
            <remarks>
            Exception thrown when the problem is outside the scope of the solver.
            </remarks>
        </member>
        <member name="P:CapeOpen.ECapeOutsideSolverScope.code">
            <summary>
            Code to designate the subcategory of the error. 
            </summary>
            <remarks>
            The assignment of values is left to each implementation. So that is a 
            proprietary code specific to the CO component provider. By default, set to 
            the CAPE-OPEN error HRESULT <see cref="T:CapeOpen.CapeErrorInterfaceHR"/>.
            </remarks>
            <value>
            The HRESULT value for the exception.
            </value>
        </member>
        <member name="P:CapeOpen.ECapeOutsideSolverScope.description">
            <summary>
            The description of the error.
            </summary>
            <remarks>
            The error description can include a more verbose description of the condition that
            caused the error.
            </remarks>
            <value>
            A string description of the exception.
            </value>
        </member>
        <member name="P:CapeOpen.ECapeOutsideSolverScope.scope">
            <summary>
            The scope of the error.
            </summary>
            <remarks>
            This property provides a list of packages where the error occurs separated by '.'. 
            For example CapeOpen.Common.Identification.
            </remarks>
            <value>The source of the error.</value>
        </member>
        <member name="P:CapeOpen.ECapeOutsideSolverScope.interfaceName">
            <summary>
            The name of the interface where the error is thrown. This is a mandatory field."
            </summary>
            <remarks>
            The interface that the error was thrown.
            </remarks>
            <value>The name of the interface.</value>
        </member>
        <member name="P:CapeOpen.ECapeOutsideSolverScope.operation">
            <summary>
            The name of the operation where the error is thrown. This is a mandatory field.
            </summary>
            <remarks>
            This field provides the name of the operation being perfomed when the exception was raised.
            </remarks>
            <value>The operation name.</value>
        </member>
        <member name="P:CapeOpen.ECapeOutsideSolverScope.moreInfo">
            <summary>
            An URL to a page, document, web site,  where more information on the error can be found. The content of this information is obviously implementation dependent.
            </summary>
            <remarks>
            This field provides an internet URL where more information about the error can be found.
            </remarks>
            <value>The URL.</value>
        </member>
        <member name="T:CapeOpen.ECapeErrorDummy">
            <summary>
            The ECapeErrorDummy interface is not intended to be used. 
            </summary>
            <remarks>
            It is only here to ensure that 
            the MIDL compiler exports the CapeErrorInterfaceHR enumeration. The compiler only exports 
            an enumeration if it is used in a method of an exported interface. 
            </remarks>
        </member>
        <member name="P:CapeOpen.ECapeErrorDummy.dummy">
            <summary>
            The HRESULT of the Dummy Error.
            </summary>
            <remarks>
            The HRESULT of the Dummy Error.
            </remarks>
            <value>
            The HRESULT of the Dummy Error.
            </value>
        </member>
    </members>
</doc>
